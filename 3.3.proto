import "Vector.proto";

message AbilityActionBlink {
  Vector rot = 8;
  Vector pos = 3;
}

import "Vector.proto";

message AbilityActionCreateGadget {
  uint32 room_id = 5;
  Vector rot = 13;
  Vector pos = 8;
}

import "Vector.proto";

message AbilityActionCreateTile {
  Vector pos = 15;
  Vector rot = 13;
}


message AbilityActionDeductStamina {
  bool is_swim = 7;
}

import "Vector.proto";

message AbilityActionDestroyTile {
  Vector pos = 13;
  Vector rot = 5;
}

import "Vector.proto";

message AbilityActionFireAfterImage {
  Vector dir = 10;
}

import "Vector.proto";

message AbilityActionGenerateElemBall {
  uint32 room_id = 8;
  Vector rot = 1;
  Vector pos = 14;
}


message AbilityActionHitEffect {
  uint32 trigger_id = 13;
}


message AbilityActionServerMonsterLog {
  repeated int32 param_list = 3;
}


message AbilityActionSetBulletTrackTarget {
  uint32 Unk3300_GKACKBIEOHK = 10;
  uint32 Unk3300_HGBOFFKEPDJ = 4;
}

import "Vector.proto";

message AbilityActionSetCrashDamage {
  float damage = 2;
  Vector hit_pos = 8;
}


message AbilityActionSetRandomOverrideMapValue {
  float random_value = 1;
}

import "Vector.proto";

message AbilityActionSummon {
  Vector pos = 3;
  Vector rot = 10;
}


message AbilityActionTriggerAbility {
  uint32 other_id = 4;
}

import "AbilityScalarValueEntry.proto";
import "AbilityString.proto";

message AbilityAppliedAbility {
  AbilityString ability_name = 1;
  AbilityString ability_override = 2;
  repeated AbilityScalarValueEntry override_map = 3;
  uint32 instanced_ability_id = 4;
}

import "AbilityAttachedModifier.proto";
import "AbilityString.proto";
import "ModifierDurability.proto";

message AbilityAppliedModifier {
  int32 modifier_local_id = 1;
  uint32 parent_ability_entity_id = 2;
  AbilityString parent_ability_name = 3;
  AbilityString parent_ability_override = 4;
  uint32 instanced_ability_id = 5;
  uint32 instanced_modifier_id = 6;
  float exist_duration = 7;
  AbilityAttachedModifier attached_instanced_modifier = 8;
  uint32 apply_entity_id = 9;
  bool is_attached_parent_ability = 10;
  ModifierDurability modifier_durability = 11;
  uint32 sbuff_uid = 12;
  bool is_serverbuff_modifier = 13;
}


message AbilityApplyLevelModifier {
  uint32 apply_entity_id = 1;
}


message AbilityArgument {
  oneof arg {
    uint32 int_arg = 14;
    float float_arg = 7;
    string str_arg = 9;
  }
}


message AbilityAttachedModifier {
  bool is_invalid = 1;
  uint32 owner_entity_id = 2;
  uint32 instanced_modifier_id = 3;
  bool is_serverbuff_modifier = 4;
  int32 attach_name_hash = 5;
}

import "Vector.proto";

message AbilityBornType {
  Vector move_dir = 3;
  Vector rot = 15;
  Vector pos = 12;
}

import "AbilityControlBlock.proto";

message AbilityChangeNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1127;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  AbilityControlBlock ability_control_block = 6;
  uint32 entity_id = 10;
}

import "AbilityEmbryo.proto";

message AbilityControlBlock {
  repeated AbilityEmbryo ability_embryo_list = 1;
}


message AbilityEmbryo {
  uint32 ability_id = 1;
  fixed32 ability_name_hash = 2;
  fixed32 ability_override_name_hash = 3;
}


message AbilityFloatValue {
  float value = 1;
}


message AbilityGadgetInfo {
  uint32 camp_id = 1;
  uint32 camp_target_type = 2;
  uint32 target_entity_id = 3;
}


message AbilityIdentifier {
  uint32 instanced_ability_id = 4;
  uint32 ability_caster_id = 10;
  bool is_serverbuff_modifier = 14;
  int32 local_id = 7;
  uint32 modifier_owner_id = 1;
  uint32 instanced_modifier_id = 5;
}

import "AbilityInvokeEntry.proto";

message AbilityInvocationFailNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1200;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 entity_id = 4;
  string reason = 8;
  AbilityInvokeEntry invoke = 11;
}

import "AbilityInvokeEntry.proto";

message AbilityInvocationFixedNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1179;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  AbilityInvokeEntry Unk3300_LDIAOMFIBPL = 7;
  AbilityInvokeEntry Unk3300_ONGNOHLIIBO = 3;
  AbilityInvokeEntry Unk3300_AHDFHHFHEFM = 10;
  AbilityInvokeEntry Unk3300_GAFFBFFKDIC = 1;
  AbilityInvokeEntry Unk3300_EMGKKHKLIEG = 4;
  AbilityInvokeEntry Unk3300_KFMHLLHECCJ = 9;
}

import "AbilityInvokeEntry.proto";

message AbilityInvocationsNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1130;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated AbilityInvokeEntry invokes = 5;
}


enum AbilityInvokeArgument {
  ABILITY_INVOKE_ARGUMENT_NONE = 0;
  ABILITY_INVOKE_ARGUMENT_META_MODIFIER_CHANGE = 1;
  ABILITY_INVOKE_ARGUMENT_META_COMMAND_MODIFIER_CHANGE_REQUEST = 2;
  ABILITY_INVOKE_ARGUMENT_META_SPECIAL_FLOAT_ARGUMENT = 3;
  ABILITY_INVOKE_ARGUMENT_META_OVERRIDE_PARAM = 4;
  ABILITY_INVOKE_ARGUMENT_META_CLEAR_OVERRIDE_PARAM = 5;
  ABILITY_INVOKE_ARGUMENT_META_REINIT_OVERRIDEMAP = 6;
  ABILITY_INVOKE_ARGUMENT_META_GLOBAL_FLOAT_VALUE = 7;
  ABILITY_INVOKE_ARGUMENT_META_CLEAR_GLOBAL_FLOAT_VALUE = 8;
  ABILITY_INVOKE_ARGUMENT_META_ABILITY_ELEMENT_STRENGTH = 9;
  ABILITY_INVOKE_ARGUMENT_META_ADD_OR_GET_ABILITY_AND_TRIGGER = 10;
  ABILITY_INVOKE_ARGUMENT_META_SET_KILLED_STATE = 11;
  ABILITY_INVOKE_ARGUMENT_META_SET_ABILITY_TRIGGER = 12;
  ABILITY_INVOKE_ARGUMENT_META_ADD_NEW_ABILITY = 13;
  ABILITY_INVOKE_ARGUMENT_META_REMOVE_ABILITY = 14;
  ABILITY_INVOKE_ARGUMENT_META_SET_MODIFIER_APPLY_ENTITY = 15;
  ABILITY_INVOKE_ARGUMENT_META_MODIFIER_DURABILITY_CHANGE = 16;
  ABILITY_INVOKE_ARGUMENT_META_ELEMENT_REACTION_VISUAL = 17;
  ABILITY_INVOKE_ARGUMENT_META_SET_POSE_PARAMETER = 18;
  ABILITY_INVOKE_ARGUMENT_META_UPDATE_BASE_REACTION_DAMAGE = 19;
  ABILITY_INVOKE_ARGUMENT_META_TRIGGER_ELEMENT_REACTION = 20;
  ABILITY_INVOKE_ARGUMENT_META_LOSE_HP = 21;
  ABILITY_INVOKE_ARGUMENT_META_DURABILITY_IS_ZERO = 22;
  ABILITY_INVOKE_ARGUMENT_ACTION_TRIGGER_ABILITY = 50;
  ABILITY_INVOKE_ARGUMENT_ACTION_SET_CRASH_DAMAGE = 51;
  ABILITY_INVOKE_ARGUMENT_ACTION_EFFECT = 52;
  ABILITY_INVOKE_ARGUMENT_ACTION_SUMMON = 53;
  ABILITY_INVOKE_ARGUMENT_ACTION_BLINK = 54;
  ABILITY_INVOKE_ARGUMENT_ACTION_CREATE_GADGET = 55;
  ABILITY_INVOKE_ARGUMENT_ACTION_APPLY_LEVEL_MODIFIER = 56;
  ABILITY_INVOKE_ARGUMENT_ACTION_GENERATE_ELEM_BALL = 57;
  ABILITY_INVOKE_ARGUMENT_ACTION_SET_RANDOM_OVERRIDE_MAP_VALUE = 58;
  ABILITY_INVOKE_ARGUMENT_ACTION_SERVER_MONSTER_LOG = 59;
  ABILITY_INVOKE_ARGUMENT_ACTION_CREATE_TILE = 60;
  ABILITY_INVOKE_ARGUMENT_ACTION_DESTROY_TILE = 61;
  ABILITY_INVOKE_ARGUMENT_ACTION_FIRE_AFTER_IMAGE = 62;
  ABILITY_INVOKE_ARGUMENT_ACTION_DEDUCT_STAMINA = 63;
  ABILITY_INVOKE_ARGUMENT_ACTION_HIT_EFFECT = 64;
  ABILITY_INVOKE_ARGUMENT_ACTION_SET_BULLET_TRACK_TARGET = 65;
  ABILITY_INVOKE_ARGUMENT_MIXIN_AVATAR_STEER_BY_CAMERA = 100;
  ABILITY_INVOKE_ARGUMENT_MIXIN_MONSTER_DEFEND = 101;
  ABILITY_INVOKE_ARGUMENT_MIXIN_WIND_ZONE = 102;
  ABILITY_INVOKE_ARGUMENT_MIXIN_COST_STAMINA = 103;
  ABILITY_INVOKE_ARGUMENT_MIXIN_ELITE_SHIELD = 104;
  ABILITY_INVOKE_ARGUMENT_MIXIN_ELEMENT_SHIELD = 105;
  ABILITY_INVOKE_ARGUMENT_MIXIN_GLOBAL_SHIELD = 106;
  ABILITY_INVOKE_ARGUMENT_MIXIN_SHIELD_BAR = 107;
  ABILITY_INVOKE_ARGUMENT_MIXIN_WIND_SEED_SPAWNER = 108;
  ABILITY_INVOKE_ARGUMENT_MIXIN_DO_ACTION_BY_ELEMENT_REACTION = 109;
  ABILITY_INVOKE_ARGUMENT_MIXIN_FIELD_ENTITY_COUNT_CHANGE = 110;
  ABILITY_INVOKE_ARGUMENT_MIXIN_SCENE_PROP_SYNC = 111;
  ABILITY_INVOKE_ARGUMENT_MIXIN_WIDGET_MP_SUPPORT = 112;
  ABILITY_INVOKE_ARGUMENT_MIXIN_DO_ACTION_BY_SELF_MODIFIER_ELEMENT_DURABILITY_RATIO = 113;
  ABILITY_INVOKE_ARGUMENT_MIXIN_FIREWORKS_LAUNCHER = 114;
  ABILITY_INVOKE_ARGUMENT_MIXIN_ATTACK_RESULT_CREATE_COUNT = 115;
  ABILITY_INVOKE_ARGUMENT_MIXIN_UGC_TIME_CONTROL = 116;
  ABILITY_INVOKE_ARGUMENT_MIXIN_AVATAR_COMBAT = 117;
  ABILITY_INVOKE_ARGUMENT_MIXIN_DEATH_ZONE_REGIONAL_PLAY_MIXIN = 118;
  ABILITY_INVOKE_ARGUMENT_MIXIN_UI_INTERACT = 119;
  ABILITY_INVOKE_ARGUMENT_MIXIN_SHOOT_FROM_CAMERA = 120;
  ABILITY_INVOKE_ARGUMENT_MIXIN_ERASE_BRICK_ACTIVITY = 121;
  ABILITY_INVOKE_ARGUMENT_MIXIN_BREAKOUT = 122;
}

import "AbilityInvokeArgument.proto";
import "AbilityInvokeEntryHead.proto";
import "ForwardType.proto";

message AbilityInvokeEntry {
  ForwardType forward_type = 9;
  uint32 event_id = 13;
  uint32 entity_id = 7;
  uint32 forward_peer = 14;
  double total_tick_time = 10;
  AbilityInvokeEntryHead head = 3;
  bytes ability_data = 2;
  AbilityInvokeArgument argument_type = 8;
  bool is_ignore_auth = 12;
}


message AbilityInvokeEntryHead {
  uint32 instanced_ability_id = 8;
  uint32 target_id = 6;
  uint32 server_buff_uid = 1;
  int32 local_id = 12;
  int32 modifier_config_local_id = 7;
  bool is_serverbuff_modifier = 15;
  uint32 instanced_modifier_id = 10;
}

import "AbilityAppliedAbility.proto";

message AbilityMetaAddAbility {
  AbilityAppliedAbility ability = 5;
}

import "AbilityString.proto";

message AbilityMetaAddOrGetAbilityAndTrigger {
  float trigger_argument = 4;
  AbilityString ability_name = 12;
  AbilityString ability_override = 13;
}


message AbilityMetaDurabilityIsZero {
  bool is_zero = 6;
}


message AbilityMetaElementReactionVisual {
  uint32 element_source_type = 6;
  uint32 element_reactor_type = 1;
  int32 hit_index = 14;
  uint32 element_reaction_type = 2;
}


message AbilityMetaLoseHp {
  uint32 lose_hp_config_idx = 15;
}

import "AbilityAttachedModifier.proto";
import "AbilityString.proto";
import "ModifierAction.proto";
import "ModifierProperty.proto";

message AbilityMetaModifierChange {
  AbilityAttachedModifier attached_instanced_modifier = 3;
  bool is_attached_parent_ability = 5;
  repeated ModifierProperty properties = 14;
  bool is_mute_remote = 12;
  int32 modifier_local_id = 2;
  bool is_mute_remote = 8;
  AbilityString parent_ability_name = 13;
  uint32 server_buff_uid = 9;
  uint32 apply_entity_id = 7;
  AbilityString parent_ability_override = 15;
  ModifierAction action = 4;
}


message AbilityMetaModifierDurabilityChange {
  float remain_durability = 13;
  float reduce_durability = 1;
}

import "AbilityScalarValueEntry.proto";

message AbilityMetaReInitOverrideMap {
  repeated AbilityScalarValueEntry override_map = 10;
}


message AbilityMetaSetAbilityTrigger {
  uint32 trigger_ability_entity_id = 1;
}


message AbilityMetaSetKilledState {
  bool killed = 5;
}


message AbilityMetaSetModifierApplyEntityId {
  uint32 apply_entity_id = 10;
}

import "AnimatorParameterValueInfoPair.proto";

message AbilityMetaSetPoseParameter {
  AnimatorParameterValueInfoPair value = 7;
}


message AbilityMetaSpecialFloatArgument {
  float argument_value = 4;
  bool is_on = 10;
}


message AbilityMetaTriggerElementReaction {
  int32 hit_index = 7;
  uint32 trigger_entity_id = 14;
  uint32 element_source_type = 13;
  uint32 element_reaction_type = 12;
  uint32 element_reactor_type = 2;
}

import "AbilityString.proto";

message AbilityMetaUpdateBaseReactionDamage {
  uint32 reaction_type = 2;
  uint32 source_caster_id = 13;
  AbilityString ability_name = 6;
  AbilityString global_value_key = 14;
}


message AbilityMixinAvatarCombat {
  bool is_enter_combat = 6;
}

import "Vector.proto";

message AbilityMixinAvatarSteerByCamera {
  Vector target_dir = 7;
  Vector target_pos = 2;
}

import "BreakoutSyncAction.proto";
import "BreakoutSyncCreateConnect.proto";
import "BreakoutSyncFinishGame.proto";
import "BreakoutSyncPing.proto";
import "BreakoutSyncSnapShot.proto";

message AbilityMixinBreakout {
  enum SyncType {
    SYNC_TYPE_NONE = 0;
    SYNC_TYPE_CREATE_CONNECT = 1;
    SYNC_TYPE_START_GAME = 2;
    SYNC_TYPE_PING = 3;
    SYNC_TYPE_FINISH_GAME = 4;
    SYNC_TYPE_SNAP_SHOT = 5;
    SYNC_TYPE_ACTION = 6;
  }

  int32 retcode = 8;
  SyncType sync_type = 4;
  oneof sync {
    BreakoutSyncCreateConnect sync_create_connect = 2;
    BreakoutSyncPing sync_ping = 1;
    BreakoutSyncFinishGame sync_finish_game = 5;
    BreakoutSyncSnapShot sync_snap_shot = 14;
    BreakoutSyncAction sync_action = 3;
  }
}


message AbilityMixinCostStamina {
  bool is_swim = 7;
}


message AbilityMixinDoActionByElementReaction {
  uint32 target_entity_id = 5;
}


message AbilityMixinDoActionBySelfModifierElementDurabilityRatio {
  float last_durability_ratio = 14;
}


message AbilityMixinElementShield {
  uint32 player_num = 9;
  float shield = 5;
  bool is_shield_broken = 8;
  float sub_shield = 4;
  float max_shield = 13;
  uint32 absorb_type = 10;
}


message AbilityMixinEliteShield {
  float sub_shield = 9;
}


message AbilityMixinEmpty {}


message AbilityMixinEraseBrickActivity {
  repeated uint32 data = 15;
}


message AbilityMixinFieldEntityCountChange {
  uint32 field_entity_count = 8;
}


message AbilityMixinFireworksLauncher {
  uint32 Unk3300_FHGLEJNJIHK = 5;
  uint32 Unk3300_BFJBDJLAOJL = 4;
  uint32 Unk3300_LPPKOFHKCPH = 7;
  uint32 Unk3300_BDGCGLGNAIB = 3;
  repeated uint32 fireworks_config = 12;
  uint32 phase = 1;
}


message AbilityMixinGlobalShield {
  float max_shield = 14;
  bool is_create_effect = 4;
  string shield_effect_name = 12;
  float sub_shield = 10;
  uint32 avatar_id = 3;
  float height_offset = 1;
}

import "BreakoutSnapShot.proto";
import "MassivePropSyncInfo.proto";

message AbilityMixinRecoverInfo {
  uint32 local_id = 3;
  repeated uint32 data_list = 4;
  bool is_serverbuff_modifier = 5;
  repeated MassivePropSyncInfo massive_prop_list = 6;
  BreakoutSnapShot breakout_snap_shot = 7;
  oneof source {
    uint32 instanced_ability_id = 1;
    uint32 instanced_modifier_id = 2;
  }
}

import "MassivePropSyncInfo.proto";

message AbilityMixinScenePropSync {
  repeated MassivePropSyncInfo massive_prop_list = 11;
  repeated int64 delete_id_list = 12;
  bool is_clear_all = 3;
}


message AbilityMixinShieldBar {
  float max_shield = 8;
  float shield = 4;
  uint32 player_num = 3;
  uint32 element_type = 7;
}

import "Vector.proto";

message AbilityMixinShootFromCamera {
  Vector forward = 13;
  Vector init_pos = 9;
}


message AbilityMixinUGCTimeControl {
  uint64 start_move_time_ms = 12;
  uint32 start_move_time = 9;
}


message AbilityMixinUIInteract {}


message AbilityMixinWidgetMpSupport {
  uint32 target_entity_id = 2;
}

import "Vector.proto";

message AbilityMixinWindSeedSpawner {
  message AddSignal {}

  message RefreshSeed {
    repeated Vector pos_list = 10;
  }

  message CatchSeed {
    uint32 entity_id = 13;
  }

  oneof cmd {
    AddSignal add_signal = 8;
    RefreshSeed refresh_seed = 12;
    CatchSeed catch_seed = 14;
  }
}


message AbilityMixinWindZone {
  repeated uint32 Unk3300_OJPFAIGIBLG = 3;
  repeated uint32 Unk3300_DJELBGDEDBH = 12;
}


enum AbilityScalarType {
  ABILITY_SCALAR_TYPE_UNKNOWN = 0;
  ABILITY_SCALAR_TYPE_FLOAT = 1;
  ABILITY_SCALAR_TYPE_INT = 2;
  ABILITY_SCALAR_TYPE_BOOL = 3;
  ABILITY_SCALAR_TYPE_TRIGGER = 4;
  ABILITY_SCALAR_TYPE_STRING = 5;
  ABILITY_SCALAR_TYPE_UINT = 6;
}

import "AbilityScalarType.proto";
import "AbilityString.proto";

message AbilityScalarValueEntry {
  AbilityString key = 1;
  AbilityScalarType value_type = 2;
  oneof value {
    float float_value = 3;
    string string_value = 4;
    int32 int_value = 5;
    uint32 uint_value = 6;
  }
}


message AbilityString {
  oneof type {
    string str = 1;
    uint32 hash = 2;
  }
}

import "AbilityAppliedAbility.proto";
import "AbilityAppliedModifier.proto";
import "AbilityMixinRecoverInfo.proto";
import "AbilityScalarValueEntry.proto";

message AbilitySyncStateInfo {
  bool is_inited = 1;
  repeated AbilityScalarValueEntry dynamic_value_map = 2;
  repeated AbilityAppliedAbility applied_abilities = 3;
  repeated AbilityAppliedModifier applied_modifiers = 4;
  repeated AbilityMixinRecoverInfo mixin_recover_infos = 5;
  repeated AbilityScalarValueEntry sgv_dynamic_value_map = 6;
}


message AcceptCityReputationRequestReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2847;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 city_id = 14;
  uint32 request_id = 8;
}


message AcceptCityReputationRequestRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2878;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 city_id = 1;
  int32 retcode = 9;
  uint32 request_id = 10;
}


enum AccountType {
  ACCOUNT_TYPE_MIHOYO_GUEST = 0;
  ACCOUNT_TYPE_MIHOYO = 1;
  ACCOUNT_TYPE_XIAOMI = 11;
  ACCOUNT_TYPE_COOLPAD = 12;
  ACCOUNT_TYPE_YYB = 13;
  ACCOUNT_TYPE_BILI = 14;
  ACCOUNT_TYPE_HUAWEI = 15;
  ACCOUNT_TYPE_MEIZU = 16;
  ACCOUNT_TYPE_360 = 17;
  ACCOUNT_TYPE_OPPO = 18;
  ACCOUNT_TYPE_VIVO = 19;
  ACCOUNT_TYPE_UC = 20;
  ACCOUNT_TYPE_WANDOJIA = 21;
  ACCOUNT_TYPE_LENOVO = 22;
  ACCOUNT_TYPE_JINLI = 23;
  ACCOUNT_TYPE_BAIDU = 25;
  ACCOUNT_TYPE_DANGLE = 26;
}


message Achievement {
  enum Status {
    STATUS_INVALID = 0;
    STATUS_UNFINISHED = 1;
    STATUS_FINISHED = 2;
    STATUS_REWARD_TAKEN = 3;
  }

  uint32 finish_timestamp = 8;
  uint32 cur_progress = 11;
  uint32 total_progress = 6;
  uint32 id = 14;
  Status status = 15;
}

import "Achievement.proto";

message AchievementAllDataNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2692;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint32 reward_taken_goal_id_list = 13;
  repeated Achievement achievement_list = 8;
}

import "Achievement.proto";

message AchievementUpdateNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2691;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated Achievement achievement_list = 11;
}


enum ActionReasonType {
  ACTION_REASON_TYPE_NONE = 0;
  ACTION_REASON_TYPE_QUEST_ITEM = 1;
  ACTION_REASON_TYPE_QUEST_REWARD = 2;
  ACTION_REASON_TYPE_TRIFLE = 3;
  ACTION_REASON_TYPE_SHOP = 4;
  ACTION_REASON_TYPE_PLAYER_UPGRADE_REWARD = 5;
  ACTION_REASON_TYPE_ADD_AVATAR = 6;
  ACTION_REASON_TYPE_GADGET_ENV_ANIMAL = 7;
  ACTION_REASON_TYPE_MONSTER_ENV_ANIMAL = 8;
  ACTION_REASON_TYPE_COMPOUND = 9;
  ACTION_REASON_TYPE_COOK = 10;
  ACTION_REASON_TYPE_GATHER = 11;
  ACTION_REASON_TYPE_MAIL_ATTACHMENT = 12;
  ACTION_REASON_TYPE_CITY_LEVELUP_RETURN = 15;
  ACTION_REASON_TYPE_CITY_LEVELUP_REWARD = 17;
  ACTION_REASON_TYPE_AREA_EXPLORE_REWARD = 18;
  ACTION_REASON_TYPE_UNLOCK_POINT_REWARD = 19;
  ACTION_REASON_TYPE_DUNGEON_FIRST_PASS = 20;
  ACTION_REASON_TYPE_DUNGEON_PASS = 21;
  ACTION_REASON_TYPE_CHANGE_ELEM_TYPE = 23;
  ACTION_REASON_TYPE_FETTER_OPEN = 25;
  ACTION_REASON_TYPE_DAILY_TASK_SCORE = 26;
  ACTION_REASON_TYPE_DAILY_TASK_HOST = 27;
  ACTION_REASON_TYPE_RAND_TASK_HOST = 28;
  ACTION_REASON_TYPE_EXPEDITION = 29;
  ACTION_REASON_TYPE_GACHA = 30;
  ACTION_REASON_TYPE_COMBINE = 31;
  ACTION_REASON_TYPE_RAND_TASK_GUEST = 32;
  ACTION_REASON_TYPE_DAILY_TASK_GUEST = 33;
  ACTION_REASON_TYPE_FORGE_OUTPUT = 34;
  ACTION_REASON_TYPE_FORGE_RETURN = 35;
  ACTION_REASON_TYPE_INIT_AVATAR = 36;
  ACTION_REASON_TYPE_MONSTER_DIE = 37;
  ACTION_REASON_TYPE_GM = 38;
  ACTION_REASON_TYPE_OPEN_CHEST = 39;
  ACTION_REASON_TYPE_GADGET_DIE = 40;
  ACTION_REASON_TYPE_MONSTER_CHANGE_HP = 41;
  ACTION_REASON_TYPE_SUBFIELD_DROP = 42;
  ACTION_REASON_TYPE_PUSH_TIPS_REWARD = 43;
  ACTION_REASON_TYPE_ACTIVITY_MONSTER_DROP = 44;
  ACTION_REASON_TYPE_ACTIVITY_GATHER = 45;
  ACTION_REASON_TYPE_ACTIVITY_SUBFIELD_DROP = 46;
  ACTION_REASON_TYPE_TOWER_SCHEDULE_REWARD = 47;
  ACTION_REASON_TYPE_TOWER_FLOOR_STAR_REWARD = 48;
  ACTION_REASON_TYPE_TOWER_FIRST_PASS_REWARD = 49;
  ACTION_REASON_TYPE_TOWER_DAILY_REWARD = 50;
  ACTION_REASON_TYPE_HIT_CLIENT_TRIVIAL_ENTITY = 51;
  ACTION_REASON_TYPE_OPEN_WORLD_BOSS_CHEST = 52;
  ACTION_REASON_TYPE_MATERIAL_DELETE_RETURN = 53;
  ACTION_REASON_TYPE_SIGN_IN_REWARD = 54;
  ACTION_REASON_TYPE_OPEN_BLOSSOM_CHEST = 55;
  ACTION_REASON_TYPE_RECHARGE = 56;
  ACTION_REASON_TYPE_BONUS_ACTIVITY_REWARD = 57;
  ACTION_REASON_TYPE_TOWER_COMMEMORATIVE_REWARD = 58;
  ACTION_REASON_TYPE_TOWER_SKIP_FLOOR_REWARD = 59;
  ACTION_REASON_TYPE_RECHARGE_BONUS = 60;
  ACTION_REASON_TYPE_RECHARGE_CARD = 61;
  ACTION_REASON_TYPE_RECHARGE_CARD_DAILY = 62;
  ACTION_REASON_TYPE_RECHARGE_CARD_REPLACE = 63;
  ACTION_REASON_TYPE_RECHARGE_CARD_REPLACE_FREE = 64;
  ACTION_REASON_TYPE_RECHARGE_PLAY_REPLACE = 65;
  ACTION_REASON_TYPE_MP_PLAY_TAKE_REWARD = 66;
  ACTION_REASON_TYPE_ACTIVITY_WATCHER = 67;
  ACTION_REASON_TYPE_SALESMAN_DELIVER_ITEM = 68;
  ACTION_REASON_TYPE_SALESMAN_REWARD = 69;
  ACTION_REASON_TYPE_REBATE = 70;
  ACTION_REASON_TYPE_MCOIN_EXCHANGE_HCOIN = 71;
  ACTION_REASON_TYPE_DAILY_TASK_EXCHANGE_LEGENDARY_KEY = 72;
  ACTION_REASON_TYPE_UNLOCK_PERSON_LINE = 73;
  ACTION_REASON_TYPE_FETTER_LEVEL_REWARD = 74;
  ACTION_REASON_TYPE_BUY_RESIN = 75;
  ACTION_REASON_TYPE_RECHARGE_PACKAGE = 76;
  ACTION_REASON_TYPE_DELIVERY_DAILY_REWARD = 77;
  ACTION_REASON_TYPE_CITY_REPUTATION_LEVEL = 78;
  ACTION_REASON_TYPE_CITY_REPUTATION_QUEST = 79;
  ACTION_REASON_TYPE_CITY_REPUTATION_REQUEST = 80;
  ACTION_REASON_TYPE_CITY_REPUTATION_EXPLORE = 81;
  ACTION_REASON_TYPE_OFFERGING_LEVEL = 82;
  ACTION_REASON_TYPE_ROUTINE_HOST = 83;
  ACTION_REASON_TYPE_ROUTINE_GUEST = 84;
  ACTION_REASON_TYPE_TREASURE_MAP_SPOT_TOKEN = 89;
  ACTION_REASON_TYPE_TREASURE_MAP_BONUS_LEVEL_REWARD = 90;
  ACTION_REASON_TYPE_TREASURE_MAP_MP_REWARD = 91;
  ACTION_REASON_TYPE_CONVERT = 92;
  ACTION_REASON_TYPE_OVERFLOW_TRANSFORM = 93;
  ACTION_REASON_TYPE_ACTIVITY_AVATAR_SELECTION_REWARD = 96;
  ACTION_REASON_TYPE_ACTIVITY_WATCHER_BATCH = 97;
  ACTION_REASON_TYPE_HIT_TREE_DROP = 98;
  ACTION_REASON_TYPE_GET_HOME_LEVELUP_REWARD = 99;
  ACTION_REASON_TYPE_HOME_DEFAULT_FURNITURE = 100;
  ACTION_REASON_TYPE_ACTIVITY_COND = 101;
  ACTION_REASON_TYPE_BATTLE_PASS_NOTIFY = 102;
  ACTION_REASON_TYPE_RELIQUARY_DECOMPOSE = 103;
  ACTION_REASON_TYPE_RECHARGE_GOOGLE_GIFT_GARD = 104;
  ACTION_REASON_TYPE_RECHARGE_CONCERT_PRODUCT = 105;
  ACTION_REASON_TYPE_RECHARGE_CONCERT_PRODUCT_REPLACE = 106;
  ACTION_REASON_TYPE_SEND_CONCERT_PRODUCT_BY_MUIP = 107;
  ACTION_REASON_TYPE_RECHARGE_APPLE_GIFT_GARD = 108;
  ACTION_REASON_TYPE_RECHARGE_PSN_COMPENSATION_PRODUCT = 109;
  ACTION_REASON_TYPE_COMPOUND_BOOST = 110;
  ACTION_REASON_TYPE_WOOD_EXCHANGE = 111;
  ACTION_REASON_TYPE_AVATAR_RENAME_AUDIT_FAILED = 112;
  ACTION_REASON_TYPE_AVATAR_RENAME_RESET = 113;
  ACTION_REASON_TYPE_PLAYER_USE_ITEM = 1001;
  ACTION_REASON_TYPE_DROP_ITEM = 1002;
  ACTION_REASON_TYPE_WEAPON_UPGRADE = 1011;
  ACTION_REASON_TYPE_WEAPON_PROMOTE = 1012;
  ACTION_REASON_TYPE_WEAPON_AWAKEN = 1013;
  ACTION_REASON_TYPE_RELIC_UPGRADE = 1014;
  ACTION_REASON_TYPE_ABILITY = 1015;
  ACTION_REASON_TYPE_DUNGEON_STATUE_DROP = 1016;
  ACTION_REASON_TYPE_OFFLINE_MSG = 1017;
  ACTION_REASON_TYPE_AVATAR_UPGRADE = 1018;
  ACTION_REASON_TYPE_AVATAR_PROMOTE = 1019;
  ACTION_REASON_TYPE_QUEST_ACTION = 1021;
  ACTION_REASON_TYPE_CITY_LEVELUP = 1022;
  ACTION_REASON_TYPE_UPGRADE_SKILL = 1024;
  ACTION_REASON_TYPE_UNLOCK_TALENT = 1025;
  ACTION_REASON_TYPE_UPGRADE_PROUD_SKILL = 1026;
  ACTION_REASON_TYPE_PLAYER_LEVEL_LIMIT_UP = 1027;
  ACTION_REASON_TYPE_DUNGEON_DAILY = 1028;
  ACTION_REASON_TYPE_ITEM_GIVING = 1030;
  ACTION_REASON_TYPE_FORGE_COST = 1031;
  ACTION_REASON_TYPE_INVESTIGATION_REWARD = 1032;
  ACTION_REASON_TYPE_INVESTIGATION_TARGET_REWARD = 1033;
  ACTION_REASON_TYPE_GADGET_INTERACT = 1034;
  ACTION_REASON_TYPE_SEA_LAMP_CI_MATERIAL = 1036;
  ACTION_REASON_TYPE_SEA_LAMP_CONTRIBUTION_REWARD = 1037;
  ACTION_REASON_TYPE_SEA_LAMP_PHASE_REWARD = 1038;
  ACTION_REASON_TYPE_SEA_LAMP_FLY_LAMP = 1039;
  ACTION_REASON_TYPE_AUTO_RECOVER = 1040;
  ACTION_REASON_TYPE_ACTIVITY_EXPIRE_ITEM = 1041;
  ACTION_REASON_TYPE_SUB_COIN_NEGATIVE = 1042;
  ACTION_REASON_TYPE_BARGAIN_DEDUCT = 1043;
  ACTION_REASON_TYPE_BATTLE_PASS_PAID_REWARD = 1044;
  ACTION_REASON_TYPE_BATTLE_PASS_LEVEL_REWARD = 1045;
  ACTION_REASON_TYPE_TRIAL_AVATAR_ACTIVITY_FIRST_PASS_REWARD = 1046;
  ACTION_REASON_TYPE_BUY_BATTLE_PASS_LEVEL = 1047;
  ACTION_REASON_TYPE_GRANT_BIRTHDAY_BENEFIT = 1048;
  ACTION_REASON_TYPE_ACHIEVEMENT_REWARD = 1049;
  ACTION_REASON_TYPE_ACHIEVEMENT_GOAL_REWARD = 1050;
  ACTION_REASON_TYPE_FIRST_SHARE_TO_SOCIAL_NETWORK = 1051;
  ACTION_REASON_TYPE_DESTROY_MATERIAL = 1052;
  ACTION_REASON_TYPE_CODEX_LEVELUP_REWARD = 1053;
  ACTION_REASON_TYPE_HUNTING_OFFER_REWARD = 1054;
  ACTION_REASON_TYPE_USE_WIDGET_ANCHOR_POINT = 1055;
  ACTION_REASON_TYPE_USE_WIDGET_BONFIRE = 1056;
  ACTION_REASON_TYPE_UNGRADE_WEAPON_RETURN_MATERIAL = 1057;
  ACTION_REASON_TYPE_USE_WIDGET_ONEOFF_GATHER_POINT_DETECTOR = 1058;
  ACTION_REASON_TYPE_USE_WIDGET_CLIENT_COLLECTOR = 1059;
  ACTION_REASON_TYPE_USE_WIDGET_CLIENT_DETECTOR = 1060;
  ACTION_REASON_TYPE_TAKE_GENERAL_REWARD = 1061;
  ACTION_REASON_TYPE_ASTER_TAKE_SPECIAL_REWARD = 1062;
  ACTION_REASON_TYPE_REMOVE_CODEX_BOOK = 1063;
  ACTION_REASON_TYPE_OFFERING_ITEM = 1064;
  ACTION_REASON_TYPE_USE_WIDGET_GADGET_BUILDER = 1065;
  ACTION_REASON_TYPE_EFFIGY_FIRST_PASS_REWARD = 1066;
  ACTION_REASON_TYPE_EFFIGY_REWARD = 1067;
  ACTION_REASON_TYPE_REUNION_FIRST_GIFT_REWARD = 1068;
  ACTION_REASON_TYPE_REUNION_SIGN_IN_REWARD = 1069;
  ACTION_REASON_TYPE_REUNION_WATCHER_REWARD = 1070;
  ACTION_REASON_TYPE_SALESMAN_MP_REWARD = 1071;
  ACTION_REASON_TYPE_AVATAR_PROMOTE_REWARD = 1072;
  ACTION_REASON_TYPE_BLESSING_REDEEM_REWARD = 1073;
  ACTION_REASON_TYPE_MIRACLE_RING_REWARD = 1074;
  ACTION_REASON_TYPE_EXPEDITION_REWARD = 1075;
  ACTION_REASON_TYPE_TREASURE_MAP_REMOVE_DETECTOR = 1076;
  ACTION_REASON_TYPE_MECHANICUS_DUNGEON_TICKET = 1077;
  ACTION_REASON_TYPE_MECHANICUS_LEVELUP_GEAR = 1078;
  ACTION_REASON_TYPE_MECHANICUS_BATTLE_SETTLE = 1079;
  ACTION_REASON_TYPE_REGION_SEARCH_REWARD = 1080;
  ACTION_REASON_TYPE_UNLOCK_COOP_CHAPTER = 1081;
  ACTION_REASON_TYPE_TAKE_COOP_REWARD = 1082;
  ACTION_REASON_TYPE_FLEUR_FAIR_DUNGEON_REWARD = 1083;
  ACTION_REASON_TYPE_ACTIVITY_SCORE = 1084;
  ACTION_REASON_TYPE_CHANNELLER_SLAB_ONEOFF_DUNGEON_REWARD = 1085;
  ACTION_REASON_TYPE_FURNITURE_MAKE_START = 1086;
  ACTION_REASON_TYPE_FURNITURE_MAKE_TAKE = 1087;
  ACTION_REASON_TYPE_FURNITURE_MAKE_CANCEL = 1088;
  ACTION_REASON_TYPE_FURNITURE_MAKE_FAST_FINISH = 1089;
  ACTION_REASON_TYPE_CHANNELLER_SLAB_LOOP_DUNGEON_FIRST_PASS_REWARD = 1090;
  ACTION_REASON_TYPE_CHANNELLER_SLAB_LOOP_DUNGEON_SCORE_REWARD = 1091;
  ACTION_REASON_TYPE_HOME_LIMITED_SHOP_BUY = 1092;
  ACTION_REASON_TYPE_HOME_COIN_COLLECT = 1093;
  ACTION_REASON_TYPE_SUMMER_TIME_SENTRY_TOWER_REWARD = 1094;
  ACTION_REASON_TYPE_SUMMER_TIME_SPRINT_BOAT_REWARD = 1095;
  ACTION_REASON_TYPE_SUMMER_TIME_BOSS_REWARD = 1096;
  ACTION_REASON_TYPE_SUMMER_TIME_BOMB_REWARD = 1097;
  ACTION_REASON_TYPE_HOME_FETTER_COLLECT = 1098;
  ACTION_REASON_TYPE_ECHO_SHELL_REWARD = 1099;
  ACTION_REASON_TYPE_HOME_EVENT_REWARD = 1100;
  ACTION_REASON_TYPE_BLITZ_RUSH_DUNGEON_REWARD = 1101;
  ACTION_REASON_TYPE_FURNITURE_MAKE_RETURN = 1102;
  ACTION_REASON_TYPE_HOME_PLANT_BOX_GATHER = 1103;
  ACTION_REASON_TYPE_HOME_PLANT_SEED = 1104;
  ACTION_REASON_TYPE_HOME_PLANT_GATHER = 1105;
  ACTION_REASON_TYPE_CHESS_DUNGEON_REWARD = 1106;
  ACTION_REASON_TYPE_GROUP_LINK_BUNDLE_FINISH = 1107;
  ACTION_REASON_TYPE_LUNA_RITE_SACRIFICE = 1108;
  ACTION_REASON_TYPE_LUNA_RITE_TAKE_SACRIFICE_REWARD = 1109;
  ACTION_REASON_TYPE_FISH_BITE = 1110;
  ACTION_REASON_TYPE_FISH_SUCC = 1111;
  ACTION_REASON_TYPE_PLANT_FLOWER_REWARD = 1112;
  ACTION_REASON_TYPE_PLANT_FLOWER_DELIVER_ITEM = 1113;
  ACTION_REASON_TYPE_PLANT_FLOWER_GIVE_FLOWER = 1114;
  ACTION_REASON_TYPE_PLANT_FLOWER_RECV_FLOWER = 1115;
  ACTION_REASON_TYPE_ROGUE_CHALLENGE_SETTLE = 1116;
  ACTION_REASON_TYPE_ROGUE_TAKE_FIRST_PASS_REWARD = 1117;
  ACTION_REASON_TYPE_ROGUE_UPGRADE_SHIKIGAMI = 1118;
  ACTION_REASON_TYPE_ROGUE_REFRESH_CARD = 1119;
  ACTION_REASON_TYPE_USE_WIDGET_CAPTURE_ANIMAL = 1120;
  ACTION_REASON_TYPE_CAPTURE_ANIMAL_SUCC = 1121;
  ACTION_REASON_TYPE_SNOW_DRIFTS = 1122;
  ACTION_REASON_TYPE_WINTER_CAMP_GIVE_ITEM = 1123;
  ACTION_REASON_TYPE_WINTER_CAMP_RECV_ITEM = 1124;
  ACTION_REASON_TYPE_WINTER_CAMP_EXPLORE_REWARD = 1125;
  ACTION_REASON_TYPE_WINTER_CAMP_BATTLE_REWARD = 1126;
  ACTION_REASON_TYPE_LANTERN_RITE_SKIN_REWARD = 1127;
  ACTION_REASON_TYPE_LANTERN_RITE_DUNGEON_REWARD = 1128;
  ACTION_REASON_TYPE_MICHIAE_MATSURI_DARK_CHALLENGE_REWARD = 1129;
  ACTION_REASON_TYPE_MICHIAE_MATSURI_UNLOCK_CRYSTAL_SKILL = 1130;
  ACTION_REASON_TYPE_LANTERN_RITE_GROUP_REWARD = 1131;
  ACTION_REASON_TYPE_COSTUME_DEFAULT_UNLOCK = 1132;
  ACTION_REASON_TYPE_SPICE_ACTIVITY_MAKE_SPICE = 1133;
  ACTION_REASON_TYPE_SPICE_ACTIVITY_PROCESS_FOOD = 1134;
  ACTION_REASON_TYPE_SPICE_ADD_AVATAR_FETTER = 1135;
  ACTION_REASON_TYPE_GACHA_ACTIVITY_ROBOT_REWARD = 1136;
  ACTION_REASON_TYPE_GIVING_TAKE_BACK = 1137;
  ACTION_REASON_TYPE_SUMMER_TIME_V2_DUNGEON_REWARD = 1138;
  ACTION_REASON_TYPE_GRAVEN_INNOCENCE_CAMP_REWARD = 1139;
  ACTION_REASON_TYPE_TREASURE_SEELIE_CHEST_REWARD = 1140;
  ACTION_REASON_TYPE_GCG_TAVERN_CHALLENGE_UNLOCK_CHARACTER = 1141;
  ACTION_REASON_TYPE_GCG_LEVEL_REWARD = 1143;
  ACTION_REASON_TYPE_GCG_CHALLENGE_FINISH = 1144;
  ACTION_REASON_TYPE_VINTAGE_MARKET_DEAL = 1145;
  ACTION_REASON_TYPE_VINTAGE_MARKET_BARGAIN = 1146;
  ACTION_REASON_TYPE_VINTAGE_MARKET_STORE = 1147;
  ACTION_REASON_TYPE_VINTAGE_PRESENT = 1148;
  ACTION_REASON_TYPE_VINTAGE_OPEN_STORE = 1149;
  ACTION_REASON_TYPE_VINTAGE_STORE_UNLOCK_SLOT = 1150;
  ACTION_REASON_TYPE_VINTAGE_STORE_NPC_EVENT = 1151;
  ACTION_REASON_TYPE_ROCK_BOARD_EXPLORE_REWARD = 1152;
  ACTION_REASON_TYPE_VINTAGE_STORE_DIVIDEND = 1153;
  ACTION_REASON_TYPE_AVATAR_RENAME = 1154;
  ACTION_REASON_TYPE_GCG_FINISH_LEVEL_QUEST = 1155;
  ACTION_REASON_TYPE_GCG_PROFICIENCY_REWARD = 1156;
}


message ActivityAcceptAllGiveGiftReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8900;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 schedule_id = 9;
}

import "ActivityAcceptGiftResultInfo.proto";

message ActivityAcceptAllGiveGiftRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8771;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated ActivityAcceptGiftResultInfo accept_gift_result_info_list = 7;
  uint32 schedule_id = 6;
  int32 retcode = 12;
}


message ActivityAcceptGiftResultInfo {
  map<uint32, uint32> Unk3300_JFHLEBLOFMA = 1;
  map<uint32, uint32> Unk3300_COCFNBJCFGP = 9;
  uint32 uid = 12;
}


message ActivityAcceptGiveGiftReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8827;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 uid = 9;
  uint32 schedule_id = 12;
}

import "ActivityAcceptGiftResultInfo.proto";

message ActivityAcceptGiveGiftRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8047;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 4;
  ActivityAcceptGiftResultInfo accept_gift_result_info = 2;
  uint32 schedule_id = 1;
}


message ActivityBannerClearReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2147;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 activity_id = 14;
  uint32 schedule_id = 7;
}


message ActivityBannerClearRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2198;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 8;
  uint32 schedule_id = 5;
  uint32 activity_id = 9;
}


message ActivityBannerNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2160;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 activity_id = 1;
  uint32 schedule_id = 8;
}


message ActivityCoinInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2018;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 schedule_id = 8;
  map<uint32, uint32> activity_coin_map = 2;
  uint32 activity_id = 4;
}

import "Uint32Pair.proto";

message ActivityCondStateChangeNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2194;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 activity_id = 5;
  uint32 schedule_id = 14;
  repeated uint32 expire_cond_list = 1;
  repeated uint32 meet_cond_list = 4;
  repeated uint32 activated_sale_id_list = 8;
  repeated Uint32Pair disable_transfer_point_interaction_list = 11;
}

import "Uint32Pair.proto";

message ActivityDisableTransferPointInteractionNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8029;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  bool is_disable = 13;
  Uint32Pair scene_point_pair = 11;
}


message ActivityDungeonAvatar {
  uint32 avatar_id = 1;
  bool is_trial = 2;
  uint32 costume_id = 3;
}

import "ProfilePicture.proto";

message ActivityFriendGiftWishData {
  map<uint32, uint32> gift_num_map = 5;
  uint32 uid = 7;
  ProfilePicture profile_picture = 11;
  string remark_name = 12;
  string nickname = 2;
}


message ActivityGetCanGiveFriendGiftReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8330;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 schedule_id = 2;
}


message ActivityGetCanGiveFriendGiftRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8374;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  map<uint32, uint32> gift_num_map = 7;
  int32 retcode = 11;
  uint32 schedule_id = 12;
}


message ActivityGetFriendGiftWishListReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8642;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 schedule_id = 2;
}

import "ActivityFriendGiftWishData.proto";

message ActivityGetFriendGiftWishListRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8355;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated ActivityFriendGiftWishData friend_gift_wish_list = 12;
  uint32 schedule_id = 4;
  int32 retcode = 2;
}


message ActivityGetRecvGiftListReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8995;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 schedule_id = 5;
}

import "ActivityRecvGiftData.proto";

message ActivityGetRecvGiftListRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8844;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 schedule_id = 7;
  int32 retcode = 9;
  repeated ActivityRecvGiftData recv_gift_list = 10;
}


message ActivityGiveFriendGiftReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8178;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  map<uint32, uint32> gift_num_map = 10;
  uint32 schedule_id = 15;
  uint32 uid = 1;
}


message ActivityGiveFriendGiftRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8373;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 schedule_id = 15;
  int32 retcode = 8;
  repeated uint32 limit_gift_list = 14;
}


message ActivityHaveRecvGiftNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8118;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 schedule_id = 2;
}

import "ActivityPushTipsData.proto";
import "ActivityWatcherInfo.proto";
import "ArenaChallengeActivityDetailInfo.proto";
import "AsterActivityDetailInfo.proto";
import "BartenderActivityDetailInfo.proto";
import "BlessingActivityDetailInfo.proto";
import "BlitzRushActivityDetailInfo.proto";
import "BounceConjuringActivityDetailInfo.proto";
import "BrickBreakerDetailInfo.proto";
import "BuoyantCombatDetailInfo.proto";
import "ChannelerSlabActivityDetailInfo.proto";
import "CharAmusementDetailInfo.proto";
import "ChessActivityDetailInfo.proto";
import "CoinCollectDetailInfo.proto";
import "CrucibleActivityDetailInfo.proto";
import "CrystalLinkActivityDetailInfo.proto";
import "DeliveryActivityDetailInfo.proto";
import "DigActivityDetailInfo.proto";
import "DragonSpineActivityDetailInfo.proto";
import "EchoShellDetailInfo.proto";
import "EffigyActivityDetailInfo.proto";
import "EffigyChallengeV2DetailInfo.proto";
import "ExpeditionActivityDetailInfo.proto";
import "FindHilichurlDetailInfo.proto";
import "FleurFairActivityDetailInfo.proto";
import "FlightActivityDetailInfo.proto";
import "FungusFighterDetailInfo.proto";
import "GachaActivityDetailInfo.proto";
import "GearActivityDetailInfo.proto";
import "GravenInnocenceDetailInfo.proto";
import "HachiActivityDetailInfo.proto";
import "HideAndSeekActivityDetailInfo.proto";
import "InstableSprayDetailInfo.proto";
import "IrodoriActivityDetailInfo.proto";
import "IslandPartyDetailInfo.proto";
import "LanternRiteActivityDetailInfo.proto";
import "LuminanceStoneChallengeActivityDetailInfo.proto";
import "LunaRiteDetailInfo.proto";
import "MichiaeMatsuriActivityDetailInfo.proto";
import "MistTrialActivityDetailInfo.proto";
import "MoonfinTrialActivityDetailInfo.proto";
import "MuqadasPotionActivityDetailInfo.proto";
import "MusicGameActivityDetailInfo.proto";
import "PhotoActivityDetailInfo.proto";
import "PlantFlowerActivityDetailInfo.proto";
import "PotionActivityDetailInfo.proto";
import "RockBoardExploreDetailInfo.proto";
import "RogueDiaryActivityDetailInfo.proto";
import "RoguelikeDungeonActivityDetailInfo.proto";
import "SalesmanActivityDetailInfo.proto";
import "SeaLampActivityDetailInfo.proto";
import "SeaLampActivityInfo.proto";
import "SpiceActivityDetailInfo.proto";
import "SummerTimeDetailInfo.proto";
import "SummerTimeV2DetailInfo.proto";
import "SumoActivityDetailInfo.proto";
import "TanukiTravelActivityDetailInfo.proto";
import "TreasureMapActivityDetailInfo.proto";
import "TreasureSeelieActivityDetailInfo.proto";
import "TrialAvatarActivityDetailInfo.proto";
import "UgcActivityDetailInfo.proto";
import "VintageActivityDetailInfo.proto";
import "WaterSpiritActivityDetailInfo.proto";
import "WindFieldDetailInfo.proto";
import "WinterCampActivityDetailInfo.proto";

message ActivityInfo {
  bool Unk3300_MJNPGEKLOCG = 360;
  bool is_finished = 8;
  uint32 cur_score = 1268;
  uint32 schedule_id = 7;
  uint32 score_limit = 1870;
  bool Unk3300_ICNJJKDHPCH = 14;
  repeated uint32 meet_cond_list = 11;
  bool Unk3300_NEPKLLBJFKK = 1645;
  repeated ActivityWatcherInfo watcher_info_list = 6;
  repeated ActivityPushTipsData activity_push_tips_data_list = 1867;
  uint32 activity_id = 13;
  repeated uint32 taken_reward_list = 1889;
  uint32 selected_avatar_reward_id = 697;
  map<uint32, uint32> activity_coin_map = 36;
  uint32 first_day_start_time = 786;
  bool Unk3300_ABJKLALKLDG = 1486;
  uint32 activity_type = 3;
  bool Unk3300_CBCEHLJJOGI = 1375;
  uint32 begin_time = 1;
  bool Unk3300_MDBDPIBEGGH = 12;
  map<uint32, uint32> wish_gift_num_map = 939;
  uint32 end_time = 10;
  repeated uint32 expire_cond_list = 5;
  oneof detail {
    SeaLampActivityDetailInfo sam_lamp_info = 2;
    CrucibleActivityDetailInfo crucible_info = 15;
    SalesmanActivityDetailInfo salesman_info = 9;
    TrialAvatarActivityDetailInfo trial_avatar_info = 4;
    DeliveryActivityDetailInfo delivery_info = 1141;
    AsterActivityDetailInfo aster_info = 1977;
    FlightActivityDetailInfo flight_info = 2011;
    DragonSpineActivityDetailInfo dragon_spine_info = 1310;
    EffigyActivityDetailInfo effigy_info = 1374;
    TreasureMapActivityDetailInfo treasure_map_info = 1925;
    BlessingActivityDetailInfo blessing_info = 1962;
    SeaLampActivityInfo sea_lamp_info = 247;
    ExpeditionActivityDetailInfo expedition_info = 1752;
    ArenaChallengeActivityDetailInfo arena_challenge_info = 538;
    FleurFairActivityDetailInfo fleur_fair_info = 1447;
    WaterSpiritActivityDetailInfo water_spirit_info = 635;
    ChannelerSlabActivityDetailInfo channeler_slab_info = 846;
    MistTrialActivityDetailInfo mist_trial_activity_info = 432;
    HideAndSeekActivityDetailInfo hide_and_seek_info = 839;
    FindHilichurlDetailInfo find_hilichurl_info = 378;
    SummerTimeDetailInfo summer_time_info = 1910;
    BuoyantCombatDetailInfo buoyant_combat_info = 686;
    EchoShellDetailInfo echo_shell_info = 1162;
    BounceConjuringActivityDetailInfo bounce_conjuring_info = 922;
    BlitzRushActivityDetailInfo blitz_rush_info = 64;
    ChessActivityDetailInfo chess_info = 1006;
    SumoActivityDetailInfo sumo_info = 505;
    MoonfinTrialActivityDetailInfo moonfin_trial_info = 766;
    LunaRiteDetailInfo luna_rite_info = 1545;
    PlantFlowerActivityDetailInfo plant_flower_info = 1274;
    MusicGameActivityDetailInfo music_game_info = 1989;
    RoguelikeDungeonActivityDetailInfo roguelike_dungeon_info = 970;
    DigActivityDetailInfo dig_info = 1862;
    HachiActivityDetailInfo hachi_info = 511;
    WinterCampActivityDetailInfo winter_camp_info = 699;
    PotionActivityDetailInfo potion_info = 1567;
    TanukiTravelActivityDetailInfo tanuki_travel_activity_info = 1348;
    LanternRiteActivityDetailInfo lantern_rite_activity_info = 237;
    MichiaeMatsuriActivityDetailInfo michiae_matsuri_info = 1839;
    BartenderActivityDetailInfo bartender_info = 551;
    UgcActivityDetailInfo ugc_info = 1182;
    CrystalLinkActivityDetailInfo crystal_link_info = 812;
    IrodoriActivityDetailInfo irodori_info = 1056;
    PhotoActivityDetailInfo photo_info = 1822;
    SpiceActivityDetailInfo spice_info = 789;
    GachaActivityDetailInfo gacha_info = 1297;
    LuminanceStoneChallengeActivityDetailInfo luminance_stone_challenge_info = 444;
    RogueDiaryActivityDetailInfo rogue_diary_info = 560;
    SummerTimeV2DetailInfo summer_time_v2_info = 411;
    IslandPartyDetailInfo island_party_info = 740;
    GearActivityDetailInfo gear_info = 1482;
    GravenInnocenceDetailInfo graven_innocence_info = 1928;
    InstableSprayDetailInfo instable_spray_info = 1145;
    MuqadasPotionActivityDetailInfo muqadas_potion_info = 1662;
    TreasureSeelieActivityDetailInfo treasure_seelie_info = 1032;
    RockBoardExploreDetailInfo rock_board_explore_info = 1265;
    VintageActivityDetailInfo vintage_info = 1308;
    WindFieldDetailInfo wind_field_info = 468;
    FungusFighterDetailInfo fungus_fighter_info = 1757;
    CharAmusementDetailInfo char_amusement_info = 621;
    EffigyChallengeV2DetailInfo effigy_challenge_info = 233;
    CoinCollectDetailInfo coin_collect_info = 2002;
    BrickBreakerDetailInfo brick_breaker_info = 1522;
  }
}

import "ActivityInfo.proto";

message ActivityInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2119;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  ActivityInfo activity_info = 12;
}


message ActivityPlayOpenAnimNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2059;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 activity_id = 1;
}

import "ActivityPushTipsState.proto";

message ActivityPushTipsData {
  uint32 activity_push_tips_id = 14;
  ActivityPushTipsState state = 3;
}

import "ActivityPushTipsData.proto";

message ActivityPushTipsInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8418;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 schedule_id = 3;
  repeated ActivityPushTipsData activity_push_tips_data_list = 10;
  uint32 activity_id = 13;
}


enum ActivityPushTipsState {
  ACTIVITY_PUSH_TIPS_STATE_NONE = 0;
  ACTIVITY_PUSH_TIPS_STATE_START = 1;
  ACTIVITY_PUSH_TIPS_STATE_READ = 2;
}


message ActivityReadPushTipsReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8007;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated uint32 activity_push_tips_id_list = 1;
  uint32 activity_id = 12;
}


message ActivityReadPushTipsRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8499;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 6;
}

import "ProfilePicture.proto";

message ActivityRecvGiftData {
  ProfilePicture profile_picture = 3;
  string nickname = 7;
  map<uint32, uint32> gift_num_map = 6;
  string remark_name = 1;
  uint32 uid = 12;
}


message ActivitySaleChangeNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2012;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  bool is_close = 14;
  uint32 sale_id = 8;
}


message ActivityScheduleInfo {
  uint32 end_time = 3;
  bool is_open = 12;
  uint32 begin_time = 1;
  uint32 schedule_id = 9;
  uint32 activity_id = 11;
}

import "ActivityScheduleInfo.proto";

message ActivityScheduleInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2124;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated ActivityScheduleInfo activity_schedule_list = 1;
  uint32 remain_fly_sea_lamp_num = 13;
}


message ActivitySelectAvatarCardReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2052;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 reward_id = 14;
  uint32 activity_id = 6;
}


message ActivitySelectAvatarCardRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2154;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 3;
  uint32 activity_id = 15;
  uint32 reward_id = 2;
}


message ActivitySetGiftWishReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8329;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 schedule_id = 12;
  map<uint32, uint32> gift_num_map = 13;
}


message ActivitySetGiftWishRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8757;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 9;
  uint32 schedule_id = 4;
}


message ActivityShopSheetInfo {
  uint32 begin_time = 1;
  uint32 end_time = 6;
  uint32 sheet_id = 15;
}


message ActivityTakeAllScoreRewardReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8162;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 activity_id = 14;
}


message ActivityTakeAllScoreRewardRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8043;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint32 reward_config_list = 10;
  int32 retcode = 9;
  uint32 activity_id = 3;
}


message ActivityTakeScoreRewardReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8127;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 reward_config_id = 12;
  uint32 activity_id = 7;
}


message ActivityTakeScoreRewardRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8527;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 activity_id = 12;
  uint32 reward_config_id = 2;
  int32 retcode = 13;
}


message ActivityTakeWatcherRewardBatchReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2184;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated uint32 watcher_id_list = 7;
  uint32 activity_id = 11;
}

import "ItemParam.proto";

message ActivityTakeWatcherRewardBatchRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2090;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 11;
  uint32 activity_id = 10;
  repeated ItemParam item_list = 8;
  repeated uint32 watcher_id_list = 13;
}


message ActivityTakeWatcherRewardReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2073;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 watcher_id = 14;
  uint32 activity_id = 4;
}


message ActivityTakeWatcherRewardRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2109;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 14;
  uint32 activity_id = 10;
  uint32 watcher_id = 15;
}

import "ActivityWatcherInfo.proto";

message ActivityUpdateWatcherNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2103;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 activity_id = 9;
  ActivityWatcherInfo watcher_info = 5;
}


message ActivityWatcherInfo {
  bool is_taken_reward = 2;
  uint32 total_progress = 1;
  uint32 cur_progress = 8;
  uint32 watcher_id = 14;
}

import "AranaraCollectionState.proto";

message AddAranaraCollectionNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 6391;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  AranaraCollectionState Unk3300_NJLJBBMJLBK = 10;
  uint32 collection_id = 7;
  AranaraCollectionState Unk3300_AFBIBLNKCOD = 4;
  uint32 collection_type = 2;
}


message AddBackupAvatarTeamReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1616;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}


message AddBackupAvatarTeamRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1782;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 13;
}


message AddBlacklistReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4094;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 target_uid = 5;
}

import "FriendBrief.proto";

message AddBlacklistRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4072;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  FriendBrief target_friend_brief = 9;
  int32 retcode = 13;
}

import "FriendBrief.proto";

message AddFriendNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4037;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  FriendBrief target_friend_brief = 2;
  uint32 target_uid = 15;
}

import "AddNoGachaAvatarCardTransferItem.proto";

message AddNoGachaAvatarCardNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1610;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 reason = 9;
  uint32 Unk3300_MGAPHPOLKKE = 7;
  uint32 item_id = 2;
  uint32 avatar_id = 4;
  bool is_transfer_to_item = 14;
  uint32 Unk3300_GPBINALMFDF = 8;
  repeated AddNoGachaAvatarCardTransferItem transfer_item_list = 6;
}


message AddNoGachaAvatarCardTransferItem {
  uint32 count = 5;
  bool is_new = 8;
  uint32 item_id = 11;
}


message AddQuestContentProgressReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 443;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 content_type = 1;
  uint32 add_progress = 6;
  uint32 param = 11;
}


message AddQuestContentProgressRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 461;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 content_type = 7;
  int32 retcode = 12;
}

import "Vector.proto";

message AddRandTaskInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 154;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 rand_task_id = 7;
  Vector pos = 2;
}


message AddSeenMonsterNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 213;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated uint32 monster_id_list = 14;
}


message AdjustTrackingInfo {
  string Unk3300_CHCOHLGBHLB = 2;
  string Unk3300_GAMLJPFKCGC = 9;
  string Unk3300_ONNMBNODPIA = 4;
  string Unk3300_MHDOPAMDMPL = 6;
  string Unk3300_INAIEOMCIEM = 7;
  string Unk3300_KLKFLIIOFKK = 3;
}


message AdjustWorldLevelReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 112;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 Unk3300_DNLKIMGLBLP = 14;
  uint32 Unk3300_DJBKBPDCBFH = 3;
}


message AdjustWorldLevelRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 131;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 1;
  uint32 after_world_level = 11;
  uint32 cd_over_time = 5;
}


message AiSkillCdInfo {
  map<uint32, uint32> skill_group_cd_map = 1;
  map<uint32, uint32> skill_cd_map = 15;
}

import "AISnapshotEntitySkillCycle.proto";

message AISnapshotEntityData {
  repeated AISnapshotEntitySkillCycle finished_skill_cycles = 14;
  uint32 attack_target_id = 2;
  uint32 entity_id = 6;
  float Unk3300_ALBMEMMJEJA = 13;
  uint32 Unk3300_IADJCDJOKND = 5;
  uint32 Unk3300_FNCIDLDKANO = 7;
  float Unk3300_GPCFOCIFHCD = 15;
  float Unk3300_FMBBEIHCCJO = 12;
  float Unk3300_LIJIDJOLLEB = 11;
  uint32 Unk3300_GNBOAJHMNJO = 9;
  map<uint32, uint32> hitting_avatars = 4;
  uint32 Unk3300_FIKEAEPLOHJ = 3;
}


message AISnapshotEntitySkillCycle {
  bool Unk3300_IIOIBLEOHEK = 14;
  uint32 skill_id = 12;
  bool Unk3300_ABKFNGIDFMI = 7;
  bool Unk3300_IFKDIMDJBDH = 2;
  bool Unk3300_EGIILMJFEBE = 1;
}

import "AISnapshotEntityData.proto";

message AISnapshotInfo {
  repeated AISnapshotEntityData ai_snapshots = 1;
}


message AiSyncInfo {
  uint32 entity_id = 2;
  bool has_path_to_target = 4;
  bool is_self_killing = 14;
}


message AiThreatInfo {
  map<uint32, uint32> ai_threat_map = 11;
}

import "MainCoop.proto";

message AllCoopInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1992;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated MainCoop main_coop_list = 10;
}

import "MapMarkPoint.proto";

message AllMarkPointNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3322;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated MapMarkPoint mark_list = 2;
}


message AllSeenMonsterNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 228;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated uint32 monster_id_list = 1;
}

import "ShareCDInfo.proto";

message AllShareCDDataNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 9079;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  map<uint32, ShareCDInfo> share_cd_info_map = 13;
}


message AllWidgetBackgroundActiveStateNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5932;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint32 background_active_widget_list = 2;
}

import "AnchorPointData.proto";
import "ClientCollectorData.proto";
import "LunchBoxData.proto";
import "OneoffGatherPointDetectorData.proto";
import "SkyCrystalDetectorData.proto";
import "WeatherWizardData.proto";
import "WidgetCoolDownData.proto";
import "WidgetSlotData.proto";

message AllWidgetDataNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4286;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 next_anchor_point_usable_time = 5;
  LunchBoxData lunch_box_data = 1;
  repeated OneoffGatherPointDetectorData oneoff_gather_point_detector_data_list = 14;
  repeated WidgetSlotData slot_list = 6;
  repeated uint32 background_active_widget_list = 9;
  repeated WidgetCoolDownData cool_down_group_data_list = 3;
  SkyCrystalDetectorData sky_crystal_detector_data = 4;
  repeated ClientCollectorData client_collector_data_list = 7;
  WeatherWizardData weather_wizard_data = 15;
  repeated WidgetCoolDownData normal_cool_down_data_list = 10;
  repeated AnchorPointData anchor_point_list = 13;
}

import "Vector.proto";

message AnchorPointData {
  uint32 scene_id = 3;
  Vector rot = 4;
  uint32 end_time = 8;
  Vector pos = 11;
  uint32 anchor_point_id = 9;
}

import "AnchorPointData.proto";

message AnchorPointDataNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4292;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 next_usable_time = 1;
  repeated AnchorPointData anchor_point_list = 11;
}


message AnchorPointOpReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4285;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  enum AnchorPointOpType {
    ANCHOR_POINT_OP_TYPE_NONE = 0;
    ANCHOR_POINT_OP_TYPE_TELEPORT = 1;
    ANCHOR_POINT_OP_TYPE_REMOVE = 2;
  }

  uint32 anchor_point_id = 4;
  uint32 anchor_point_op_type = 10;
}


message AnchorPointOpRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4277;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 anchor_point_id = 9;
  int32 retcode = 4;
  uint32 anchor_point_op_type = 12;
}

import "ForwardType.proto";

message AnimatorForceSetAirMoveNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 334;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  ForwardType forward_type = 12;
  bool in_air_move = 6;
  uint32 entity_id = 2;
}


message AnimatorParameterValueInfo {
  uint32 para_type = 1;
  oneof para_val {
    int32 int_val = 2;
    float float_val = 3;
    bool bool_val = 4;
  }
}

import "AnimatorParameterValueInfo.proto";

message AnimatorParameterValueInfoPair {
  int32 name_id = 1;
  AnimatorParameterValueInfo animator_para = 2;
}


message AnnounceData {
  uint32 begin_time = 10;
  bool is_center_system_last_5_every_minutes = 3;
  uint32 end_time = 1;
  uint32 config_id = 2;
  string center_system_text = 11;
  uint32 count_down_frequency = 5;
  uint32 center_system_frequency = 13;
  string dungeon_confirm_text = 4;
  string count_down_text = 6;
}


message AntiAddictNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 174;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  string level = 4;
  string msg = 7;
  int32 msg_type = 2;
}

import "AranaraCollectionSuite.proto";

message AranaraCollectionDataNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 6392;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated AranaraCollectionSuite collection_suite_list = 15;
}


enum AranaraCollectionState {
  ARANARA_COLLECTION_STATE_NONE = 0;
  ARANARA_COLLECTION_STATE_COLLECTABLE = 1;
  ARANARA_COLLECTION_STATE_COLLECTED = 2;
  ARANARA_COLLECTION_STATE_FINISHED = 3;
}

import "AranaraCollectionState.proto";

message AranaraCollectionSuite {
  map<uint32, AranaraCollectionState> collection_id_state_map = 5;
  uint32 collection_type = 12;
}

import "AreaPlayType.proto";

message AreaPlayInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3274;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 detail_play_type = 2;
  AreaPlayType area_play_type = 6;
}


enum AreaPlayType {
  AREA_PLAY_TYPE_NONE = 0;
  AREA_PLAY_TYPE_CLIMATE = 1;
  AREA_PLAY_TYPE_REGIONAL_PLAY = 2;
}

import "ArenaChallengeMonsterLevel.proto";

message ArenaChallengeActivityDetailInfo {
  repeated ArenaChallengeMonsterLevel level_list = 15;
  map<uint32, uint32> level_open_time_map = 1;
  bool is_finish_any_level = 4;
  uint32 world_level = 7;
}


message ArenaChallengeChildChallengeInfo {
  uint32 challenge_id = 11;
  uint32 challenge_index = 4;
  uint32 challenge_type = 12;
  bool is_settled = 2;
  bool is_success = 14;
}

import "ArenaChallengeChildChallengeInfo.proto";

message ArenaChallengeFinishNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2164;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  bool is_success = 8;
  uint32 Unk3300_FDFNFLAKONG = 3;
  repeated ArenaChallengeChildChallengeInfo child_challenge_list = 14;
  uint32 Unk3300_DBHAGHMMLAI = 10;
}


message ArenaChallengeMonsterLevel {
  uint32 Unk3300_DBHAGHMMLAI = 8;
  uint32 Unk3300_FDFNFLAKONG = 15;
}

import "FriendBrief.proto";

message AskAddFriendNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4089;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 target_uid = 5;
  FriendBrief target_friend_brief = 1;
}


message AskAddFriendReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4100;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 target_uid = 12;
}


message AskAddFriendRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4043;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  int32 retcode = 11;
  uint32 target_uid = 9;
  uint32 param = 12;
}


message AssociateInferenceWordReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 420;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 page_id = 6;
  uint32 Unk3300_EPMGHELECNH = 2;
  uint32 Unk3300_FDGLBLJOKOK = 4;
}


message AssociateInferenceWordRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 463;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 4;
  uint32 Unk3300_FDGLBLJOKOK = 8;
  uint32 Unk3300_EPMGHELECNH = 9;
  uint32 page_id = 6;
}

import "AsterLargeDetailInfo.proto";
import "AsterLittleDetailInfo.proto";
import "AsterMidDetailInfo.proto";
import "AsterProgressDetailInfo.proto";

message AsterActivityDetailInfo {
  uint32 content_close_time = 1;
  AsterLittleDetailInfo aster_little = 5;
  uint32 Unk3300_DCHBFEJNBHP = 13;
  AsterMidDetailInfo aster_mid = 12;
  bool is_special_reward_taken = 3;
  uint32 Unk3300_KFDGFFPJGJC = 4;
  AsterProgressDetailInfo aster_progress = 8;
  AsterLargeDetailInfo aster_large = 10;
  bool is_content_closed = 6;
}


message AsterLargeDetailInfo {
  uint32 begin_time = 6;
  bool is_open = 9;
}

import "AsterLargeDetailInfo.proto";

message AsterLargeInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2023;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  AsterLargeDetailInfo info = 6;
}

import "AsterLittleStageState.proto";

message AsterLittleDetailInfo {
  uint32 stage_begin_time = 9;
  bool is_open = 8;
  AsterLittleStageState stage_state = 5;
  uint32 stage_id = 14;
  uint32 begin_time = 6;
}

import "AsterLittleDetailInfo.proto";

message AsterLittleInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2121;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  AsterLittleDetailInfo info = 10;
}


enum AsterLittleStageState {
  ASTER_LITTLE_STAGE_STATE_NONE = 0;
  ASTER_LITTLE_STAGE_STATE_UNSTARTED = 1;
  ASTER_LITTLE_STAGE_STATE_STARTED = 2;
  ASTER_LITTLE_STAGE_STATE_FINISHED = 3;
}

import "Vector.proto";

message AsterMidCampInfo {
  Vector pos = 3;
  uint32 camp_id = 15;
}

import "AsterMidCampInfo.proto";

message AsterMidCampInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2195;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated AsterMidCampInfo camp_list = 11;
}

import "AsterMidCampInfo.proto";

message AsterMidDetailInfo {
  bool is_open = 13;
  repeated AsterMidCampInfo camp_list = 11;
  uint32 begin_time = 4;
  uint32 collect_count = 7;
}

import "AsterMidDetailInfo.proto";

message AsterMidInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2055;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  AsterMidDetailInfo info = 7;
}


message AsterMiscInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2140;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 Unk3300_DCHBFEJNBHP = 4;
  uint32 Unk3300_KFDGFFPJGJC = 5;
}


message AsterProgressDetailInfo {
  uint32 count = 4;
  uint32 last_auto_add_time = 1;
}

import "AsterProgressDetailInfo.proto";

message AsterProgressInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2091;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  AsterProgressDetailInfo info = 2;
}


message AttackHitEffectResult {
  float air_strength = 13;
  float hit_halt_time_scale = 10;
  float hit_halt_time = 9;
  uint32 hit_retreat_angle_compat = 8;
  uint32 hit_eff_level = 1;
  float retreat_strength = 3;
}

import "AbilityIdentifier.proto";
import "AttackHitEffectResult.proto";
import "HitCollision.proto";
import "Vector.proto";

message AttackResult {
  uint32 defense_id = 2;
  uint32 attacker_id = 1;
  uint32 target_type = 1870;
  float endure_delta = 803;
  bool Unk3300_DOMAOPGPHMD = 454;
  uint32 element_type = 12;
  uint32 Unk3300_BALCPHMFIBC = 1438;
  float damage = 10;
  uint32 hashed_anim_event_id = 1115;
  uint32 critical_rand = 645;
  uint32 Unk3300_ABJJNNNKGBB = 1742;
  uint32 Unk3300_KPKAECBFABP = 2012;
  AttackHitEffectResult hit_eff_result = 8;
  uint32 endure_break = 14;
  AbilityIdentifier ability_identifier = 7;
  uint32 hit_pos_type = 3;
  uint32 attack_timestamp_ms = 1782;
  float damage_shield = 1932;
  uint32 attack_count = 1484;
  bool is_resist_text = 633;
  int32 hit_retreat_angle_compat = 5;
  HitCollision hit_collision = 15;
  bool Unk3300_MGIMJGMIPLD = 732;
  bool is_crit = 6;
  Vector resolved_dir = 11;
  float element_amplify_rate = 28;
  string anim_event_id = 4;
  uint32 Unk3300_GBPJCELJKJA = 1844;
  uint32 Unk3300_JMJHGJCAOBH = 914;
  float element_durability_attenuation = 775;
}


message AttackResultCreateCount {
  repeated uint32 Unk3300_PFFFFJBPKGN = 8;
  repeated uint32 Unk3300_MDGFBFBAHPB = 10;
}


enum AuditState {
  AUDIT_STATE_NONE = 0;
  AUDIT_STATE_WAITING = 1;
  AUDIT_STATE_FAILED = 2;
}

import "EntityAuthorityInfo.proto";

message AuthorityChange {
  uint32 entity_id = 8;
  EntityAuthorityInfo entity_authority_info = 1;
  uint32 authority_peer_id = 2;
}

import "AvatarInfo.proto";

message AvatarAddNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1757;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  AvatarInfo avatar = 1;
  bool is_in_team = 15;
}


message AvatarBuffAddNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 394;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint64 avatar_guid = 11;
  uint32 buff_id = 7;
}


message AvatarBuffDelNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 372;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 buff_id = 8;
  uint64 avatar_guid = 5;
}


message AvatarCardChangeReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 694;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 count = 11;
  uint32 item_id = 4;
  uint64 avatar_guid = 14;
}


message AvatarCardChangeRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 672;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 3;
}


message AvatarChangeAnimHashReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1767;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 anim_hash = 11;
  uint64 avatar_guid = 12;
}


message AvatarChangeAnimHashRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1620;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 anim_hash = 3;
  int32 retcode = 1;
  uint64 avatar_guid = 8;
}

import "SceneEntityInfo.proto";

message AvatarChangeCostumeNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1665;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  SceneEntityInfo entity_info = 11;
}


message AvatarChangeCostumeReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1707;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint64 avatar_guid = 6;
  uint32 costume_id = 1;
}


message AvatarChangeCostumeRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1609;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 10;
  uint64 avatar_guid = 9;
  uint32 costume_id = 3;
}


message AvatarChangeElementTypeReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1779;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 area_id = 12;
  uint32 scene_id = 3;
}


message AvatarChangeElementTypeRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1717;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 9;
}

import "AvatarInfo.proto";
import "AvatarRenameInfo.proto";
import "AvatarTeam.proto";

message AvatarDataNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1607;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated AvatarInfo avatar_list = 14;
  repeated AvatarRenameInfo avatar_rename_list = 8;
  uint32 cur_avatar_team_id = 7;
  repeated uint32 owned_flycloak_list = 6;
  repeated uint64 temp_avatar_guid_list = 15;
  uint64 choose_avatar_guid = 1;
  map<uint32, AvatarTeam> avatar_team_map = 11;
  repeated uint32 owned_costume_list = 5;
  repeated uint32 backup_avatar_team_order_list = 3;
}


message AvatarDelNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1769;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint64 avatar_guid_list = 6;
}

import "Vector.proto";

message AvatarDieAnimationEndReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1695;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint64 die_guid = 13;
  Vector reborn_pos = 14;
  uint32 skill_id = 9;
}


message AvatarDieAnimationEndRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1604;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 12;
  uint32 skill_id = 10;
  uint64 die_guid = 7;
}


message AvatarEnterElementViewNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 380;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  bool is_triggered = 6;
  uint32 avatar_entity_id = 15;
}

import "AbilitySyncStateInfo.proto";
import "ServerBuff.proto";

message AvatarEnterSceneInfo {
  uint32 weapon_entity_id = 5;
  uint64 avatar_guid = 9;
  uint32 avatar_entity_id = 13;
  repeated ServerBuff server_buff_list = 7;
  AbilitySyncStateInfo weapon_ability_info = 6;
  repeated uint32 buff_id_list = 8;
  AbilitySyncStateInfo avatar_ability_info = 1;
  uint64 weapon_guid = 15;
}


message AvatarEquipAffixInfo {
  uint32 equip_affix_id = 1;
  uint32 left_cd_time = 2;
}

import "AvatarEquipAffixInfo.proto";

message AvatarEquipAffixStartNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1708;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint64 avatar_guid = 1;
  AvatarEquipAffixInfo equip_affix_info = 9;
}

import "SceneReliquaryInfo.proto";
import "SceneWeaponInfo.proto";

message AvatarEquipChangeNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 676;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint64 avatar_guid = 7;
  uint32 equip_type = 10;
  uint64 equip_guid = 5;
  uint32 item_id = 3;
  SceneReliquaryInfo reliquary = 4;
  SceneWeaponInfo weapon = 15;
}


message AvatarExcelInfo {
  uint64 prefab_path_hash = 1;
  uint64 prefab_path_remote_hash = 2;
  uint64 controller_path_hash = 3;
  uint64 controller_path_remote_hash = 4;
  uint64 combat_config_hash = 5;
}


message AvatarExpeditionAllDataReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1685;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}

import "AvatarExpeditionInfo.proto";

message AvatarExpeditionAllDataRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1621;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 15;
  repeated uint32 open_expedition_list = 4;
  map<uint64, AvatarExpeditionInfo> expedition_info_map = 1;
  uint32 expedition_count_limit = 13;
}


message AvatarExpeditionCallBackReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1777;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated uint64 avatar_guid = 14;
}

import "AvatarExpeditionInfo.proto";

message AvatarExpeditionCallBackRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1702;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 2;
  map<uint64, AvatarExpeditionInfo> expedition_info_map = 7;
}

import "AvatarExpeditionInfo.proto";

message AvatarExpeditionDataNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1632;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  map<uint64, AvatarExpeditionInfo> expedition_info_map = 15;
}


message AvatarExpeditionGetRewardReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1640;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint64 avatar_guid = 2;
}

import "AvatarExpeditionInfo.proto";
import "ItemParam.proto";

message AvatarExpeditionGetRewardRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1715;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated ItemParam item_list = 7;
  repeated ItemParam extra_item_list = 11;
  map<uint64, AvatarExpeditionInfo> expedition_info_map = 13;
  int32 retcode = 8;
}

import "AvatarExpeditionState.proto";

message AvatarExpeditionInfo {
  AvatarExpeditionState state = 1;
  uint32 exp_id = 2;
  uint32 hour_time = 3;
  uint32 start_time = 4;
  float shorten_ratio = 5;
}


message AvatarExpeditionStartReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1697;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 hour_time = 7;
  uint64 avatar_guid = 3;
  uint32 exp_id = 2;
}

import "AvatarExpeditionInfo.proto";

message AvatarExpeditionStartRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1646;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 4;
  map<uint64, AvatarExpeditionInfo> expedition_info_map = 8;
}


enum AvatarExpeditionState {
  AVATAR_EXPEDITION_STATE_NONE = 0;
  AVATAR_EXPEDITION_STATE_DOING = 1;
  AVATAR_EXPEDITION_STATE_FINISH_WAIT_REWARD = 2;
  AVATAR_EXPEDITION_STATE_CALLBACK_WAIT_REWARD = 3;
  AVATAR_EXPEDITION_STATE_LOCKED = 4;
}

import "AvatarFetterInfo.proto";

message AvatarFetterDataNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1617;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  map<uint64, AvatarFetterInfo> fetter_info_map = 2;
}

import "FetterData.proto";

message AvatarFetterInfo {
  uint32 exp_number = 1;
  uint32 exp_level = 2;
  repeated uint32 open_id_list = 3;
  repeated uint32 finish_id_list = 4;
  repeated uint32 rewarded_fetter_level_list = 5;
  repeated FetterData fetter_list = 6;
}


message AvatarFetterLevelRewardReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1642;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint64 avatar_guid = 2;
  uint32 fetter_level = 5;
}


message AvatarFetterLevelRewardRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1753;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 2;
  uint32 reward_id = 15;
  uint32 fetter_level = 1;
  uint64 avatar_guid = 6;
}


message AvatarFightPropNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1300;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint64 avatar_guid = 13;
  map<uint32, float> fight_prop_map = 5;
}


message AvatarFightPropUpdateNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1243;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint64 avatar_guid = 13;
  map<uint32, float> fight_prop_map = 10;
}


message AvatarFlycloakChangeNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1790;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 flycloak_id = 1;
  uint64 avatar_guid = 13;
}

import "Route.proto";

message AvatarFollowRouteNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3256;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  string client_params = 5;
  Route route = 1;
  uint32 entity_id = 10;
  uint32 template_id = 4;
  uint32 start_scene_time_ms = 3;
}


message AvatarGainCostumeNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1625;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 costume_id = 10;
}


message AvatarGainFlycloakNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1676;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 flycloak_id = 4;
}

import "AvatarEquipAffixInfo.proto";
import "AvatarExcelInfo.proto";
import "AvatarExpeditionState.proto";
import "AvatarFetterInfo.proto";
import "AvatarSkillInfo.proto";
import "PropValue.proto";
import "TrialAvatarInfo.proto";

message AvatarInfo {
  uint32 avatar_id = 1;
  uint64 guid = 2;
  map<uint32, PropValue> prop_map = 3;
  uint32 life_state = 4;
  repeated uint64 equip_guid_list = 5;
  repeated uint32 talent_id_list = 6;
  map<uint32, float> fight_prop_map = 7;
  TrialAvatarInfo trial_avatar_info = 9;
  map<uint32, AvatarSkillInfo> skill_map = 10;
  uint32 skill_depot_id = 11;
  AvatarFetterInfo fetter_info = 12;
  uint32 core_proud_skill_level = 13;
  repeated uint32 inherent_proud_skill_list = 14;
  map<uint32, uint32> skill_level_map = 15;
  AvatarExpeditionState expedition_state = 16;
  map<uint32, uint32> proud_skill_extra_level_map = 17;
  bool is_focus = 18;
  uint32 avatar_type = 19;
  repeated uint32 team_resonance_list = 20;
  uint32 wearing_flycloak_id = 21;
  repeated AvatarEquipAffixInfo equip_affix_list = 22;
  uint32 born_time = 23;
  repeated uint32 pending_promote_reward_list = 24;
  uint32 costume_id = 25;
  AvatarExcelInfo excel_info = 26;
  uint32 anim_hash = 27;
}

import "PlayerDieType.proto";
import "ServerBuff.proto";

message AvatarLifeStateChangeNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1247;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 source_entity_id = 11;
  repeated ServerBuff server_buff_list = 14;
  uint32 move_reliable_seq = 12;
  uint32 life_state = 6;
  PlayerDieType die_type = 5;
  string attack_tag = 15;
  uint64 avatar_guid = 2;
}


message AvatarPromoteGetRewardReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1684;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint64 avatar_guid = 4;
  uint32 promote_level = 5;
}


message AvatarPromoteGetRewardRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1658;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 promote_level = 9;
  uint64 avatar_guid = 5;
  int32 retcode = 8;
  uint32 reward_id = 12;
}


message AvatarPromoteReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1731;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint64 guid = 1;
}


message AvatarPromoteRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1710;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint64 guid = 11;
  int32 retcode = 13;
}

import "PropChangeReason.proto";

message AvatarPropChangeReasonNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1278;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 prop_type = 7;
  PropChangeReason reason = 15;
  float cur_value = 14;
  uint64 avatar_guid = 3;
  float old_value = 13;
}


message AvatarPropNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1227;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint64 avatar_guid = 1;
  map<uint32, int64> prop_map = 8;
}


message AvatarRenameAuditContent {
  string type = 1;
  string content = 2;
  uint32 auto_fail_time = 3;
}

import "AvatarRenameContentAuditField.proto";
import "ContentAuditAuxiliaryField.proto";

message AvatarRenameAuditData {
  string aid = 1;
  string entity_id = 2;
  string lang = 3;
  string queue_key = 4;
  string region = 5;
  uint32 uid = 6;
  repeated AvatarRenameContentAuditField audit_field_list = 7;
  repeated ContentAuditAuxiliaryField aux_field_list = 8;
}

import "AvatarRenameAuditContent.proto";

message AvatarRenameContentAuditField {
  repeated AvatarRenameAuditContent segment_list = 1;
  string name = 2;
}


message AvatarRenameInfo {
  string avatar_name = 3;
  uint32 avatar_id = 7;
}

import "AvatarRenameInfo.proto";

message AvatarRenameInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1797;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated AvatarRenameInfo avatar_rename_list = 11;
}


message AvatarSatiationData {
  uint64 avatar_guid = 15;
  float penalty_finish_time = 6;
  float finish_time = 7;
}

import "AvatarSatiationData.proto";

message AvatarSatiationDataNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1766;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated AvatarSatiationData satiation_data_list = 13;
}


message AvatarSkillChangeNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1099;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint64 avatar_guid = 4;
  uint32 old_level = 7;
  uint32 cur_level = 15;
  uint32 skill_depot_id = 6;
  uint32 entity_id = 1;
  uint32 avatar_skill_id = 11;
}


message AvatarSkillDepotChangeNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1019;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  map<uint32, uint32> proud_skill_extra_level_map = 9;
  repeated uint32 proud_skill_list = 3;
  uint32 entity_id = 5;
  uint64 avatar_guid = 7;
  map<uint32, uint32> skill_level_map = 1;
  uint32 skill_depot_id = 13;
  repeated uint32 talent_id_list = 14;
  uint32 core_proud_skill_level = 15;
}


message AvatarSkillInfo {
  uint32 pass_cd_time = 1;
  repeated uint32 full_cd_time_list = 2;
  uint32 max_charge_count = 3;
}

import "AvatarSkillInfo.proto";

message AvatarSkillInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1047;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  map<uint32, AvatarSkillInfo> skill_map = 6;
  uint64 guid = 4;
}


message AvatarSkillMaxChargeCountNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1061;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint64 avatar_guid = 4;
  uint32 max_charge_count = 9;
  uint32 skill_id = 6;
}


message AvatarSkillUpgradeReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1039;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint64 avatar_guid = 5;
  uint32 avatar_skill_id = 12;
  uint32 old_level = 8;
}


message AvatarSkillUpgradeRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1048;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 cur_level = 6;
  uint32 avatar_skill_id = 13;
  int32 retcode = 15;
  uint32 old_level = 1;
  uint64 avatar_guid = 5;
}


message AvatarTeam {
  repeated uint64 avatar_guid_list = 13;
  string team_name = 4;
}

import "AvatarTeam.proto";

message AvatarTeamAllDataNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1615;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint64 temp_avatar_guid_list = 2;
  repeated uint32 backup_avatar_team_order_list = 10;
  map<uint32, AvatarTeam> avatar_team_map = 5;
}


message AvatarTeamResonanceInfo {
  uint64 avatar_guid = 9;
  uint32 entity_id = 8;
  repeated uint32 add_team_resonance_id_list = 15;
  repeated uint32 del_team_resonance_id_list = 13;
}

import "AvatarTeam.proto";

message AvatarTeamUpdateNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1739;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  map<uint32, AvatarTeam> avatar_team_map = 15;
  repeated uint64 temp_avatar_guid_list = 10;
}


enum AvatarType {
  AVATAR_TYPE_NONE = 0;
  AVATAR_TYPE_FORMAL = 1;
  AVATAR_TYPE_TRIAL = 2;
  AVATAR_TYPE_MIRROR = 3;
}


message AvatarUnlockTalentNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1056;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 skill_depot_id = 9;
  uint64 avatar_guid = 3;
  uint32 entity_id = 10;
  uint32 talent_id = 8;
}


message AvatarUpgradeReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1653;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 item_id = 12;
  uint32 count = 7;
  uint64 avatar_guid = 1;
}


message AvatarUpgradeRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1792;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 8;
  uint64 avatar_guid = 14;
  uint32 cur_level = 9;
  map<uint32, float> cur_fight_prop_map = 13;
  map<uint32, float> old_fight_prop_map = 6;
  uint32 old_level = 12;
}


message AvatarWearFlycloakReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1636;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint64 avatar_guid = 11;
  uint32 flycloak_id = 15;
}


message AvatarWearFlycloakRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1613;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 12;
  uint64 avatar_guid = 14;
  uint32 flycloak_id = 1;
}


message BackMyWorldReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 269;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}


message BackMyWorldRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 218;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 6;
}


message BackPlayCustomDungeonOfficialReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 6224;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 room_id = 6;
}


message BackPlayCustomDungeonOfficialRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 6220;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 1;
}


message BackRebornGalleryReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5507;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 gallery_id = 14;
}


message BackRebornGalleryRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5517;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 gallery_id = 10;
  int32 retcode = 11;
}

import "GalleryStopReason.proto";

message BalloonGallerySettleInfo {
  uint32 score = 12;
  uint32 owner_uid = 2;
  GalleryStopReason reason = 7;
  uint32 hit_count = 13;
}


message BalloonPlayerInfo {
  uint32 cur_score = 9;
  uint32 combo = 11;
  uint32 uid = 8;
  uint32 combo_disable_time = 7;
}

import "OnlinePlayerInfo.proto";

message BalloonSettleInfo {
  OnlinePlayerInfo player_info = 8;
  uint32 uid = 13;
  uint32 final_score = 2;
  uint32 max_combo = 7;
  uint32 shoot_count = 14;
}


message BargainOfferPriceReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 407;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 bargain_id = 5;
  uint32 price = 3;
}

import "BargainResultType.proto";

message BargainOfferPriceRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 417;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 result_param = 12;
  BargainResultType bargain_result = 10;
  int32 retcode = 1;
  int32 cur_mood = 7;
}


enum BargainResultType {
  BARGAIN_RESULT_TYPE_COMPLETE_SUCC = 0;
  BARGAIN_RESULT_TYPE_SINGLE_FAIL = 1;
  BARGAIN_RESULT_TYPE_COMPLETE_FAIL = 2;
}


message BargainSnapshot {
  uint32 Unk3300_KOCJELACJLM = 11;
  uint32 Unk3300_MHFDEBOBFNE = 14;
  uint32 bargain_id = 3;
  int32 cur_mood = 8;
}

import "BargainSnapshot.proto";

message BargainStartNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 444;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 bargain_id = 11;
  BargainSnapshot snapshot = 10;
}


message BargainTerminateNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 405;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 bargain_id = 7;
}

import "BartenderLevelInfo.proto";
import "BartenderTaskInfo.proto";

message BartenderActivityDetailInfo {
  bool is_content_closed = 15;
  repeated BartenderLevelInfo unlock_level_list = 10;
  repeated uint32 unlock_item_list = 3;
  repeated uint32 unlock_formula_list = 6;
  repeated BartenderTaskInfo unlock_task_list = 5;
  bool is_develop_module_open = 9;
}


message BartenderCancelLevelReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8446;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 level_id = 14;
}


message BartenderCancelLevelRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8698;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 8;
  uint32 level_id = 7;
}


message BartenderCancelOrderReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8249;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 quest_id = 5;
}


message BartenderCancelOrderRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8254;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 quest_id = 11;
  int32 retcode = 2;
}

import "ItemParam.proto";

message BartenderCompleteOrderReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8880;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 quest_id = 14;
  repeated uint32 optional_order_list = 15;
  uint32 Unk3300_NKMHHHHGHIF = 6;
  uint32 Unk3300_LONHKJFDOND = 5;
  uint32 Unk3300_POEGPFJLNGB = 11;
  bool is_view_formula = 8;
  repeated ItemParam item_list = 12;
}


message BartenderCompleteOrderRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8870;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 formula_id = 9;
  uint32 quest_id = 7;
  uint32 finish_order_id = 6;
  int32 retcode = 10;
  bool is_new = 8;
  repeated uint32 affix_list = 1;
}


message BartenderFinishLevelReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8122;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 level_id = 4;
}


message BartenderFinishLevelRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8250;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 level_id = 1;
  int32 retcode = 2;
}

import "ItemParam.proto";

message BartenderGetFormulaReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8230;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated ItemParam item_list = 1;
  uint32 quest_id = 4;
}


message BartenderGetFormulaRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8975;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 formula_id = 15;
  repeated uint32 affix_list = 1;
  int32 retcode = 7;
  bool is_new = 10;
}


message BartenderLevelInfo {
  uint32 id = 12;
  bool is_finish = 3;
  uint32 max_score = 2;
}


message BartenderLevelProgressNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8415;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  bool is_finish = 8;
  bool is_new_record = 6;
  uint32 level_id = 12;
  uint32 score = 3;
}


message BartenderStartLevelReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8590;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 level_id = 7;
}


message BartenderStartLevelRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8142;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 level_id = 8;
  repeated uint32 order_list = 12;
  int32 retcode = 11;
  uint32 time = 14;
}


message BartenderTaskInfo {
  uint32 id = 5;
  bool is_finish = 3;
}

import "BuyGoodsParam.proto";

message BatchBuyGoodsReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 778;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 shop_type = 15;
  repeated BuyGoodsParam buy_goods_list = 12;
}

import "BuyGoodsParam.proto";
import "ShopGoods.proto";

message BatchBuyGoodsRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 757;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 shop_type = 6;
  repeated ShopGoods goods_list = 15;
  int32 retcode = 13;
  repeated BuyGoodsParam buy_goods_list = 8;
}

import "BattlePassMission.proto";
import "BattlePassSchedule.proto";

message BattlePassAllDataNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2642;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated BattlePassMission mission_list = 1;
  BattlePassSchedule cur_schedule = 10;
  bool have_cur_schedule = 3;
}

import "ItemParam.proto";

message BattlePassBuySuccNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2602;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 Unk3300_PJODFJKAFLG = 4;
  uint32 Unk3300_IJOIKKDNKDE = 9;
  uint32 schedule_id = 11;
  repeated ItemParam item_list = 10;
}

import "BattlePassSchedule.proto";

message BattlePassCurScheduleUpdateNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2635;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  BattlePassSchedule cur_schedule = 2;
  bool have_cur_schedule = 12;
}


message BattlePassCycle {
  uint32 end_time = 5;
  uint32 begin_time = 13;
  uint32 cycle_idx = 15;
}


message BattlePassMission {
  enum MissionStatus {
    MISSION_STATUS_INVALID = 0;
    MISSION_STATUS_UNFINISHED = 1;
    MISSION_STATUS_FINISHED = 2;
    MISSION_STATUS_POINT_TAKEN = 3;
  }

  uint32 cur_progress = 10;
  uint32 mission_type = 9;
  uint32 reward_battle_pass_point = 14;
  uint32 total_progress = 12;
  uint32 mission_id = 15;
  MissionStatus mission_status = 11;
}


message BattlePassMissionDelNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2622;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint32 del_mission_id_list = 15;
}

import "BattlePassMission.proto";

message BattlePassMissionUpdateNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2641;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated BattlePassMission mission_list = 1;
}


message BattlePassProduct {
  string extra_product_id = 12;
  string normal_product_id = 9;
  string upgrade_product_id = 7;
}

import "BattlePassUnlockStatus.proto";

message BattlePassRewardTag {
  BattlePassUnlockStatus unlock_status = 11;
  uint32 reward_id = 4;
  uint32 level = 1;
}

import "BattlePassRewardTag.proto";

message BattlePassRewardTakeOption {
  uint32 option_idx = 5;
  BattlePassRewardTag tag = 15;
}

import "BattlePassCycle.proto";
import "BattlePassProduct.proto";
import "BattlePassRewardTag.proto";
import "BattlePassUnlockStatus.proto";

message BattlePassSchedule {
  uint32 schedule_id = 5;
  uint32 point = 2;
  uint32 level = 7;
  bool is_extra_paid_reward_taken = 8;
  uint32 cur_cycle_points = 14;
  bool is_viewed = 12;
  uint32 paid_platform_flags = 4;
  BattlePassCycle cur_cycle = 11;
  uint32 begin_time = 1;
  BattlePassUnlockStatus unlock_status = 15;
  BattlePassProduct product_info = 10;
  uint32 end_time = 13;
  repeated BattlePassRewardTag reward_taken_list = 3;
}


enum BattlePassUnlockStatus {
  BATTLE_PASS_UNLOCK_STATUS_INVALID = 0;
  BATTLE_PASS_UNLOCK_STATUS_FREE = 1;
  BATTLE_PASS_UNLOCK_STATUS_PAID = 2;
}

import "Vector.proto";

message BeginCameraSceneLookNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 249;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  enum KeepRotType {
    KEEP_ROT_TYPE_X = 0;
    KEEP_ROT_TYPE_XY = 1;
  }

  float Unk3300_HKKCHCEMJIE = 1716;
  bool Unk3300_DFPCMOFONNK = 15;
  bool Unk3300_EELNOAICHOJ = 4;
  bool Unk3300_ODADMBBFPAP = 7;
  float duration = 2;
  uint32 Unk3300_KCHKKBODNCJ = 1746;
  float Unk3300_FIOLGCIKFLH = 10;
  repeated string other_params = 9;
  bool Unk3300_NJLBIMJDFHJ = 3;
  bool Unk3300_AAOGBCCNJAF = 1224;
  uint32 entity_id = 1403;
  KeepRotType keep_rot_type = 11;
  Vector Unk3300_PPCIDICMIEN = 8;
  uint32 Unk3300_AJEENEOCFON = 965;
  bool Unk3300_ONBDMCHFPDL = 5;
  bool Unk3300_PIEFLAEGGBI = 6;
  Vector Unk3300_FJDFGLNLMBN = 13;
  bool Unk3300_ILMHDLHLKGJ = 1;
  float Unk3300_HCLPGGAOIAC = 12;
  float Unk3300_HFPCHFNFJKP = 14;
}

import "Vector.proto";

message BeginCameraSceneLookWithTemplateNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3342;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  enum FollowType {
    FOLLOW_TYPE_INIT_FOLLOW_POS = 0;
    FOLLOW_TYPE_SET_FOLLOW_POS = 1;
    FOLLOW_TYPE_SET_ABS_FOLLOW_POS = 2;
  }

  FollowType follow_type = 5;
  uint32 entity_id = 7;
  Vector Unk3300_FJDFGLNLMBN = 1;
  uint32 template_id = 13;
  repeated string other_params = 12;
  Vector Unk3300_PPCIDICMIEN = 10;
}


message BigTalentPointConvertReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1100;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated uint64 item_guid_list = 14;
  uint64 avatar_guid = 7;
}


message BigTalentPointConvertRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1043;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 13;
  uint64 avatar_guid = 11;
}


message Birthday {
  uint32 month = 1;
  uint32 day = 2;
}


message BlessingAcceptAllGivePicReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2009;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}


message BlessingAcceptAllGivePicRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2065;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint32 accept_index_list = 11;
  int32 retcode = 4;
  map<uint32, uint32> accept_pic_num_map = 15;
}


message BlessingAcceptGivePicReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2153;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 uid = 3;
  uint32 index = 9;
}


message BlessingAcceptGivePicRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2010;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 index = 15;
  uint32 pic_id = 12;
  uint32 uid = 4;
  int32 retcode = 8;
}


message BlessingActivityDetailInfo {
  uint32 cur_day_scan_num = 10;
  uint32 content_close_time = 8;
  uint32 Unk3300_JLADHEKJPBP = 1;
  uint32 next_refresh_time = 6;
  bool is_activated = 5;
  uint32 Unk3300_INOHLELBOAM = 7;
  bool is_content_closed = 2;
  map<uint32, uint32> pic_num_map = 11;
}

import "ProfilePicture.proto";

message BlessingFriendPicData {
  string remark_name = 8;
  uint32 avatar_id = 4;
  string signature = 13;
  map<uint32, uint32> pic_num_map = 5;
  uint32 uid = 15;
  string nickname = 9;
  ProfilePicture profile_picture = 7;
}


message BlessingGetAllRecvPicRecordListReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2084;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}

import "BlessingRecvPicRecord.proto";

message BlessingGetAllRecvPicRecordListRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2058;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 4;
  repeated BlessingRecvPicRecord recv_pic_record_list = 6;
}


message BlessingGetFriendPicListReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2190;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}

import "BlessingFriendPicData.proto";

message BlessingGetFriendPicListRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2076;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 11;
  repeated BlessingFriendPicData friend_pic_data_list = 8;
}


message BlessingGiveFriendPicReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2108;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 pic_id = 11;
  uint32 uid = 10;
}


message BlessingGiveFriendPicRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2042;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 14;
  uint32 pic_id = 6;
  uint32 uid = 9;
}


message BlessingRecvFriendPicNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2107;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 pic_id = 4;
  uint32 uid = 14;
}

import "ProfilePicture.proto";

message BlessingRecvPicRecord {
  bool is_recv = 2;
  string nickname = 5;
  uint32 avatar_id = 6;
  ProfilePicture profile_picture = 9;
  string signature = 10;
  string remark_name = 8;
  uint32 uid = 3;
  uint32 pic_id = 12;
  uint32 index = 11;
}


message BlessingRedeemRewardReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2036;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}


message BlessingRedeemRewardRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2013;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  map<uint32, uint32> pic_num_map = 10;
  int32 retcode = 11;
}


message BlessingScanReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2186;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 entity_id = 12;
}


message BlessingScanRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2166;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 13;
  uint32 cur_day_scan_num = 11;
  uint32 scan_pic_id = 12;
}

import "BlitzRushStage.proto";
import "ParkourLevelInfo.proto";

message BlitzRushActivityDetailInfo {
  bool is_content_closed = 1;
  uint32 content_close_time = 8;
  repeated ParkourLevelInfo parkour_level_info_list = 4;
  repeated BlitzRushStage stage_list = 6;
}


message BlitzRushParkourRestartReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8986;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 schedule_id = 14;
  uint32 group_id = 2;
}


message BlitzRushParkourRestartRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8453;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 schedule_id = 3;
  uint32 group_id = 8;
  int32 retcode = 6;
}


message BlitzRushStage {
  bool is_open = 8;
  uint32 open_time = 12;
}


message BlockInfo {
  uint32 block_id = 1;
  uint32 data_version = 2;
  bytes bin_data = 3;
  bool is_dirty = 4;
}

import "Vector.proto";

message BlossomBriefInfo {
  Vector pos = 7;
  bool is_guide_opened = 15;
  uint32 reward_id = 3;
  uint32 resin = 5;
  uint32 city_id = 8;
  uint32 circle_camp_id = 10;
  uint32 state = 11;
  uint32 monster_level = 1;
  uint32 scene_id = 4;
  uint32 refresh_id = 14;
}

import "BlossomBriefInfo.proto";

message BlossomBriefInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2756;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated BlossomBriefInfo brief_info_list = 8;
}


message BlossomChestCreateNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2743;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 refresh_id = 7;
  uint32 circle_camp_id = 15;
}


message BlossomChestInfo {
  uint32 resin = 1;
  repeated uint32 qualify_uid_list = 2;
  repeated uint32 remain_uid_list = 3;
  uint32 dead_time = 4;
  uint32 blossom_refresh_type = 5;
  uint32 refresh_id = 6;
}

import "BlossomChestInfo.proto";

message BlossomChestInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 847;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  BlossomChestInfo blossom_chest_info = 13;
  uint32 entity_id = 10;
}


message BlossomScheduleInfo {
  uint32 progress = 1;
  uint32 state = 5;
  uint32 finish_progress = 10;
  uint32 refresh_id = 12;
  uint32 circle_camp_id = 2;
  uint32 round = 14;
}


message BonusActivityInfo {
  uint32 bonus_activity_id = 14;
  uint32 state = 8;
}


message BonusActivityInfoReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2548;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}

import "BonusActivityInfo.proto";

message BonusActivityInfoRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2599;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 6;
  repeated BonusActivityInfo bonus_activity_info_list = 15;
}

import "BonusActivityInfo.proto";

message BonusActivityUpdateNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2539;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated BonusActivityInfo bonus_activity_info_list = 7;
}


message BonusOpActivityInfo {
  uint32 left_bonus_count = 8;
}


message BossChestActivateNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 861;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 entity_id = 15;
  repeated uint32 qualify_uid_list = 7;
}

import "WeeklyBossResinDiscountInfo.proto";

message BossChestInfo {
  uint32 monster_config_id = 1;
  uint32 resin = 2;
  repeated uint32 remain_uid_list = 3;
  repeated uint32 qualify_uid_list = 4;
  map<uint32, WeeklyBossResinDiscountInfo> uid_discount_map = 5;
}

import "BounceConjuringChapterInfo.proto";

message BounceConjuringActivityDetailInfo {
  bool is_content_closed = 8;
  repeated BounceConjuringChapterInfo chapter_info_list = 15;
  uint32 content_close_time = 2;
}


message BounceConjuringChapterInfo {
  uint32 best_score = 3;
  uint32 open_time = 2;
  uint32 chapter_id = 11;
}

import "ExhibitionDisplayInfo.proto";
import "OnlinePlayerInfo.proto";

message BounceConjuringGallerySettleInfo {
  uint32 Unk3300_PELHBJDMKAE = 6;
  uint32 score = 15;
  map<uint32, uint32> gadget_count_map = 3;
  uint32 Unk3300_CNGOBOFDEOE = 11;
  uint32 Unk3300_NKGFKLGDFAC = 1;
  OnlinePlayerInfo player_info = 2;
  float damage = 12;
  uint32 Unk3300_BJHCDKNFDFN = 7;
  repeated ExhibitionDisplayInfo card_list = 9;
}

import "BounceConjuringGallerySettleInfo.proto";

message BounceConjuringSettleNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8653;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  bool is_new_record = 4;
  uint32 total_score = 11;
  map<uint32, BounceConjuringGallerySettleInfo> settle_info_map = 10;
  uint32 chapter_id = 7;
}

import "BreakoutVector2.proto";

message BreakoutAction {
  enum BreakoutActionType {
    BREAKOUT_ACTION_TYPE_NONE = 0;
    BREAKOUT_ACTION_TYPE_LAUNCH_BALL = 1;
    BREAKOUT_ACTION_TYPE_DESTROY_BALL = 2;
    BREAKOUT_ACTION_TYPE_FALLING_OBJECT = 3;
    BREAKOUT_ACTION_TYPE_MISSILE = 4;
  }

  BreakoutActionType action_type = 1;
  uint64 client_game_time = 2;
  uint64 server_game_time = 3;
  bool is_failed = 4;
  uint32 pre_index = 5;
  uint32 new_index = 6;
  BreakoutVector2 pos = 7;
  BreakoutVector2 move_dir = 8;
  int32 speed = 9;
  uint32 peer_id = 10;
  uint32 element_type = 11;
  uint32 element_reaction_buff = 12;
  uint32 speed_increase_count = 13;
  bool has_extra_ball = 14;
  BreakoutVector2 extra_ball_dir = 15;
  uint32 extra_ball_index = 16;
  int32 offset = 17;
  uint64 Unk3300_AIEBGJHBOHL = 18;
}


message BreakoutBrickInfo {
  uint32 hp = 1;
  uint32 element_type = 2;
}


message BreakoutElementReactionCounter {
  uint32 element_reaction = 1;
  uint32 count = 2;
}

import "BreakoutBrickInfo.proto";
import "BreakoutPhysicalObjectModifier.proto";
import "BreakoutVector2.proto";

message BreakoutPhysicalObject {
  uint32 id = 1;
  uint32 index = 2;
  bool is_active = 3;
  BreakoutVector2 pos = 4;
  BreakoutVector2 move_dir = 5;
  int32 speed = 6;
  uint32 init_peer_id = 7;
  uint32 state = 8;
  uint32 element_type = 9;
  uint32 element_reaction_buff = 10;
  repeated BreakoutPhysicalObjectModifier modifier_list = 11;
  int32 total_rotation = 12;
  repeated BreakoutBrickInfo info_list = 13;
  uint32 last_hit_peer_id = 14;
  uint32 speed_increase_count = 15;
  int32 offset = 16;
}


message BreakoutPhysicalObjectModifier {
  uint32 type = 1;
  uint32 id = 2;
  int32 param1 = 3;
  int32 param2 = 4;
  int32 param3 = 5;
  int32 param4 = 6;
  int32 param5 = 7;
  int32 param6 = 8;
  bool bool1 = 9;
  int32 duration = 10;
  int32 end_time = 11;
  uint32 combo = 12;
  uint32 peer_id = 13;
  uint32 skill_type = 14;
  uint32 level = 15;
  uint32 choose_player_count = 16;
}

import "BreakoutAction.proto";
import "BreakoutElementReactionCounter.proto";
import "BreakoutPhysicalObject.proto";
import "BreakoutSpawnPoint.proto";
import "BreakoutSyncConnectUidInfo.proto";

message BreakoutSnapShot {
  uint64 client_game_time = 1;
  uint64 server_game_time = 2;
  repeated BreakoutPhysicalObject ball_list = 3;
  repeated BreakoutPhysicalObject physical_object_list = 4;
  repeated BreakoutAction action_list = 5;
  uint32 wave_index = 6;
  bool is_finish = 7;
  uint32 score = 8;
  uint32 combo = 9;
  uint32 max_combo = 10;
  uint32 life_count = 11;
  uint32 wave_suite_index = 12;
  repeated BreakoutSpawnPoint spawn_point_list = 13;
  uint32 remaining_boss_hp = 14;
  repeated BreakoutElementReactionCounter brick_element_reaction_list = 15;
  repeated BreakoutElementReactionCounter ball_element_reaction_list = 16;
  repeated BreakoutSyncConnectUidInfo uid_info_list = 17;
  repeated BreakoutPhysicalObject dynamic_object_list = 18;
  repeated uint32 id_index_list = 19;
  int32 raw_client_game_time = 20;
}

import "BreakoutPhysicalObject.proto";

message BreakoutSpawnPoint {
  uint32 id = 1;
  uint32 brick_suite_id = 2;
  repeated BreakoutPhysicalObject spawned_brick_list = 3;
}

import "BreakoutAction.proto";

message BreakoutSyncAction {
  BreakoutAction action = 15;
}


message BreakoutSyncConnectUidInfo {
  uint32 uid = 1;
  repeated uint32 skill_id_list = 2;
  repeated uint32 skill_level_list = 3;
}

import "BreakoutSyncConnectUidInfo.proto";

message BreakoutSyncCreateConnect {
  repeated BreakoutSyncConnectUidInfo uid_info_list = 1;
}


message BreakoutSyncFinishGame {
  uint64 server_game_time = 8;
  bool is_win = 1;
  bool is_stop_gallery = 2;
}


message BreakoutSyncPing {
  uint64 client_game_time = 8;
  uint64 server_game_time = 5;
}

import "BreakoutSnapShot.proto";

message BreakoutSyncSnapShot {
  BreakoutSnapShot snap_shot = 14;
}


message BreakoutVector2 {
  int32 x = 1;
  int32 y = 2;
}


message BrickBreakerActivityStageInfo {
  uint32 stage_id = 3;
  bool Unk3300_ALOGIKNHEIM = 2;
  bool Unk3300_FFKIEDNGNGK = 10;
}

import "BrickBreakerActivityStageInfo.proto";
import "BrickBreakerLevelInfo.proto";

message BrickBreakerDetailInfo {
  repeated BrickBreakerActivityStageInfo stage_info_list = 13;
  repeated BrickBreakerLevelInfo Unk3300_AIEGOACOINO = 9;
  repeated BrickBreakerLevelInfo Unk3300_BCHEELFPNCD = 11;
  map<uint32, uint32> skill_info_map = 1;
}


message BrickBreakerLevelInfo {
  repeated uint32 chosen_avatar_list = 5;
  uint32 level_id = 3;
  bool is_finish = 13;
  uint32 max_score = 8;
  repeated uint32 chosen_skill_list = 14;
  bool is_can_start = 1;
}


message BrickBreakerPlayerBattleInfo {
  bool is_ready = 7;
  repeated uint32 costume_id = 5;
  string nickname = 2;
  uint32 uid = 13;
  repeated uint32 avatar_id = 9;
  bool is_changing = 15;
  repeated uint32 skill_list = 3;
}


message BrickBreakerPlayerReadyNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5396;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint32 uid_list = 10;
}


message BrickBreakerPlayerSetAvatarNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5362;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint32 avatar_id_list = 11;
  repeated uint32 costume_id_list = 6;
  uint32 uid = 12;
}


message BrickBreakerPlayerSetChangingNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5370;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 uid = 3;
  bool is_changing = 6;
}


message BrickBreakerPlayerSetSkillNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5351;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 uid = 4;
  repeated uint32 skill_id_list = 2;
}


message BrickBreakerQuitReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 24991;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}


message BrickBreakerQuitRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 24959;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 15;
}


message BrickBreakerSelectAvatarReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5368;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated uint32 avatar_id = 12;
}


message BrickBreakerSelectAvatarRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5359;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 14;
  repeated uint32 avatar_id = 9;
}


message BrickBreakerSelectSkillReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5329;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated uint32 skill_id = 5;
}


message BrickBreakerSelectSkillRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5386;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 2;
  repeated uint32 skill_id = 12;
}


message BrickBreakerSetChangingReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5358;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  bool is_changing = 1;
}


message BrickBreakerSetChangingRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5314;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 1;
}


message BrickBreakerSetReadyReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5371;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}


message BrickBreakerSetReadyRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5332;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 4;
}

import "Uint32Pair.proto";

message BrickBreakerSettleNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 23886;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  enum SettleReason {
    SETTLE_REASON_TIME_OUT = 0;
    SETTLE_REASON_PLAY_END = 1;
    SETTLE_REASON_PLAYER_QUIT = 2;
    SETTLE_REASON_LIFE_COUNT = 3;
  }

  uint32 time = 5;
  bool is_single_mode = 15;
  bool is_dungeon = 2;
  uint32 score = 7;
  uint32 combo = 12;
  uint32 level_id = 11;
  SettleReason reason = 1;
  bool is_new_record = 3;
  uint32 gallery_id = 13;
  repeated Uint32Pair update_skill_list = 4;
}

import "BrickBreakerPlayerBattleInfo.proto";
import "BrickBreakerStageType.proto";

message BrickBreakerStageInfo {
  uint32 level_id = 7;
  repeated BrickBreakerPlayerBattleInfo battle_info_list = 3;
  BrickBreakerStageType stage_type = 5;
}


enum BrickBreakerStageType {
  BRICK_BREAKER_STAGE_TYPE_PREPARE = 0;
  BRICK_BREAKER_STAGE_TYPE_PICK = 1;
  BRICK_BREAKER_STAGE_TYPE_GAME = 2;
  BRICK_BREAKER_STAGE_TYPE_PLAY = 3;
  BRICK_BREAKER_STAGE_TYPE_SETTLE = 4;
}


message BrickBreakerTwiceStartReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 24700;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}


message BrickBreakerTwiceStartRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 20232;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 12;
}


message BuildingInfo {
  uint32 building_id = 1;
  uint32 point_config_id = 2;
  uint32 cost = 3;
  uint32 refund = 5;
  uint32 owner_uid = 6;
  uint32 current_num = 7;
  uint32 max_num = 8;
}


message BuoyantCombatDailyInfo {
  uint32 best_score = 5;
  uint32 start_time = 10;
}

import "BuoyantCombatDailyInfo.proto";

message BuoyantCombatDetailInfo {
  repeated BuoyantCombatDailyInfo daily_info_list = 11;
}


message BuoyantCombatGallerySettleInfo {
  uint32 gallery_level = 11;
  uint32 kill_monster_count = 1;
  uint32 kill_special_monster_count = 9;
  uint32 Unk3300_HLFHLPEKOML = 7;
  uint32 gallery_id = 2;
  uint32 Unk3300_KPCJBOOGEMG = 10;
  uint32 final_score = 12;
}

import "BuoyantCombatGallerySettleInfo.proto";

message BuoyantCombatSettleInfo {
  BuoyantCombatGallerySettleInfo settle_info = 14;
  bool is_new_record = 2;
}

import "BuoyantCombatSettleInfo.proto";

message BuoyantCombatSettleNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8751;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 gallery_id = 8;
  BuoyantCombatSettleInfo settle_info = 15;
}


message BuyBattlePassLevelReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2643;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 buy_level = 15;
}


message BuyBattlePassLevelRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2609;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 11;
  uint32 buy_level = 15;
}

import "ShopGoods.proto";

message BuyGoodsParam {
  ShopGoods goods = 14;
  uint32 buy_count = 2;
}

import "ShopGoods.proto";

message BuyGoodsReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 756;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 shop_type = 9;
  ShopGoods goods = 10;
  uint32 buy_count = 13;
}

import "ShopGoods.proto";

message BuyGoodsRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 719;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 shop_type = 15;
  int32 retcode = 13;
  repeated ShopGoods goods_list = 10;
  ShopGoods goods = 7;
  uint32 buy_count = 9;
}


message BuyResinReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 693;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}


message BuyResinRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 654;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 cur_value = 7;
  int32 retcode = 13;
}

import "ItemParam.proto";

message CalcWeaponUpgradeReturnItemsReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 666;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated uint64 food_weapon_guid_list = 12;
  repeated ItemParam item_param_list = 8;
  uint64 target_weapon_guid = 2;
}

import "ItemParam.proto";

message CalcWeaponUpgradeReturnItemsRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 652;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint64 target_weapon_guid = 3;
  repeated ItemParam item_param_list = 10;
  int32 retcode = 4;
}


message CancelCityReputationRequestReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2857;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 city_id = 14;
  uint32 request_id = 10;
}


message CancelCityReputationRequestRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2827;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 city_id = 7;
  int32 retcode = 14;
  uint32 request_id = 5;
}


message CancelCoopTaskReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1993;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 chapter_id = 6;
}


message CancelCoopTaskRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1959;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 chapter_id = 5;
  int32 retcode = 14;
}


message CancelFinishParentQuestNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 422;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 parent_quest_id = 14;
}


message CanUseSkillNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1042;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  bool is_can_use_skill = 12;
}


message CardProductRewardNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4135;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 hcoin = 6;
  string product_id = 3;
  uint32 remain_days = 4;
}

import "CataLogGlobalWatcherFinishedData.proto";

message CataLogFinishedGlobalWatcherAllDataNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 6365;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated CataLogGlobalWatcherFinishedData finished_global_watcher_data_list = 7;
}


message CataLogGlobalWatcherFinishedData {
  repeated uint32 finished_global_watcher_list = 15;
  uint32 catalog_type = 2;
}

import "CataLogGlobalWatcherFinishedData.proto";

message CataLogNewFinishedGlobalWatcherNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 6368;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated CataLogGlobalWatcherFinishedData new_finished_global_watcher_data_list = 11;
}

import "SceneSurfaceMaterial.proto";

message CellInfo {
  SceneSurfaceMaterial type = 1;
  int32 y = 2;
}


message ChallengeBrief {
  uint32 challenge_index = 5;
  uint32 cur_progress = 15;
  bool is_success = 12;
  uint32 challenge_id = 1;
}


message ChallengeDataNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 973;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 param_index = 4;
  uint32 challenge_index = 2;
  uint32 value = 3;
}


enum ChallengeFinishType {
  CHALLENGE_FINISH_TYPE_NONE = 0;
  CHALLENGE_FINISH_TYPE_FAIL = 1;
  CHALLENGE_FINISH_TYPE_SUCC = 2;
  CHALLENGE_FINISH_TYPE_PAUSE = 3;
}


message ChallengeRecord {
  uint32 challenge_record_type = 2;
  uint32 challenge_index = 3;
  uint32 challenge_id = 9;
  uint32 best_value = 4;
}

import "ChallengeRecord.proto";

message ChallengeRecordNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 907;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 group_id = 15;
  repeated ChallengeRecord challenge_record_list = 9;
}

import "Vector.proto";

message ChangeAvatarReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1682;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  Vector move_pos = 9;
  uint64 guid = 14;
  bool is_move = 11;
  uint32 skill_id = 4;
}


message ChangeAvatarRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1699;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint64 cur_guid = 10;
  uint32 skill_id = 1;
  int32 retcode = 5;
}


message ChangeCustomDungeonRoomReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 6217;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 room_id = 8;
}


message ChangeCustomDungeonRoomRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 6212;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 room_id = 8;
  int32 retcode = 14;
}


enum ChangeEnergyReason {
  CHANGE_ENERGY_REASON_NONE = 0;
  CHANGE_ENERGY_REASON_SKILL_START = 1;
}


message ChangeGameTimeReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 178;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 extra_days = 3;
  uint32 game_time = 8;
  bool is_force_set = 2;
}


message ChangeGameTimeRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 157;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 10;
  uint32 extra_days = 2;
  uint32 cur_game_time = 8;
}


enum ChangeHpReason {
  CHANGE_HP_REASON_NONE = 0;
  CHANGE_HP_REASON_SUB_AVATAR = 1;
  CHANGE_HP_REASON_SUB_MONSTER = 2;
  CHANGE_HP_REASON_SUB_GEAR = 3;
  CHANGE_HP_REASON_SUB_ENVIR = 4;
  CHANGE_HP_REASON_SUB_FALL = 5;
  CHANGE_HP_REASON_SUB_DRAWN = 6;
  CHANGE_HP_REASON_SUB_ABYSS = 7;
  CHANGE_HP_REASON_SUB_ABILITY = 8;
  CHANGE_HP_REASON_SUB_SUMMON = 9;
  CHANGE_HP_REASON_SUB_SCRIPT = 10;
  CHANGE_HP_REASON_SUB_GM = 11;
  CHANGE_HP_REASON_SUB_KILL_SELF = 12;
  CHANGE_HP_REASON_SUB_CLIMATE_COLD = 13;
  CHANGE_HP_REASON_SUB_STORM_LIGHTNING = 14;
  CHANGE_HP_REASON_SUB_KILL_SERVER_GADGET = 15;
  CHANGE_HP_REASON_SUB_REPLACE = 16;
  CHANGE_HP_REASON_SUB_PLAYER_LEAVE = 17;
  CHANGE_HP_REASON_ATTACK_BY_ENERGY = 18;
  CHANGE_HP_REASON_ATTACK_BY_RECYCLE = 19;
  CHANGE_HP_REASON_BY_LUA = 51;
  CHANGE_HP_REASON_ADD_ABILITY = 101;
  CHANGE_HP_REASON_ADD_ITEM = 102;
  CHANGE_HP_REASON_ADD_REVIVE = 103;
  CHANGE_HP_REASON_ADD_UPGRADE = 104;
  CHANGE_HP_REASON_ADD_STATUE = 105;
  CHANGE_HP_REASON_ADD_BACKGROUND = 106;
  CHANGE_HP_REASON_ADD_GM = 107;
  CHANGE_HP_REASON_ADD_TRIAL_AVATAR_ACTIVITY = 108;
  CHANGE_HP_REASON_ADD_ROGUELIKE_SPRING = 109;
}


message ChangeMailStarNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1448;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated uint32 mail_id_list = 13;
  bool is_star = 15;
}


message ChangeMpTeamAvatarReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1645;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint64 cur_avatar_guid = 3;
  repeated uint64 avatar_guid_list = 14;
}


message ChangeMpTeamAvatarRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1730;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint64 cur_avatar_guid = 12;
  int32 retcode = 10;
  repeated uint64 avatar_guid_list = 2;
}


message ChangeServerGlobalValueNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 17;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 entity_id = 5;
}


message ChangeTeamNameReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1706;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  int32 team_id = 14;
  string team_name = 15;
}


message ChangeTeamNameRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1696;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 2;
  string team_name = 15;
  int32 team_id = 5;
}


message ChangeWidgetBackgroundActiveStateReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5959;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  bool is_active = 6;
  uint32 material_id = 13;
}


message ChangeWidgetBackgroundActiveStateRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5955;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 material_id = 7;
  int32 retcode = 1;
}


message ChangeWorldToSingleModeNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3461;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}


message ChangeWorldToSingleModeReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3296;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}


message ChangeWorldToSingleModeRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3258;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 quit_mp_valid_time = 6;
  int32 retcode = 14;
}

import "ChannelerSlabBuffInfo.proto";
import "ChannelerSlabChallengeStage.proto";
import "ChannelerSlabLoopDungeonStageInfo.proto";

message ChannelerSlabActivityDetailInfo {
  ChannelerSlabLoopDungeonStageInfo loop_dungeon_stage_info = 2;
  ChannelerSlabBuffInfo buff_info = 9;
  repeated ChannelerSlabChallengeStage stage_list = 8;
  uint32 play_end_time = 14;
}


message ChannelerSlabAssistInfo {
  uint32 avatar_level = 10;
  uint32 uid = 11;
  uint32 avatar_id = 6;
}

import "ChannelerSlabAssistInfo.proto";
import "ChannelerSlabBuffSchemeInfo.proto";

message ChannelerSlabBuffInfo {
  repeated ChannelerSlabAssistInfo assist_info_list = 11;
  ChannelerSlabBuffSchemeInfo Unk3300_CDFLIONGKCH = 8;
  ChannelerSlabBuffSchemeInfo Unk3300_ANENHMAADLN = 14;
  repeated uint32 buff_id_list = 6;
}


message ChannelerSlabBuffSchemeInfo {
  uint32 Unk3300_NCMDDAFNENO = 9;
  map<uint32, uint32> slot_map = 11;
  uint32 Unk3300_CKMNFOCNMGL = 5;
}

import "Vector.proto";

message ChannelerSlabCamp {
  uint32 buff_num = 11;
  uint32 reward_id = 9;
  uint32 group_id = 8;
  Vector pos = 15;
}

import "ChannelerSlabCamp.proto";

message ChannelerSlabChallenge {
  uint32 active_camp_index = 1;
  repeated ChannelerSlabCamp camp_list = 14;
}

import "ChannelerSlabChallenge.proto";
import "ChannelerSlabOneoffDungeon.proto";

message ChannelerSlabChallengeStage {
  bool is_open = 4;
  ChannelerSlabOneoffDungeon dungeon_info = 12;
  uint32 open_time = 13;
  uint32 stage_id = 1;
  repeated ChannelerSlabChallenge challenge_list = 2;
}


message ChannelerSlabCheckEnterLoopDungeonReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8286;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}


message ChannelerSlabCheckEnterLoopDungeonRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8631;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 12;
}


message ChannelerSlabEnterLoopDungeonReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8564;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 difficulty_id = 2;
  repeated uint32 condition_id_list = 10;
  uint32 point_id = 1;
  uint32 dungeon_index = 3;
}


message ChannelerSlabEnterLoopDungeonRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8526;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 point_id = 14;
  int32 retcode = 9;
  uint32 difficulty_id = 8;
  uint32 dungeon_index = 13;
  repeated uint32 condition_id_list = 7;
}


message ChannelerSlabLoopDungeonChallengeInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8576;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint32 scheme_buff_id_list = 6;
  uint32 dungeon_index = 10;
  repeated uint32 condition_id_list = 8;
  uint32 difficulty_id = 13;
  uint32 challenge_score = 3;
}


message ChannelerSlabLoopDungeonInfo {
  bool is_first_pass_reward_taken = 9;
  uint32 score = 7;
  repeated uint32 last_condition_id_list = 10;
  uint32 dungeon_index = 1;
  bool is_open = 4;
  uint32 open_time = 13;
}


message ChannelerSlabLoopDungeonResultInfo {
  uint32 dungeon_index = 7;
  uint32 challenge_score = 5;
  bool is_in_time_limit = 8;
  bool is_success = 12;
  uint32 challenge_max_score = 13;
}


message ChannelerSlabLoopDungeonSelectConditionReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8659;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 dungeon_index = 7;
  repeated uint32 condition_id_list = 15;
  uint32 difficulty_id = 11;
}


message ChannelerSlabLoopDungeonSelectConditionRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8858;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 dungeon_index = 1;
  repeated uint32 condition_id_list = 10;
  uint32 difficulty_id = 5;
  int32 retcode = 7;
}

import "ChannelerSlabLoopDungeonInfo.proto";

message ChannelerSlabLoopDungeonStageInfo {
  repeated uint32 taken_reward_index_list = 5;
  bool is_open = 9;
  uint32 open_time = 7;
  repeated ChannelerSlabLoopDungeonInfo dungeon_info_list = 3;
  uint32 last_difficulty_id = 6;
}


message ChannelerSlabLoopDungeonTakeFirstPassRewardReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8498;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 dungeon_index = 7;
}


message ChannelerSlabLoopDungeonTakeFirstPassRewardRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8824;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 13;
  uint32 dungeon_index = 9;
}


message ChannelerSlabLoopDungeonTakeScoreRewardReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8348;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 reward_index = 13;
}


message ChannelerSlabLoopDungeonTakeScoreRewardRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8369;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 5;
  uint32 reward_index = 8;
}


message ChannelerSlabOneoffDungeon {
  uint32 dungeon_id = 6;
  bool is_done = 1;
  uint32 reward_id = 5;
}


message ChannelerSlabOneOffDungeonInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8015;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint32 scheme_buff_id_list = 8;
}


message ChannelerSlabOneOffDungeonInfoReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8877;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}


message ChannelerSlabOneOffDungeonInfoRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8270;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint32 scheme_buff_id_list = 10;
  int32 retcode = 5;
}

import "ChannelerSlabAssistInfo.proto";

message ChannelerSlabSaveAssistInfoReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8039;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated ChannelerSlabAssistInfo assist_info_list = 14;
}

import "ChannelerSlabAssistInfo.proto";

message ChannelerSlabSaveAssistInfoRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8071;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated ChannelerSlabAssistInfo assist_info_list = 2;
  int32 retcode = 7;
}


message ChannelerSlabStageActiveChallengeIndexNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8857;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 challenge_index = 1;
  uint32 active_camp_index = 14;
  uint32 stage_id = 10;
}


message ChannelerSlabStageOneoffDungeonNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8692;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  bool is_done = 6;
  uint32 stage_id = 13;
}


message ChannelerSlabTakeoffBuffReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8299;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 slot_id = 3;
  uint32 buff_id = 12;
  bool is_mp = 10;
}


message ChannelerSlabTakeoffBuffRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8034;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 slot_id = 2;
  int32 retcode = 8;
  uint32 buff_id = 12;
  bool is_mp = 10;
}


message ChannelerSlabWearBuffReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8664;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 slot_id = 13;
  bool is_mp = 6;
  uint32 buff_id = 1;
}


message ChannelerSlabWearBuffRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8285;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  bool is_mp = 7;
  uint32 buff_id = 8;
  uint32 slot_id = 11;
  int32 retcode = 13;
}


enum ChannelIdType {
  CHANNEL_ID_TYPE_NONE = 0;
  CHANNEL_ID_TYPE_MIHOYO = 1;
  CHANNEL_ID_TYPE_XIAOMI = 11;
  CHANNEL_ID_TYPE_COOLPAD = 12;
  CHANNEL_ID_TYPE_YYB = 13;
  CHANNEL_ID_TYPE_BILI = 14;
  CHANNEL_ID_TYPE_HUAWEI = 15;
  CHANNEL_ID_TYPE_MEIZU = 16;
  CHANNEL_ID_TYPE_360 = 17;
  CHANNEL_ID_TYPE_OPPO = 18;
  CHANNEL_ID_TYPE_VIVO = 19;
  CHANNEL_ID_TYPE_UC = 20;
  CHANNEL_ID_TYPE_LENOVO = 22;
  CHANNEL_ID_TYPE_JINLI = 23;
  CHANNEL_ID_TYPE_BAIDU = 25;
  CHANNEL_ID_TYPE_DANGLE = 26;
}


enum ChapterState {
  CHAPTER_STATE_INVALID = 0;
  CHAPTER_STATE_UNABLE_TO_BEGIN = 1;
  CHAPTER_STATE_BEGIN = 2;
  CHAPTER_STATE_END = 3;
}

import "ChapterState.proto";

message ChapterStateNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 442;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  message NeedPlayerLevel {
    bool is_limit = 12;
    uint32 config_need_player_level = 3;
  }

  message NeedBeginTime {
    bool is_limit = 4;
    uint32 config_need_begin_time = 14;
  }

  uint32 chapter_id = 9;
  NeedBeginTime need_begin_time = 13;
  ChapterState chapter_state = 1;
  NeedPlayerLevel need_player_level = 5;
}


message CharAmusementAvatarInfo {
  uint32 uid = 14;
  repeated uint32 avatar_id_list = 4;
  uint32 punish_time = 5;
}

import "CharAmusementStageData.proto";

message CharAmusementDetailInfo {
  repeated CharAmusementStageData stage_data_list = 12;
}

import "CharAmusementAvatarInfo.proto";

message CharAmusementInfo {
  uint32 level_id = 12;
  uint32 total_cost_time = 2;
  uint32 preview_stage_index = 1;
  repeated CharAmusementAvatarInfo avatar_info_list = 5;
  uint32 stage_id = 4;
}


message CharAmusementSettleNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 23128;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  bool is_new_record = 10;
  uint32 finish_time = 2;
  bool is_succ = 12;
}


message CharAmusementStageData {
  uint32 finish_time = 3;
  bool is_open = 6;
  uint32 stage_id = 4;
}


enum ChatChannel {
  CHAT_CHANNEL_TEAM = 0;
  CHAT_CHANNEL_FRIEND = 1;
  CHAT_CHANNEL_NONE = 2;
  CHAT_CHANNEL_HIDEANDSEEK = 3;
  CHAT_CHANNEL_HIDEANDSEEK_TEAM = 5;
  CHAT_CHANNEL_ALL = 10;
  CHAT_CHANNEL_TEST = 100;
}

import "ChatChannelInfo.proto";

message ChatChannelDataNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4998;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated ChatChannelInfo channel_info_list = 5;
  repeated uint32 channel_list = 3;
}


message ChatChannelInfo {
  bool is_shield = 1;
  uint32 channel_id = 8;
}

import "ChatChannelInfo.proto";

message ChatChannelInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4975;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  ChatChannelInfo channel_info = 7;
}


message ChatChannelShieldNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5049;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  bool is_shield = 2;
  uint32 channel_id = 5;
}

import "ChatChannelInfo.proto";

message ChatChannelUpdateNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4989;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 channel_id = 2;
  ChatChannelInfo channel_info = 5;
  bool is_create = 15;
}


message ChatEmojiCollectionData {
  repeated uint32 emoji_id_list = 1;
}

import "ChatInfo.proto";

message ChatHistoryNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3309;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 channel_id = 1;
  repeated ChatInfo chat_info = 9;
}


message ChatInfo {
  enum SystemHintType {
    SYSTEM_HINT_TYPE_CHAT_NONE = 0;
    SYSTEM_HINT_TYPE_CHAT_ENTER_WORLD = 1;
    SYSTEM_HINT_TYPE_CHAT_LEAVE_WORLD = 2;
  }

  message SystemHint {
    uint32 type = 15;
  }

  bool is_read = 3;
  uint32 time = 1;
  uint32 to_uid = 10;
  uint32 uid = 11;
  uint32 sequence = 5;
  oneof content {
    string text = 909;
    uint32 icon = 990;
    SystemHint system_hint = 799;
  }
}


message CheckAddItemExceedLimitNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 697;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  enum ItemExceedLimitMsgType {
    ITEM_EXCEED_LIMIT_MSG_TYPE_DEFAULT = 0;
    ITEM_EXCEED_LIMIT_MSG_TYPE_TEXT = 1;
    ITEM_EXCEED_LIMIT_MSG_TYPE_DIALOG = 2;
    ITEM_EXCEED_LIMIT_MSG_TYPE_DIALOG_NONBLOCK = 3;
  }

  repeated uint32 exceeded_item_list = 4;
  repeated uint32 exceeded_item_type_list = 11;
  uint32 reason = 9;
  bool is_drop = 14;
  ItemExceedLimitMsgType msg_type = 6;
}


message CheckGroupReplacedReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3056;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated uint32 group_id_list = 7;
}


message CheckGroupReplacedRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3411;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 14;
  repeated uint32 replaced_group_id_list = 10;
}

import "SegmentInfo.proto";

message CheckSegmentCRCNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 16;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated SegmentInfo info_list = 6;
}

import "SegmentCRCInfo.proto";

message CheckSegmentCRCReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 73;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated SegmentCRCInfo info_list = 4;
}


message CheckUgcStateReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 6345;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}


message CheckUgcStateRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 6302;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 8;
}

import "UgcType.proto";

message CheckUgcUpdateReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 6315;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  UgcType ugc_type = 3;
}

import "UgcType.proto";

message CheckUgcUpdateRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 6318;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  UgcType ugc_type = 6;
  repeated uint64 update_ugc_guid_list = 3;
  int32 retcode = 7;
}


message ChessActivityDetailInfo {
  uint32 punish_over_time = 9;
  uint32 Unk3300_LPDDFGGKGBP = 4;
  uint32 level = 14;
  uint32 exp = 6;
  uint32 Unk3300_HBGEGIPIANG = 15;
  uint32 content_close_time = 1;
  bool is_teach_dungeon_finished = 11;
  bool is_content_closed = 5;
  repeated uint32 finished_map_id_list = 13;
}


message ChessCardInfo {
  uint32 card_id = 12;
  uint32 effect_stack = 8;
}

import "ChessEntranceInfo.proto";

message ChessEntranceDetailInfo {
  repeated ChessEntranceInfo info_list = 9;
}

import "ChessMonsterInfo.proto";

message ChessEntranceInfo {
  repeated ChessMonsterInfo monster_info_list = 15;
  uint32 entrance_index = 9;
  uint32 entrance_point_id = 12;
}


message ChessEscapedMonstersNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5341;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 escaped_monsters = 14;
}


message ChessLeftMonstersNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5336;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 left_monsters = 5;
}


message ChessManualRefreshCardsReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5326;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}


message ChessManualRefreshCardsRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5377;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 11;
}


message ChessMonsterInfo {
  uint32 monster_id = 9;
  uint32 level = 15;
  repeated uint32 affix_list = 13;
}

import "ChessEntranceDetailInfo.proto";

message ChessMysteryInfo {
  repeated uint32 exit_point_id_list = 15;
  map<uint32, uint32> entrance_point_map = 10;
  map<uint32, ChessEntranceDetailInfo> detail_info_map = 8;
}


message ChessNormalCardInfo {
  uint32 cost_points = 3;
  uint32 card_id = 2;
  bool is_attach_curse = 4;
}

import "ChessNormalCardInfo.proto";

message ChessPickCardNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5374;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  ChessNormalCardInfo normal_card_info = 8;
  uint32 curse_card_id = 6;
}


message ChessPickCardReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5366;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 card_id = 5;
  uint32 card_index = 3;
}


message ChessPickCardRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5352;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 11;
  uint32 card_index = 4;
  uint32 card_id = 13;
}

import "ChessNormalCardInfo.proto";

message ChessPlayerInfo {
  repeated ChessNormalCardInfo candidate_card_info_list = 1;
  uint32 uid = 5;
  uint32 Unk3300_AOCJHOKCDDM = 2;
  uint32 Unk3300_GPNDNCCLHKE = 10;
  uint32 building_points = 8;
  uint32 Unk3300_PPFBGIDKCDJ = 12;
  uint32 Unk3300_PPFPEAGBHLP = 13;
}

import "ChessPlayerInfo.proto";

message ChessPlayerInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5365;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  ChessPlayerInfo player_info = 12;
}

import "ChessCardInfo.proto";

message ChessSelectedCardsNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5397;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated ChessCardInfo selected_card_info_list = 9;
}


message ChildQuest {
  uint32 state = 15;
  uint32 quest_config_id = 9;
  uint32 quest_id = 13;
}


message ChooseCurAvatarTeamReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1738;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 team_id = 10;
}


message ChooseCurAvatarTeamRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1778;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 15;
  uint32 cur_team_id = 11;
}


enum CityidConstValue {
  CITYID_CONST_VALUE_NONE = 0;
  CITYID_CONST_VALUE_MENGDE = 1;
  CITYID_CONST_VALUE_LIYUE = 2;
  CITYID_CONST_VALUE_DAOQI = 3;
  CITYID_CONST_VALUE_XUMI = 4;
}


message CityInfo {
  uint32 city_id = 9;
  uint32 level = 12;
  uint32 crystal_num = 2;
}

import "CityReputationSimpleInfo.proto";

message CityReputationDataNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2842;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated CityReputationSimpleInfo simple_info_list = 13;
}


message CityReputationExploreInfo {
  uint32 explore_percent = 1;
  repeated uint32 taken_explore_reward_list = 15;
  bool is_open = 13;
}


message CityReputationHuntInfo {
  uint32 cur_week_finish_num = 1;
  bool is_open = 7;
  bool has_reward = 15;
}

import "CityReputationExploreInfo.proto";
import "CityReputationHuntInfo.proto";
import "CityReputationQuestInfo.proto";
import "CityReputationRequestInfo.proto";

message CityReputationInfo {
  uint32 exp = 8;
  CityReputationQuestInfo quest_info = 9;
  repeated uint32 taken_level_reward_list = 10;
  CityReputationRequestInfo request_info = 5;
  uint32 next_refresh_time = 11;
  uint32 total_accept_request_num = 12;
  CityReputationHuntInfo hunt_info = 15;
  CityReputationExploreInfo explore_info = 3;
  uint32 level = 2;
}


message CityReputationLevelupNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2900;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 level = 5;
  uint32 city_id = 6;
}


message CityReputationQuestInfo {
  repeated uint32 Unk3300_IMLDPDMHJBJ = 12;
  repeated uint32 Unk3300_OMGMGDIHDOH = 10;
  bool is_open = 4;
}


message CityReputationRequestInfo {
  message RequestInfo {
    bool is_taken_reward = 4;
    uint32 request_id = 8;
    uint32 quest_id = 11;
  }

  repeated RequestInfo request_info_list = 4;
  bool is_open = 14;
}


message CityReputationSimpleInfo {
  uint32 city_id = 14;
  uint32 level = 8;
}


message ClearRoguelikeCurseNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8038;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  bool is_clear_all = 11;
  map<uint32, uint32> clear_curse_map = 5;
  uint32 card_id = 9;
  bool is_curse_all_clear = 4;
}

import "EntityAbilityInvokeEntry.proto";

message ClientAbilitiesInitFinishCombineNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1161;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated EntityAbilityInvokeEntry entity_invoke_list = 10;
}

import "AbilityInvokeEntry.proto";

message ClientAbilityChangeNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1139;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  bool is_init_hash = 10;
  repeated AbilityInvokeEntry invokes = 14;
  uint32 entity_id = 11;
}


message ClientAbilityInitBeginNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1156;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 entity_id = 10;
}

import "AbilityInvokeEntry.proto";

message ClientAbilityInitFinishNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1119;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 entity_id = 11;
  repeated AbilityInvokeEntry invokes = 9;
}


message ClientAIStateNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1125;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 entity_id = 13;
  uint32 cur_tactic = 3;
}


message ClientBulletCreateNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 44;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 param = 2;
}


message ClientCollectorData {
  uint32 max_points = 2;
  uint32 curr_points = 3;
  uint32 material_id = 9;
}

import "ClientCollectorData.proto";

message ClientCollectorDataNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4252;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated ClientCollectorData client_collector_data_list = 1;
}


message ClientGadgetInfo {
  uint32 camp_id = 1;
  uint32 camp_type = 2;
  uint64 guid = 3;
  uint32 owner_entity_id = 4;
  uint32 target_entity_id = 5;
  bool async_load = 6;
  bool is_peer_id_from_player = 7;
  repeated uint32 target_entity_id_list = 8;
}


message ClientHashDebugNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3287;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 job_id = 15;
}


enum ClientInputType {
  CLIENT_INPUT_TYPE_NONE = 0;
  CLIENT_INPUT_TYPE_KEYBOARD_MOUSE = 1;
  CLIENT_INPUT_TYPE_GAMEPAD = 2;
  CLIENT_INPUT_TYPE_TOUCH_PANEL = 3;
}


message ClientLoadingCostumeVerificationNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3269;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint64 prefab_hash = 5;
  uint64 guid = 1;
  uint32 costume_id = 7;
}


message ClientLockGameTimeNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 141;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  bool is_lock = 11;
}


message ClientLogBodyLogin {
  string action_type = 1;
  string action_result = 2;
  uint32 action_time = 3;
  string xg = 4;
  uint32 signal_level = 5;
  string dns = 6;
}


message ClientLogBodyPing {
  string xg = 1;
  uint32 signal_level = 2;
  uint32 ping = 3;
  string servertype = 4;
  string serverip = 5;
  string serverport = 6;
  uint32 pcount = 7;
  uint32 plost = 8;
  string dns = 9;
}


message ClientLogHead {
  string event_time = 1;
  string log_serial_number = 2;
  uint32 action_id = 3;
  string action_name = 4;
  string upload_ip = 5;
  string product_id = 6;
  string channel_id = 7;
  string region_name = 8;
  string game_version = 9;
  string device_type = 10;
  string device_uuid = 11;
  string mac_addr = 12;
  string account_name = 13;
  string account_uuid = 14;
}

import "MassiveBoxInfo.proto";
import "MassiveGrassInfo.proto";
import "MassiveWaterInfo.proto";

message ClientMassiveEntity {
  uint32 entity_type = 1;
  uint32 config_id = 2;
  int64 obj_id = 3;
  oneof entity_info {
    MassiveWaterInfo water_info = 4;
    MassiveGrassInfo grass_info = 5;
    MassiveBoxInfo box_info = 6;
  }
}


message ClientNewMailNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1457;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 not_got_attachment_num = 13;
  uint32 not_read_num = 2;
}


message ClientPauseNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 236;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  bool is_open = 8;
}

import "ClientReconnectReason.proto";

message ClientReconnectNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 39;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  ClientReconnectReason reason = 1;
}


enum ClientReconnectReason {
  CLIENT_RECONNECT_REASON_NONE = 0;
  CLIENT_RECONNECT_REASON_QUIT_MP = 1;
}


message ClientRemoveCombatEndModifierNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1190;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated uint32 combat_end_type_list = 10;
}


message ClientReportNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 25;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  string Unk3300_JHJDJEBAFCM = 15;
  string Unk3300_AMLEAJLJDFO = 10;
}


message ClientScriptEventNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 260;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 source_entity_id = 1;
  uint32 event_type = 8;
  uint32 target_entity_id = 4;
  repeated int32 param_list = 6;
}

import "TransmitReason.proto";
import "Vector.proto";

message ClientTransmitReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 221;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  TransmitReason reason = 3;
  uint32 scene_id = 9;
  Vector rot = 6;
  Vector pos = 4;
}

import "TransmitReason.proto";

message ClientTransmitRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 222;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  TransmitReason reason = 11;
  int32 retcode = 13;
}

import "EventTriggerType.proto";

message ClientTriggerEventNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 148;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 force_id = 10;
  EventTriggerType event_type = 15;
}


enum ClientType {
  CLIENT_TYPE_PRODUCT = 0;
  CLIENT_TYPE_DEV = 1;
}


message CloseCommonTipsNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3273;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }
}


message ClosedItemNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 641;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint32 item_id_list = 10;
}

import "CodexTypeData.proto";

message CodexDataFullNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4201;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated CodexTypeData type_data_list = 14;
  uint32 last_read_pushtips_codex_id = 4;
  uint32 last_read_pushtips_type_id = 13;
  repeated uint32 recent_viewed_pushtips_list = 1;
}

import "CodexType.proto";

message CodexDataUpdateNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4203;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 weapon_max_promote_level = 10;
  CodexType type = 5;
  uint32 id = 3;
}


enum CodexType {
  CODEX_TYPE_NONE = 0;
  CODEX_TYPE_QUEST = 1;
  CODEX_TYPE_WEAPON = 2;
  CODEX_TYPE_ANIMAL = 3;
  CODEX_TYPE_MATERIAL = 4;
  CODEX_TYPE_BOOKS = 5;
  CODEX_TYPE_PUSHTIPS = 6;
  CODEX_TYPE_VIEW = 7;
  CODEX_TYPE_RELIQUARY = 8;
}

import "CodexType.proto";

message CodexTypeData {
  repeated bool have_viewed_list = 13;
  repeated uint32 codex_id_list = 9;
  map<uint32, uint32> weapon_max_promote_level_map = 12;
  CodexType type = 14;
}


message CoinCollectCheckDoubleStartPlayReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 22424;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 level_id = 9;
}


message CoinCollectCheckDoubleStartPlayRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 24124;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 10;
  uint32 level_id = 6;
}


message CoinCollectChooseSkillReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 21667;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 choose_skill_no = 14;
  uint32 level_id = 9;
}


message CoinCollectChooseSkillRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 23416;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 level_id = 13;
  uint32 choose_skill_no = 10;
  int32 retcode = 7;
}

import "CoinCollectLevelData.proto";

message CoinCollectDetailInfo {
  repeated CoinCollectLevelData level_data_list = 2;
}


message CoinCollectGallerySettleNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5546;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 level_id = 2;
  uint32 Unk3300_DKBJMLJGLIB = 13;
  uint32 Unk3300_KDHDMOGJDNL = 14;
  uint32 multistage_play_index = 8;
  uint32 Unk3300_CPLDPCMBHOE = 6;
  bool is_new_record = 15;
}


message CoinCollectInterruptPlayReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 20562;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 gallery_id = 11;
}


message CoinCollectInterruptPlayRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 23589;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 gallery_id = 3;
  int32 retcode = 15;
}

import "CoinCollectTeamInfoData.proto";

message CoinCollectLevelData {
  bool is_level_open = 6;
  uint32 Unk3300_GNFGEFHKHEF = 14;
  uint32 level_id = 7;
  uint32 Unk3300_ONPKNIAHPHM = 4;
  bool Unk3300_GDKMJJNFIPP = 13;
  CoinCollectTeamInfoData single_best_team_info = 8;
  uint32 Unk3300_HINHOCILNJC = 1;
  uint32 Unk3300_ALILGJBDOMD = 3;
  bool Unk3300_OLNMJJHJAGK = 10;
  uint32 Unk3300_LOPHGLMNDCP = 11;
  repeated CoinCollectTeamInfoData double_best_team_info_list = 2;
  bool Unk3300_JDBOOHBJFCP = 9;
}


message CoinCollectOperatorInfo {
  uint32 level_id = 1;
}

import "CoinCollectTeamAvatarInfo.proto";

message CoinCollectPlayerInfo {
  uint32 player_uid = 15;
  bool is_prepare = 7;
  uint32 choose_skill_no = 10;
  repeated CoinCollectTeamAvatarInfo avatar_info_list = 2;
  string player_name = 6;
}


message CoinCollectPrepareReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 23071;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}


message CoinCollectPrepareRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 23817;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 15;
}

import "CoinCollectStageInfo.proto";

message CoinCollectPrepareStageNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 6408;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  CoinCollectStageInfo coin_collect_info = 11;
}

import "CoinCollectPlayerInfo.proto";

message CoinCollectStageInfo {
  uint32 play_index = 9;
  repeated CoinCollectPlayerInfo player_info_list = 11;
  uint32 level_id = 5;
}


message CoinCollectTeamAvatarInfo {
  uint32 avatar_id = 5;
  uint32 costume_id = 1;
}


message CoinCollectTeamInfoData {
  repeated uint32 Unk3300_CPDGJEIOJAB = 2;
  uint32 choose_skill_no = 11;
  repeated uint32 Unk3300_IFBDFEOGOLH = 15;
  bool is_host = 13;
  uint32 player_uid = 6;
  repeated uint32 avatar_id_list = 7;
}

import "CombatInvokeEntry.proto";

message CombatInvocationsNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 354;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated CombatInvokeEntry invoke_list = 14;
}

import "CombatTypeArgument.proto";
import "ForwardType.proto";

message CombatInvokeEntry {
  ForwardType forward_type = 11;
  CombatTypeArgument argument_type = 9;
  bytes combat_data = 7;
}


enum CombatTypeArgument {
  COMBAT_TYPE_ARGUMENT_NONE = 0;
  COMBAT_TYPE_ARGUMENT_EVT_BEING_HIT = 1;
  COMBAT_TYPE_ARGUMENT_ANIMATOR_STATE_CHANGED = 2;
  COMBAT_TYPE_ARGUMENT_FACE_TO_DIR = 3;
  COMBAT_TYPE_ARGUMENT_SET_ATTACK_TARGET = 4;
  COMBAT_TYPE_ARGUMENT_RUSH_MOVE = 5;
  COMBAT_TYPE_ARGUMENT_ANIMATOR_PARAMETER_CHANGED = 6;
  COMBAT_TYPE_ARGUMENT_ENTITY_MOVE = 7;
  COMBAT_TYPE_ARGUMENT_SYNC_ENTITY_POSITION = 8;
  COMBAT_TYPE_ARGUMENT_STEER_MOTION_INFO = 9;
  COMBAT_TYPE_ARGUMENT_FORCE_SET_POS_INFO = 10;
  COMBAT_TYPE_ARGUMENT_COMPENSATE_POS_DIFF = 11;
  COMBAT_TYPE_ARGUMENT_MONSTER_DO_BLINK = 12;
  COMBAT_TYPE_ARGUMENT_FIXED_RUSH_MOVE = 13;
  COMBAT_TYPE_ARGUMENT_SYNC_TRANSFORM = 14;
  COMBAT_TYPE_ARGUMENT_LIGHT_CORE_MOVE = 15;
  COMBAT_TYPE_ARGUMENT_BEING_HEALED_NTF = 16;
  COMBAT_TYPE_ARGUMENT_SKILL_ANCHOR_POSITION_NTF = 17;
  COMBAT_TYPE_ARGUMENT_GRAPPLING_HOOK_MOVE = 18;
}


message CombineDataNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 677;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint32 combine_id_list = 7;
}


message CombineFormulaDataNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 665;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 combine_id = 6;
  bool is_locked = 8;
}


message CombineReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 675;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint64 avatar_guid = 6;
  uint32 combine_id = 5;
  uint32 combine_count = 15;
}

import "ItemParam.proto";

message CombineRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 634;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated ItemParam total_return_item_list = 11;
  repeated ItemParam total_extra_item_list = 13;
  repeated ItemParam total_random_item_list = 6;
  uint64 avatar_guid = 7;
  uint32 combine_count = 2;
  uint32 combine_id = 10;
  repeated ItemParam cost_item_list = 15;
  int32 retcode = 1;
  repeated ItemParam result_item_list = 4;
}


message CommonPlayerTipsNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8167;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 notify_type = 15;
  repeated string text_map_id_list = 8;
}


enum CompoundBoostTakeStatusType {
  COMPOUND_BOOST_TAKE_STATUS_TYPE_NONE = 0;
  COMPOUND_BOOST_TAKE_STATUS_TYPE_BOOST_ONLY = 1;
  COMPOUND_BOOST_TAKE_STATUS_TYPE_BOOST_AND_TAKE = 2;
  COMPOUND_BOOST_TAKE_STATUS_TYPE_BAG_FULL = 3;
}

import "CompoundQueueData.proto";

message CompoundDataNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 164;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated CompoundQueueData compound_queue_data_list = 7;
  repeated uint32 unlock_compound_list = 11;
}


message CompoundQueueData {
  uint32 wait_count = 5;
  uint32 output_time = 14;
  uint32 output_count = 10;
  uint32 compound_id = 12;
}


message CompoundUnlockNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 106;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 compound_id = 7;
}


message ContentAuditAuxiliaryField {
  string name = 1;
  string value = 2;
}


message ContentAuditData {
  string type = 1;
  string content = 2;
  uint32 auto_pass_time = 3;
}

import "ContentAuditData.proto";

message ContentAuditField {
  repeated ContentAuditData segment_list = 1;
  string name = 2;
}

import "AuditState.proto";

message ContentAuditInfo {
  bool is_open = 1;
  string content = 2;
  uint32 submit_count = 3;
  AuditState audit_state = 4;
  uint32 submit_limit = 5;
}

import "CookRecipeData.proto";

message CookDataNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 133;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated CookRecipeData recipe_data_list = 15;
  uint32 grade = 9;
}


message CookGradeDataNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 180;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 grade = 13;
}


message CookRecipeData {
  uint32 proficiency = 8;
  uint32 recipe_id = 14;
}

import "CookRecipeData.proto";

message CookRecipeDataNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 110;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  CookRecipeData recipe_data = 1;
}


message CoopCg {
  uint32 id = 5;
  bool is_unlock = 7;
}


message CoopCgShowNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1951;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint32 cg_list = 14;
}


message CoopCgUpdateNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1962;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint32 cg_list = 8;
}

import "CoopCg.proto";
import "CoopPoint.proto";
import "CoopReward.proto";

message CoopChapter {
  enum State {
    STATE_CLOSE = 0;
    STATE_COND_NOT_MEET = 1;
    STATE_COND_MEET = 2;
    STATE_ACCEPT = 3;
  }

  uint32 id = 9;
  repeated CoopPoint coop_point_list = 12;
  repeated uint32 finish_dialog_list = 6;
  State state = 7;
  uint32 total_end_count = 11;
  repeated CoopReward coop_reward_list = 3;
  repeated uint32 lock_reason_list = 4;
  repeated CoopCg coop_cg_list = 2;
  map<uint32, uint32> seen_ending_map = 15;
  uint32 finished_end_count = 8;
}

import "CoopChapter.proto";

message CoopChapterUpdateNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1967;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated CoopChapter chapter_list = 4;
}

import "CoopChapter.proto";

message CoopDataNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1994;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  bool is_have_progress = 11;
  uint32 cur_coop_point = 1;
  repeated uint32 viewed_chapter_list = 6;
  repeated CoopChapter chapter_list = 3;
}


message CoopPoint {
  enum State {
    STATE_UNSTARTED = 0;
    STATE_STARTED = 1;
    STATE_FINISHED = 2;
  }

  uint32 self_confidence = 6;
  State state = 14;
  uint32 id = 4;
}

import "CoopPoint.proto";

message CoopPointUpdateNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1958;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  CoopPoint coop_point = 8;
}


message CoopProgressUpdateNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1987;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 cur_coop_point = 4;
  bool is_have_progress = 8;
}


message CoopReward {
  enum State {
    STATE_UNLOCK = 0;
    STATE_LOCK = 1;
    STATE_TAKEN = 2;
  }

  uint32 id = 5;
  State state = 6;
}

import "CoopReward.proto";

message CoopRewardUpdateNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1984;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated CoopReward reward_list = 14;
}

import "CreateGadgetInfo.proto";
import "Vector.proto";

message CreateEntityInfo {
  uint32 level = 5;
  Vector pos = 6;
  Vector rot = 7;
  uint32 scene_id = 10;
  uint32 room_id = 11;
  uint32 client_unique_id = 12;
  oneof entity {
    uint32 monster_id = 1;
    uint32 npc_id = 2;
    uint32 gadget_id = 3;
    uint32 item_id = 4;
  }
  oneof entity_create_info {
    CreateGadgetInfo gadget = 13;
  }
}

import "GadgetBornType.proto";

message CreateGadgetInfo {
  message Chest {
    uint32 chest_drop_id = 1;
    bool is_show_cutscene = 2;
  }

  GadgetBornType born_type = 1;
  Chest chest = 2;
}


enum CreateGadgetReason {
  CREATE_GADGET_REASON_NONE = 0;
  CREATE_GADGET_REASON_PLAYER = 1;
  CREATE_GADGET_REASON_MISSION = 2;
  CREATE_GADGET_REASON_GM = 3;
}

import "ServerMassiveEntity.proto";

message CreateMassiveEntityNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 353;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated ServerMassiveEntity massive_entity_list = 3;
}

import "ClientMassiveEntity.proto";

message CreateMassiveEntityReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 311;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated ClientMassiveEntity massive_entity_list = 3;
}


message CreateMassiveEntityRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 350;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 10;
}


enum CreateReason {
  CREATE_REASON_NONE = 0;
  CREATE_REASON_QUEST = 1;
  CREATE_REASON_ENERGY = 2;
}

import "Vector.proto";

message CreateVehicleReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 807;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  Vector pos = 11;
  uint32 vehicle_id = 4;
  uint32 scene_point_id = 3;
  Vector rot = 6;
}


message CreateVehicleRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 817;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 entity_id = 5;
  uint32 vehicle_id = 8;
  int32 retcode = 2;
}

import "CrucibleBattleUidInfo.proto";
import "Vector.proto";

message CrucibleActivityDetailInfo {
  uint32 battle_world_level = 5;
  uint32 cost_time = 7;
  Vector pos = 9;
  repeated CrucibleBattleUidInfo uid_info_list = 11;
}

import "ProfilePicture.proto";

message CrucibleBattleUidInfo {
  ProfilePicture profile_picture = 8;
  uint32 uid = 14;
  uint32 icon = 4;
  string online_id = 13;
  string nickname = 3;
}

import "CrystalLinkLevelInfo.proto";

message CrystalLinkActivityDetailInfo {
  repeated CrystalLinkLevelInfo level_info_list = 5;
  uint32 difficulty_id = 12;
}


message CrystalLinkAvatarInfo {
  uint64 avatar_id = 10;
  bool is_trial = 15;
}


message CrystalLinkBuffInfo {
  uint32 Unk3300_BGKLAFCBNOA = 6;
  uint32 Unk3300_PFLAOCMEFIL = 4;
}


message CrystalLinkDungeonAvatarInfo {
  uint64 avatar_guid = 4;
  bool is_trial = 5;
}

import "CrystalLinkBuffInfo.proto";
import "CrystalLinkDungeonAvatarInfo.proto";

message CrystalLinkDungeonInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8408;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated CrystalLinkBuffInfo buff_info_list = 11;
  uint32 level_id = 5;
  bool is_upper_part = 13;
  uint32 difficulty_id = 14;
  repeated CrystalLinkDungeonAvatarInfo dungeon_avatar_info_list = 12;
  uint32 init_gallery_progress = 4;
}


message CrystalLinkDungeonSettleInfo {
  uint32 level_id = 9;
  uint32 final_score = 12;
  uint32 kill_normal_monster_num = 8;
  uint32 difficulty_id = 3;
  uint32 kill_elite_monster_num = 2;
  bool is_new_record = 10;
}

import "CrystalLinkTeamInfo.proto";

message CrystalLinkEnterDungeonReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8179;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated CrystalLinkTeamInfo team_info_list = 13;
  uint32 difficulty_id = 5;
  uint32 level_id = 6;
}

import "CrystalLinkTeamInfo.proto";

message CrystalLinkEnterDungeonRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8628;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 5;
  uint32 difficulty_id = 15;
  uint32 level_id = 7;
  repeated CrystalLinkTeamInfo team_info_list = 12;
}

import "CrystalLinkTeamInfo.proto";

message CrystalLinkLevelInfo {
  bool is_open = 4;
  repeated CrystalLinkTeamInfo team_info_list = 3;
  uint32 level_id = 14;
  uint32 best_score = 7;
}


message CrystalLinkRestartDungeonReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8177;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}


message CrystalLinkRestartDungeonRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8741;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 9;
}

import "CrystalLinkAvatarInfo.proto";
import "CrystalLinkBuffInfo.proto";

message CrystalLinkTeamInfo {
  repeated CrystalLinkAvatarInfo avatar_info_list = 14;
  repeated CrystalLinkBuffInfo buff_info_list = 12;
}


message CurVehicleInfo {
  uint32 entity_id = 1;
  uint32 pos = 2;
}


message CustomCommonNodeInfo {
  int32 parent_index = 1;
  uint32 config_id = 2;
  string slot_identifier = 3;
}

import "CustomDungeonRoom.proto";
import "CustomDungeonSetting.proto";

message CustomDungeon {
  uint32 dungeon_id = 2;
  repeated CustomDungeonRoom room_list = 7;
  CustomDungeonSetting setting = 8;
  uint64 dungeon_guid = 3;
}


message CustomDungeonAbstract {
  uint32 Unk3300_EJGBHGHLFPI = 7;
  uint32 last_publish_time = 12;
  map<uint32, uint32> brick_statistics_map = 2;
  uint32 first_publish_time = 8;
  uint32 Unk3300_JPFIHKECLMF = 4;
}


message CustomDungeonAbstractMuipData {
  uint32 first_publish_time = 1;
  uint32 last_publish_time = 2;
  map<uint32, uint32> brick_statistics_map = 3;
}

import "CustomDungeonBanType.proto";

message CustomDungeonBanInfo {
  uint32 expire_time = 15;
  CustomDungeonBanType ban_type = 2;
  uint64 dungeon_guid = 13;
}


enum CustomDungeonBanType {
  CUSTOM_DUNGEON_BAN_TYPE_NONE = 0;
  CUSTOM_DUNGEON_BAN_TYPE_LAYOUT = 1;
}

import "CustomDungeonBriefMuipData.proto";

message CustomDungeonBatchBriefMuipData {
  repeated CustomDungeonBriefMuipData brief_list = 1;
}


message CustomDungeonBattleRecordMuipData {
  uint64 dungeon_guid = 1;
  uint32 min_cost_time = 2;
}


message CustomDungeonBattleRecordNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 6225;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint64 dungeon_guid = 1;
  uint32 min_cost_time = 12;
}

import "Vector.proto";

message CustomDungeonBlock {
  uint32 block_id = 6;
  Vector rot = 12;
  Vector pos = 13;
  uint32 guid = 15;
}

import "CustomDungeonAbstract.proto";
import "CustomDungeonSetting.proto";
import "CustomDungeonSocial.proto";
import "CustomDungeonState.proto";

message CustomDungeonBrief {
  uint64 dungeon_guid = 14;
  CustomDungeonAbstract abstract = 8;
  repeated uint32 tag_list = 4;
  bool is_psn_platform = 9;
  CustomDungeonSocial social = 10;
  CustomDungeonState state = 2;
  uint32 battle_min_cost_time = 15;
  uint32 dungeon_id = 3;
  CustomDungeonSetting setting = 7;
  uint32 last_save_time = 12;
}

import "CustomDungeonAbstractMuipData.proto";
import "CustomDungeonSettingMuipData.proto";
import "CustomDungeonSocialMuipData.proto";

message CustomDungeonBriefMuipData {
  uint64 dungeon_guid = 1;
  uint32 dungeon_id = 2;
  string creator_nickname = 3;
  repeated uint32 tag_list = 4;
  CustomDungeonSettingMuipData setting = 5;
  CustomDungeonAbstractMuipData abstract = 6;
  CustomDungeonSocialMuipData social = 7;
}


enum CustomDungeonEvent {
  CUSTOM_DUNGEON_EVENT_NONE = 0;
  CUSTOM_DUNGEON_EVENT_OFFICIAL_RESTART = 1;
  CUSTOM_DUNGEON_EVENT_OUT_STUCK = 2;
}


enum CustomDungeonFinishType {
  CUSTOM_DUNGEON_FINISH_TYPE_PLAY_NORMAL = 0;
  CUSTOM_DUNGEON_FINISH_TYPE_PLAY_TRY = 1;
  CUSTOM_DUNGEON_FINISH_TYPE_EDIT_TRY = 2;
  CUSTOM_DUNGEON_FINISH_TYPE_SELF_PLAY_NORMAL = 3;
}

import "EnterCustomDungeonType.proto";
import "TryCustomDungeonType.proto";

message CustomDungeonOfficialNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 6236;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  TryCustomDungeonType try_type = 2;
  EnterCustomDungeonType enter_type = 1;
  repeated uint32 official_black_coin_list = 5;
}

import "CustomDungeon.proto";
import "EnterCustomDungeonType.proto";
import "TryCustomDungeonType.proto";

message CustomDungeonRecoverNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 6228;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  CustomDungeon custom_dungeon = 15;
  EnterCustomDungeonType enter_type = 1;
  TryCustomDungeonType try_type = 8;
  repeated uint32 official_black_coin_list = 3;
}

import "ChallengeBrief.proto";
import "CustomDungeonFinishType.proto";

message CustomDungeonResultInfo {
  bool is_liked = 13;
  bool is_arrive_finish = 2;
  uint64 dungeon_guid = 5;
  CustomDungeonFinishType finish_type = 8;
  repeated ChallengeBrief child_challenge_list = 1;
  bool is_stored = 6;
  uint32 time_cost = 9;
  uint32 got_coin_num = 4;
}

import "CustomDungeonBlock.proto";

message CustomDungeonRoom {
  uint32 room_id = 15;
  repeated CustomDungeonBlock block_list = 11;
}


message CustomDungeonSetting {
  uint32 start_room_id = 3;
  uint32 time_limit = 9;
  repeated uint32 open_room_list = 14;
  uint32 coin_limit = 5;
  bool is_forbid_skill = 7;
  bool is_arrive_finish = 6;
  uint32 life_num = 8;
}


message CustomDungeonSettingMuipData {
  bool is_arrive_finish = 1;
  uint32 coin_limit = 2;
  uint32 time_limit = 3;
  bool is_forbid_skill = 4;
  uint32 life_num = 5;
}


message CustomDungeonSocial {
  uint32 win_num = 3;
  uint32 play_num = 11;
  uint32 like_num = 15;
  uint32 store_num = 14;
}


message CustomDungeonSocialMuipData {
  uint32 play_num = 1;
  uint32 like_num = 2;
  uint32 store_num = 3;
  uint32 win_num = 4;
}


enum CustomDungeonState {
  CUSTOM_DUNGEON_STATE_EDIT = 0;
  CUSTOM_DUNGEON_STATE_SELF_PASS = 1;
  CUSTOM_DUNGEON_STATE_PUBLISHED = 2;
}

import "CustomDungeonBrief.proto";

message CustomDungeonUpdateNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 6230;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  CustomDungeonBrief dungeon_brief = 15;
}


message CustomDungeonVerify {
  uint32 uid = 3;
  string region = 13;
  uint32 timestamp = 5;
  uint64 dungeon_guid = 1;
  uint32 lang = 6;
}

import "CustomCommonNodeInfo.proto";

message CustomGadgetTreeInfo {
  repeated CustomCommonNodeInfo node_list = 1;
}

import "CutSceneExtraParam.proto";

message CutSceneBeginNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 283;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 cutscene_id = 14;
  repeated CutSceneExtraParam extra_param_list = 13;
  bool is_wait_others = 1;
}


message CutSceneEndNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 281;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 cutscene_id = 4;
  int32 retcode = 11;
}


message CutSceneExtraParam {
  repeated double detail_param_list = 13;
}


message CutSceneFinishNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 284;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 cutscene_id = 5;
}


message CylinderRegionSize {
  float radius = 7;
  float height = 15;
}

import "DungeonEntryInfo.proto";

message DailyDungeonEntryInfo {
  DungeonEntryInfo recommend_dungeon_entry_info = 6;
  uint32 dungeon_entry_config_id = 10;
  uint32 recommend_dungeon_id = 5;
  uint32 dungeon_entry_id = 12;
}


message DailyTaskDataNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 124;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 score_reward_id = 13;
  uint32 finished_num = 8;
  bool is_taken_score_reward = 5;
}


message DailyTaskFilterCityReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 101;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 city_id = 7;
}


message DailyTaskFilterCityRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 138;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 city_id = 7;
  int32 retcode = 6;
}


message DailyTaskInfo {
  uint32 reward_id = 7;
  uint32 finish_progress = 12;
  bool is_finished = 2;
  uint32 daily_task_id = 5;
  uint32 progress = 10;
}

import "DailyTaskInfo.proto";

message DailyTaskProgressNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 149;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  DailyTaskInfo info = 12;
}


message DailyTaskScoreRewardNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 191;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 reward_id = 8;
}


message DailyTaskUnlockedCitiesNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 169;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint32 unlocked_city_list = 15;
}

import "ResVersionConfig.proto";

message DataResVersionNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 153;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  enum DataResVersionOpType {
    DATA_RES_VERSION_OP_TYPE_NONE = 0;
    DATA_RES_VERSION_OP_TYPE_RELOGIN = 1;
    DATA_RES_VERSION_OP_TYPE_MP_RELOGIN = 2;
  }

  uint32 client_silence_data_version = 13;
  DataResVersionOpType op_type = 6;
  string client_silence_version_suffix = 3;
  string client_version_suffix = 9;
  bool is_data_need_relogin = 15;
  string client_silence_md5 = 12;
  uint32 client_data_version = 5;
  string client_md5 = 2;
  ResVersionConfig res_version_config = 7;
}

import "DealAddFriendResultType.proto";

message DealAddFriendReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4061;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  DealAddFriendResultType deal_add_friend_result = 7;
  uint32 target_uid = 10;
}


enum DealAddFriendResultType {
  DEAL_ADD_FRIEND_RESULT_TYPE_REJECT = 0;
  DEAL_ADD_FRIEND_RESULT_TYPE_ACCEPT = 1;
}

import "DealAddFriendResultType.proto";

message DealAddFriendRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4047;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 target_uid = 15;
  DealAddFriendResultType deal_add_friend_result = 4;
  int32 retcode = 11;
}


message DeathZoneInfo {
  uint32 id = 3;
  bool is_open = 12;
}

import "DeathZoneInfo.proto";

message DeathZoneInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 6291;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated DeathZoneInfo death_zone_info_list = 15;
}


message DeathZoneObserveNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3062;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 source_entity_id = 2;
  uint32 target_entity_id = 5;
}


message DebugNotify {
  // enum Enum {
  //   option allow_alias = true;
  //   ZREO = 0;
  //   CMD_ID = 101;
  //   TARGET_SERVICE = 101;
  //   ENET_CHANNEL_ID = 2;
  //   ENET_IS_RELIABLE = 1;
  // }

  enum Retcode {
    SUCC = 0;
    FAIL = 1;
  }

  uint32 id = 1;
  string name = 2;
  Retcode retcode = 3;
}


message DelBackupAvatarTeamReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1698;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 backup_avatar_team_id = 10;
}


message DelBackupAvatarTeamRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1666;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 backup_avatar_team_id = 9;
  int32 retcode = 3;
}


message DeleteFriendNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4073;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 target_uid = 5;
}


message DeleteFriendReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4027;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 target_uid = 6;
}


message DeleteFriendRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4039;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 target_uid = 12;
  int32 retcode = 2;
}


message DeliveryActivityDetailInfo {
  uint32 day_index = 1;
  bool is_taken_reward = 11;
  repeated uint32 finished_delivery_quest_index = 4;
}


message DelMailReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1443;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated uint32 mail_id_list = 2;
}


message DelMailRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1461;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 2;
  repeated uint32 mail_id_list = 11;
}


message DelScenePlayTeamEntityNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3237;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint32 del_entity_id_list = 5;
  uint32 scene_id = 10;
}


message DelTeamEntityNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 393;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint32 del_entity_id_list = 14;
  uint32 scene_id = 10;
}

import "Vector.proto";

message DeshretObeliskChestInfo {
  uint32 group_id = 9;
  uint32 config_id = 8;
  uint32 scene_id = 7;
  Vector pos = 3;
}

import "DeshretObeliskChestInfo.proto";

message DeshretObeliskChestInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 867;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated DeshretObeliskChestInfo chest_info_list = 6;
}


message DeshretObeliskGadgetInfo {
  repeated uint32 argument_list = 1;
}

import "ClientMassiveEntity.proto";

message DestroyMassiveEntityNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 324;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated ClientMassiveEntity massive_entity_list = 15;
}

import "MaterialInfo.proto";

message DestroyMaterialReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 685;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated MaterialInfo material_list = 1;
}


message DestroyMaterialRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 608;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint32 item_id_list = 10;
  repeated uint32 item_count_list = 12;
  int32 retcode = 13;
}


message DigActivityChangeGadgetStateReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8372;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 entity_id = 10;
}


message DigActivityChangeGadgetStateRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8289;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 12;
  uint32 entity_id = 14;
}

import "DigMarkPoint.proto";

message DigActivityDetailInfo {
  uint32 stage_id = 3;
  repeated DigMarkPoint dig_mark_point_list = 12;
  repeated uint32 stage_id_list = 5;
}

import "DigMarkPoint.proto";

message DigActivityMarkPointChangeNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8871;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated DigMarkPoint dig_mark_point_list = 1;
}

import "Vector.proto";

message DigMarkPoint {
  Vector pos = 11;
  uint32 bundle_id = 3;
  Vector rot = 14;
}


message DisableRoguelikeTrapNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8839;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 card_id = 11;
}


message DoGachaReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1556;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  string gacha_tag = 14;
  uint32 gacha_schedule_id = 6;
  uint32 gacha_type = 1;
  uint32 gacha_random = 9;
  uint32 gacha_times = 3;
}

import "GachaItem.proto";

message DoGachaRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1519;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  bool Unk3300_OHFMHIHJHPJ = 1812;
  uint32 Unk3300_JLELMHELIDC = 3;
  repeated GachaItem gacha_item_list = 9;
  bool Unk3300_HBILIAEIHNK = 1887;
  uint32 gacha_type = 10;
  uint32 new_gacha_random = 6;
  uint32 wish_progress = 1;
  uint32 wish_max_progress = 5;
  uint32 gacha_times = 4;
  uint32 gacha_times_limit = 15;
  uint32 wish_item_id = 12;
  uint32 Unk3300_DBFMKAMNPCL = 13;
  uint32 Unk3300_JLBFLPEMAPP = 8;
  uint32 Unk3300_MEDMCPFCIOO = 2;
  uint32 Unk3300_HLANONBCBLM = 1550;
  uint32 Unk3300_PLFMMOFNGAG = 7;
  uint32 gacha_schedule_id = 14;
  uint32 daily_gacha_times = 467;
  int32 retcode = 11;
}


message DoRoguelikeDungeonCardGachaReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8740;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 cell_id = 5;
  uint32 dungeon_id = 8;
}


message DoRoguelikeDungeonCardGachaRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8144;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 11;
  bool is_can_refresh = 6;
  repeated uint32 card_list = 15;
}


message DoSetPlayerBornDataNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 176;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }
}


message DraftGuestReplyInviteNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5447;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  bool is_agree = 1;
  uint32 guest_uid = 13;
  uint32 draft_id = 2;
}


message DraftGuestReplyInviteReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5443;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  bool is_agree = 4;
  uint32 draft_id = 10;
}


message DraftGuestReplyInviteRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5461;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 7;
  uint32 draft_id = 13;
  bool is_agree = 8;
}


message DraftGuestReplyTwiceConfirmNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5499;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  bool is_agree = 14;
  uint32 draft_id = 15;
  uint32 guest_uid = 11;
}


message DraftGuestReplyTwiceConfirmReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5427;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  bool is_agree = 8;
  uint32 draft_id = 13;
}


message DraftGuestReplyTwiceConfirmRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5439;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 draft_id = 5;
  int32 retcode = 11;
  bool is_agree = 1;
}

import "DraftInviteFailReason.proto";

message DraftInviteFailInfo {
  DraftInviteFailReason reason = 6;
  uint32 uid = 10;
}


enum DraftInviteFailReason {
  DRAFT_INVITE_FAIL_REASON_UNKNOWN = 0;
  DRAFT_INVITE_FAIL_REASON_ACTIVITY_NOT_OPEN = 1;
  DRAFT_INVITE_FAIL_REASON_ACTIVITY_PLAY_NOT_OPEN = 2;
  DRAFT_INVITE_FAIL_REASON_SCENE_NOT_MEET = 3;
  DRAFT_INVITE_FAIL_REASON_WORLD_NOT_MEET = 4;
  DRAFT_INVITE_FAIL_REASON_PLAY_LIMIT_NOT_MEET = 5;
}


message DraftInviteResultNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5478;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  bool is_all_agree = 11;
  uint32 draft_id = 12;
}


message DraftOwnerInviteNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5500;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 invite_deadline_time = 5;
  uint32 draft_id = 7;
}


message DraftOwnerStartInviteReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5456;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 draft_id = 14;
}

import "DraftInviteFailInfo.proto";

message DraftOwnerStartInviteRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5419;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated DraftInviteFailInfo invite_fail_info_list = 12;
  uint32 draft_id = 4;
  int32 retcode = 2;
  uint32 wrong_uid = 6;
}


message DraftOwnerTwiceConfirmNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5457;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 draft_id = 6;
  uint32 twice_confirm_deadline_time = 5;
}


message DraftTwiceConfirmResultNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5448;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  bool is_all_agree = 14;
  uint32 draft_id = 1;
}

import "DragonSpineChapterInfo.proto";

message DragonSpineActivityDetailInfo {
  bool is_content_closed = 9;
  uint32 Unk3300_FOHJDGCAKEK = 3;
  uint32 Unk3300_PPABOFMIGNM = 10;
  repeated DragonSpineChapterInfo chapter_info_list = 7;
  uint32 Unk3300_NEOCMGJCEOJ = 4;
  uint32 Unk3300_IMLKIJAOADF = 12;
  uint32 weapon_enhance_level = 8;
}


message DragonSpineChapterFinishNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2149;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 chapter_id = 14;
  uint32 weapon_enhance_level = 12;
  uint32 schedule_id = 5;
}


message DragonSpineChapterInfo {
  uint32 open_time = 1;
  uint32 progress = 12;
  uint32 chapter_id = 6;
  uint32 finished_mission_num = 5;
  bool is_open = 2;
}


message DragonSpineChapterOpenNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2123;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 schedule_id = 9;
  uint32 chapter_id = 11;
}


message DragonSpineChapterProgressChangeNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2035;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 chapter_id = 9;
  uint32 schedule_id = 3;
  uint32 cur_progress = 11;
}


message DragonSpineCoinChangeNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2086;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 Unk3300_IMLKIJAOADF = 11;
  uint32 schedule_id = 15;
  uint32 Unk3300_FOHJDGCAKEK = 3;
  uint32 Unk3300_NEOCMGJCEOJ = 2;
}

import "Vector.proto";

message DropHintNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 646;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint32 item_id_list = 12;
  Vector position = 9;
}

import "StoreType.proto";
import "Vector.proto";

message DropItemReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 657;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  Vector pos = 12;
  StoreType store_type = 13;
  uint32 count = 4;
  uint64 guid = 9;
}

import "StoreType.proto";

message DropItemRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 627;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint64 guid = 6;
  int32 retcode = 4;
  StoreType store_type = 2;
}

import "AvatarInfo.proto";

message DungeonCandidateTeamAvatar {
  AvatarInfo avatar_info = 6;
  uint32 player_uid = 7;
}


message DungeonCandidateTeamChangeAvatarReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 982;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated uint64 avatar_guid_list = 7;
}


message DungeonCandidateTeamChangeAvatarRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 911;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 11;
}


message DungeonCandidateTeamCreateReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 933;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 dungeon_id = 3;
  uint32 point_id = 1;
}


message DungeonCandidateTeamCreateRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 910;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 1;
}

import "DungeonCandidateTeamPlayerDismissReason.proto";

message DungeonCandidateTeamDismissNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 903;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  DungeonCandidateTeamPlayerDismissReason reason = 7;
  uint32 player_uid = 1;
}

import "DungeonCandidateTeamAvatar.proto";
import "DungeonCandidateTeamPlayerState.proto";

message DungeonCandidateTeamInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 917;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint32 ready_player_uid = 2;
  uint32 match_type = 12;
  uint32 dungeon_id = 8;
  repeated DungeonCandidateTeamAvatar avatar_list = 1;
  map<uint32, DungeonCandidateTeamPlayerState> player_state_map = 10;
}


message DungeonCandidateTeamInviteNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 905;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 valid_deadline_time_sec = 11;
  uint32 player_uid = 4;
  uint32 dungeon_id = 13;
}


message DungeonCandidateTeamInviteReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 980;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated uint32 player_uids = 4;
}


message DungeonCandidateTeamInviteRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 946;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint32 invalid_player_uids = 11;
  int32 retcode = 4;
}


enum DungeonCandidateTeamInviteState {
  DUNGEON_CANDIDATE_TEAM_INVITE_STATE_NONE = 0;
  DUNGEON_CANDIDATE_TEAM_INVITE_STATE_SEND = 1;
  DUNGEON_CANDIDATE_TEAM_INVITE_STATE_ACCEPT = 2;
  DUNGEON_CANDIDATE_TEAM_INVITE_STATE_REFUSE = 3;
}


message DungeonCandidateTeamKickReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 975;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 player_uid = 7;
}


message DungeonCandidateTeamKickRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 934;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 7;
}


message DungeonCandidateTeamLeaveReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 995;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}


message DungeonCandidateTeamLeaveRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 964;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 12;
}


enum DungeonCandidateTeamPlayerDismissReason {
  DUNGEON_CANDIDATE_TEAM_PLAYER_DISMISS_REASON_TPDR_NORMAL = 0;
  DUNGEON_CANDIDATE_TEAM_PLAYER_DISMISS_REASON_TPDR_DIE = 1;
  DUNGEON_CANDIDATE_TEAM_PLAYER_DISMISS_REASON_TPDR_DISCONNECT = 2;
}

import "DungeonCandidateTeamPlayerLeaveReason.proto";

message DungeonCandidateTeamPlayerLeaveNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 972;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 player_uid = 7;
  DungeonCandidateTeamPlayerLeaveReason reason = 1;
}


enum DungeonCandidateTeamPlayerLeaveReason {
  DUNGEON_CANDIDATE_TEAM_PLAYER_LEAVE_REASON_TPLR_NORMAL = 0;
  DUNGEON_CANDIDATE_TEAM_PLAYER_LEAVE_REASON_TPLR_DIE = 1;
  DUNGEON_CANDIDATE_TEAM_PLAYER_LEAVE_REASON_TPLR_BE_KICK = 2;
  DUNGEON_CANDIDATE_TEAM_PLAYER_LEAVE_REASON_TPLR_DISCONNECT = 3;
}


enum DungeonCandidateTeamPlayerState {
  DUNGEON_CANDIDATE_TEAM_PLAYER_STATE_IDLE = 0;
  DUNGEON_CANDIDATE_TEAM_PLAYER_STATE_CHANGING_AV_ATAR = 1;
  DUNGEON_CANDIDATE_TEAM_PLAYER_STATE_READY = 2;
}


message DungeonCandidateTeamRefuseNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 994;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 player_uid = 8;
}


message DungeonCandidateTeamReplyInviteReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 967;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  bool is_accept = 1;
}


message DungeonCandidateTeamReplyInviteRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 915;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  bool is_trans_point = 1;
  int32 retcode = 5;
}


message DungeonCandidateTeamSetChangingAvatarReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 908;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  bool is_changing_avatar = 11;
}


message DungeonCandidateTeamSetChangingAvatarRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 909;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 9;
}


message DungeonCandidateTeamSetReadyReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 921;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  bool is_ready = 12;
}


message DungeonCandidateTeamSetReadyRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 922;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 4;
}


message DungeonChallengeBeginNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 976;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 challenge_index = 3;
  uint32 father_index = 13;
  uint32 group_id = 15;
  repeated uint32 uid_list = 8;
  uint32 challenge_id = 7;
  repeated uint32 param_list = 2;
}

import "ChallengeFinishType.proto";
import "ChannelerSlabLoopDungeonResultInfo.proto";
import "CustomDungeonResultInfo.proto";
import "EffigyChallengeDungeonResultInfo.proto";
import "PotionDungeonResultInfo.proto";
import "StrengthenPointData.proto";

message DungeonChallengeFinishNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 916;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  bool is_new_record = 9;
  uint32 current_value = 5;
  ChallengeFinishType finish_type = 3;
  map<uint32, StrengthenPointData> strengthen_point_data_map = 11;
  uint32 challenge_record_type = 2;
  bool is_success = 8;
  uint32 challenge_index = 12;
  uint32 time_cost = 7;
  oneof detail {
    ChannelerSlabLoopDungeonResultInfo channeller_slab_loop_dungeon_result_info = 1545;
    EffigyChallengeDungeonResultInfo effigy_challenge_dungeon_result_info = 76;
    PotionDungeonResultInfo potion_dungeon_result_info = 216;
    CustomDungeonResultInfo custom_dungeon_result_info = 1678;
  }
}


message DungeonDataNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 990;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  map<uint32, uint32> dungeon_data_map = 7;
}

import "PlayerDieOption.proto";

message DungeonDieOptionReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 939;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  PlayerDieOption die_option = 5;
  bool is_quit_immediately = 14;
}

import "PlayerDieOption.proto";

message DungeonDieOptionRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 948;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 revive_count = 2;
  PlayerDieOption die_option = 7;
  int32 retcode = 13;
}


message DungeonEnterPosInfo {
  uint32 quest_id = 6;
  uint32 point_id = 14;
}


enum DungeonEntryBlockReason {
  DUNGEON_ENTRY_BLOCK_REASON_NONE = 0;
  DUNGEON_ENTRY_BLOCK_REASON_LEVEL = 1;
  DUNGEON_ENTRY_BLOCK_REASON_QUEST = 2;
  DUNGEON_ENTRY_BLOCK_REASON_MULTIPLE = 3;
}

import "DungeonEntryBlockReason.proto";

message DungeonEntryCond {
  DungeonEntryBlockReason cond_reason = 2;
  uint32 param1 = 1;
}

import "WeeklyBossResinDiscountInfo.proto";

message DungeonEntryInfo {
  uint32 end_time = 14;
  uint32 max_boss_chest_num = 9;
  bool is_passed = 13;
  WeeklyBossResinDiscountInfo weekly_boss_resin_discount_info = 6;
  uint32 dungeon_id = 8;
  uint32 boss_chest_num = 5;
  uint32 next_refresh_time = 10;
  uint32 next_boss_chest_refresh_time = 3;
  uint32 start_time = 11;
}

import "Uint32Pair.proto";

message DungeonEntryInfoReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 979;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 scene_id = 2;
  repeated Uint32Pair scene_point_id_list = 3;
  uint32 point_id = 14;
}

import "DungeonEntryInfo.proto";
import "DungeonEntryPointInfo.proto";

message DungeonEntryInfoRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 930;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated DungeonEntryInfo dungeon_entry_list = 8;
  uint32 recommend_dungeon_id = 15;
  repeated DungeonEntryPointInfo dungeon_entry_point_list = 10;
  int32 retcode = 14;
  uint32 point_id = 12;
}

import "DungeonEntryInfo.proto";

message DungeonEntryPointInfo {
  uint32 scene_id = 12;
  repeated DungeonEntryInfo dungeon_entry_list = 14;
  uint32 recommend_dungeon_id = 4;
  uint32 point_id = 1;
}


message DungeonEntryToBeExploreNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3196;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 scene_id = 6;
  uint32 dungeon_entry_scene_point_id = 3;
  uint32 dungeon_entry_config_id = 2;
}


message DungeonFollowNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 937;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 target_uid = 5;
}


message DungeonGetStatueDropReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 989;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}


message DungeonGetStatueDropRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 944;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 1;
}


message DungeonInterruptChallengeReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 991;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 challenge_id = 12;
  uint32 group_id = 5;
  uint32 challenge_index = 10;
}


message DungeonInterruptChallengeRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 993;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 group_id = 10;
  uint32 challenge_id = 5;
  int32 retcode = 12;
  uint32 challenge_index = 14;
}

import "PlayerDieType.proto";
import "StrengthenPointData.proto";

message DungeonPlayerDieNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 927;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  map<uint32, StrengthenPointData> strengthen_point_data_map = 7;
  PlayerDieType die_type = 8;
  uint32 revive_count = 3;
  uint32 wait_time = 4;
  uint32 dungeon_id = 6;
  uint32 murderer_entity_id = 11;
  oneof entity {
    uint32 monster_id = 10;
    uint32 gadget_id = 14;
  }
}

import "PlayerDieType.proto";

message DungeonPlayerDieReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 925;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  PlayerDieType die_type = 4;
  uint32 dungeon_id = 6;
}


message DungeonPlayerDieRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 942;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 1;
}


message DungeonRestartInviteNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 963;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 dungeon_id = 8;
  uint32 cd = 5;
  uint32 player_uid = 6;
  uint32 point_id = 12;
}


message DungeonRestartInviteReplyNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 987;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 player_uid = 11;
  bool is_accept = 12;
}


message DungeonRestartInviteReplyReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 904;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  bool is_accept = 2;
}


message DungeonRestartInviteReplyRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 923;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  bool is_trans_point = 14;
  int32 retcode = 10;
  bool is_accept = 6;
}


message DungeonRestartReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 998;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}


message DungeonRestartResultNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 985;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  bool is_add_accept = 9;
}


message DungeonRestartRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 920;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 dungeon_id = 13;
  int32 retcode = 3;
  uint32 point_id = 11;
}


message DungeonReviseLevelNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 966;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 dungeon_id = 2;
  uint32 revise_level = 3;
  uint32 scene_level = 15;
}

import "ExhibitionDisplayInfo.proto";
import "OnlinePlayerInfo.proto";

message DungeonSettleExhibitionInfo {
  OnlinePlayerInfo player_info = 14;
  repeated ExhibitionDisplayInfo card_list = 13;
}

import "ChannelerSlabLoopDungeonResultInfo.proto";
import "CrystalLinkDungeonSettleInfo.proto";
import "DungeonSettleExhibitionInfo.proto";
import "EffigyChallengeDungeonResultInfo.proto";
import "EffigyChallengeV2SettleInfo.proto";
import "InstableSprayDungeonSettleInfo.proto";
import "ParamList.proto";
import "RoguelikeDungeonSettleInfo.proto";
import "StrengthenPointData.proto";
import "SummerTimeV2DungeonSettleInfo.proto";
import "TowerLevelEndNotify.proto";
import "TrialAvatarFirstPassDungeonNotify.proto";
import "WindFieldDungeonSettleInfo.proto";

message DungeonSettleNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 957;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  map<uint32, ParamList> settle_show = 6;
  map<uint32, StrengthenPointData> strengthen_point_data_map = 7;
  repeated DungeonSettleExhibitionInfo exhibition_info_list = 12;
  uint32 use_time = 14;
  bool is_success = 10;
  uint32 close_time = 15;
  uint32 dungeon_id = 9;
  uint32 result = 5;
  repeated uint32 fail_cond_list = 11;
  uint32 create_player_uid = 2;
  oneof detail {
    TowerLevelEndNotify tower_level_end_notify = 1089;
    TrialAvatarFirstPassDungeonNotify trial_avatar_first_pass_dungeon_notify = 1117;
    ChannelerSlabLoopDungeonResultInfo channeller_slab_loop_dungeon_result_info = 1394;
    EffigyChallengeDungeonResultInfo effigy_challenge_dungeon_result_info = 254;
    RoguelikeDungeonSettleInfo roguelike_dungeon_settle_info = 1888;
    CrystalLinkDungeonSettleInfo crystal_link_settle_info = 1840;
    SummerTimeV2DungeonSettleInfo summer_time_v2_dungeon_settle_info = 285;
    InstableSprayDungeonSettleInfo instable_spray_settle_info = 1794;
    WindFieldDungeonSettleInfo wind_field_dungeon_settle_info = 1522;
    EffigyChallengeV2SettleInfo effigy_challenge_v2_settle_info = 1913;
  }
}


message DungeonShowReminderNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 999;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 reminder_id = 12;
}


message DungeonSlipRevivePointActivateReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 924;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 slip_revive_point_id = 8;
}


message DungeonSlipRevivePointActivateRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 949;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 15;
  uint32 slip_revive_point_id = 13;
}


message DungeonWayPointActivateReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 947;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 way_point_id = 14;
}


message DungeonWayPointActivateRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 978;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 1;
  uint32 way_point_id = 10;
}


message DungeonWayPointNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 961;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  bool is_add = 12;
  repeated uint32 active_way_point_list = 2;
}

import "DynamicSVONode.proto";

message DynamicLayerNodes {
  int32 level = 7;
  repeated DynamicSVONode nodes = 4;
}

import "DynamicLayerNodes.proto";

message DynamicNodes {
  repeated DynamicLayerNodes nodes = 4;
}

import "Vector.proto";

message DynamicSVONode {
  int32 area = 3;
  Vector refer_pos = 15;
  int64 index = 2;
}


message EchoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 89;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  string content = 2;
  uint32 seq_id = 3;
}

import "SummerTimeDungeonInfo.proto";

message EchoShellDetailInfo {
  repeated uint32 Unk3300_OOCDFANFFDG = 6;
  repeated uint32 taken_reward_list = 5;
  repeated SummerTimeDungeonInfo summer_time_dungeon_list = 3;
  repeated uint32 Unk3300_NEFBJPKBEHF = 10;
}


message EchoShellInfo {
  uint32 shell_id = 1;
}


message EchoShellTakeRewardReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8049;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 reward_id = 4;
}


message EchoShellTakeRewardRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8265;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 9;
  uint32 reward_id = 5;
}


message EchoShellUpdateNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8891;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 shell_id = 10;
}

import "EffigyDailyInfo.proto";

message EffigyActivityDetailInfo {
  uint32 last_difficulty_id = 8;
  repeated uint32 taken_reward_index_list = 13;
  uint32 cur_score = 5;
  repeated EffigyDailyInfo daily_info_list = 4;
}


message EffigyChallengeDungeonResultInfo {
  uint32 challenge_score = 12;
  uint32 challenge_max_score = 8;
  bool is_success = 2;
  bool is_in_time_limit = 1;
  uint32 challenge_id = 15;
}


message EffigyChallengeInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2113;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 challenge_id = 6;
  uint32 difficulty_id = 2;
  uint32 challenge_score = 11;
  repeated uint32 condition_id_list = 7;
}


message EffigyChallengeResultNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2022;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 challenge_score = 8;
  bool is_success = 4;
  uint32 challenge_id = 13;
  uint32 challenge_max_score = 6;
}


message EffigyChallengeV2ChooseSkillReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 23748;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 challenge_mode_skill_no = 10;
  uint32 level_id = 7;
}


message EffigyChallengeV2ChooseSkillRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 23618;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 challenge_mode_skill_no = 12;
  int32 retcode = 1;
  uint32 level_id = 10;
}

import "EffigyChallengeV2LevelData.proto";

message EffigyChallengeV2DetailInfo {
  repeated EffigyChallengeV2LevelData level_data_list = 1;
}


message EffigyChallengeV2DungeonInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 24761;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 challenge_mode_difficulty = 13;
  uint32 skill_no = 15;
  uint32 level_id = 2;
}


message EffigyChallengeV2EnterDungeonReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 21069;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 challenge_mode_skill_no = 10;
  uint32 challenge_mode_difficulty = 4;
  uint32 level_id = 11;
}


message EffigyChallengeV2EnterDungeonRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 22024;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 challenge_mode_difficulty = 3;
  uint32 challenge_mode_skill_no = 7;
  uint32 level_id = 10;
  int32 retcode = 15;
}


message EffigyChallengeV2LevelData {
  uint32 Unk3300_PPOEMEILBIA = 13;
  bool is_level_open = 4;
  uint32 Unk3300_KJEOADDMJMI = 9;
  uint32 Unk3300_JMGACODMJLG = 2;
  uint32 Unk3300_IJAGOAKOABH = 7;
  uint32 level_id = 12;
}


message EffigyChallengeV2RestartDungeonReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 21293;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}


message EffigyChallengeV2RestartDungeonRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 23467;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 8;
}


message EffigyChallengeV2SettleInfo {
  uint32 challenge_mode_difficulty = 13;
  uint32 Unk3300_MHOIIPJKAMN = 14;
  uint32 Unk3300_PHEIMLOKIJG = 11;
  uint32 Unk3300_ONKPGFOLDFL = 12;
  bool Unk3300_NGBKNDHJPCP = 5;
  bool Unk3300_AKMPCDIKBJD = 9;
}


message EffigyDailyInfo {
  bool is_first_pass_reward_taken = 7;
  uint32 Unk3300_NNHICCGELHP = 2;
  uint32 Unk3300_NEBCDALEFEC = 11;
  uint32 challenge_max_score = 12;
  uint32 begin_time = 8;
  uint32 challenge_id = 6;
  uint32 day_index = 9;
}


message EndCameraSceneLookNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 291;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }
}


message EndCoinCollectPlaySingleModeReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 23963;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 multistage_play_index = 1;
}


message EndCoinCollectPlaySingleModeRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 21015;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 7;
}


enum ENetReason {
  E_NET_REASON_ENET_TIMEOUT = 0;
  E_NET_REASON_ENET_CLIENT_CLOSE = 1;
  E_NET_REASON_ENET_CLIENT_REBIND_FAIL = 2;
  E_NET_REASON_ENET_CLIENT_SHUTDOWN = 3;
  E_NET_REASON_ENET_SERVER_RELOGIN = 4;
  E_NET_REASON_ENET_SERVER_KICK = 5;
  E_NET_REASON_ENET_SERVER_SHUTDOWN = 6;
  E_NET_REASON_ENET_NOT_FOUND_SESSION = 7;
  E_NET_REASON_ENET_LOGIN_UNFINISHED = 8;
  E_NET_REASON_ENET_PACKET_FREQ_TOO_HIGH = 9;
  E_NET_REASON_ENET_PING_TIMEOUT = 10;
  E_NET_REASON_ENET_TRANFER_FAILED = 11;
  E_NET_REASON_ENET_SERVER_KILL_CLIENT = 12;
  E_NET_REASON_ENET_CHECK_MOVE_SPEED = 13;
  E_NET_REASON_ENET_ACCOUNT_PASSWORD_CHANGE = 14;
  E_NET_REASON_ENET_SECURITY_KICK = 15;
  E_NET_REASON_ENET_LUA_SHELL_TIMEOUT = 16;
  E_NET_REASON_ENET_SDKFAIL_KICK = 17;
  E_NET_REASON_ENET_PACKET_COST_TIME = 18;
  E_NET_REASON_ENET_PACKET_UNION_FREQ = 19;
  E_NET_REASON_ENET_WAIT_SND_MAX = 20;
  E_NET_REASON_ENET_CLIENT_CONNECT_KEY = 1234567890;
  E_NET_REASON_ENET_CLIENT_EDITOR_CONNECT_KEY = 987654321;
}


message EnterChessDungeonReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8855;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 map_id = 14;
}


message EnterChessDungeonRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8293;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 8;
  uint32 map_id = 12;
}

import "EnterCustomDungeonType.proto";

message EnterCustomDungeonReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 6242;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 dungeon_id = 7;
  EnterCustomDungeonType enter_type = 8;
  uint64 dungeon_guid = 4;
}

import "CustomDungeon.proto";
import "EnterCustomDungeonType.proto";

message EnterCustomDungeonRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 6241;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  map<uint32, uint32> room_cost_map = 3;
  EnterCustomDungeonType enter_type = 15;
  CustomDungeon custom_dungeon = 12;
  int32 retcode = 8;
}


enum EnterCustomDungeonType {
  ENTER_CUSTOM_DUNGEON_TYPE_NONE = 0;
  ENTER_CUSTOM_DUNGEON_TYPE_EDIT = 1;
  ENTER_CUSTOM_DUNGEON_TYPE_PLAY = 2;
  ENTER_CUSTOM_DUNGEON_TYPE_OFFICIAL = 3;
}


message EnterFishingReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5842;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 fish_pool_id = 7;
}


message EnterFishingRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5841;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 10;
  uint32 fish_pool_id = 9;
}


message EnterFungusFighterPlotDungeonReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 23768;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated uint32 fungus_id_list = 11;
  uint32 dungeon_id = 15;
}


message EnterFungusFighterPlotDungeonRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 20791;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint32 fungus_id_list = 14;
  uint32 dungeon_id = 8;
  int32 retcode = 4;
}


message EnterFungusFighterTrainingDungeonReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 23992;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 dungeon_id = 12;
}


message EnterFungusFighterTrainingDungeonRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 22876;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 dungeon_id = 12;
  int32 retcode = 7;
}


message EnterIrodoriChessDungeonReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8592;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  bool is_hard_map = 12;
  uint32 level_id = 10;
}


message EnterIrodoriChessDungeonRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8238;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  bool is_hard_map = 5;
  uint32 level_id = 15;
  int32 retcode = 8;
}


message EnterMechanicusDungeonReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3927;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 difficult_level = 5;
}


message EnterMechanicusDungeonRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3939;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 wrong_uid = 13;
  uint32 difficult_level = 15;
  int32 retcode = 12;
  uint32 dungeon_id = 10;
}


enum EnterReason {
  ENTER_REASON_NONE = 0;
  ENTER_REASON_LOGIN = 1;
  ENTER_REASON_DUNGEON_REPLAY = 11;
  ENTER_REASON_DUNGEON_REVIVE_ON_WAYPOINT = 12;
  ENTER_REASON_DUNGEON_ENTER = 13;
  ENTER_REASON_DUNGEON_QUIT = 14;
  ENTER_REASON_GM = 21;
  ENTER_REASON_QUEST_ROLLBACK = 31;
  ENTER_REASON_REVIVAL = 32;
  ENTER_REASON_PERSONAL_SCENE = 41;
  ENTER_REASON_TRANS_POINT = 42;
  ENTER_REASON_CLIENT_TRANSMIT = 43;
  ENTER_REASON_FORCE_DRAG_BACK = 44;
  ENTER_REASON_TEAM_KICK = 51;
  ENTER_REASON_TEAM_JOIN = 52;
  ENTER_REASON_TEAM_BACK = 53;
  ENTER_REASON_MUIP = 54;
  ENTER_REASON_DUNGEON_INVITE_ACCEPT = 55;
  ENTER_REASON_LUA = 56;
  ENTER_REASON_ACTIVITY_LOAD_TERRAIN = 57;
  ENTER_REASON_HOST_FROM_SINGLE_TO_MP = 58;
  ENTER_REASON_MP_PLAY = 59;
  ENTER_REASON_ANCHOR_POINT = 60;
  ENTER_REASON_LUA_SKIP_UI = 61;
  ENTER_REASON_RELOAD_TERRAIN = 62;
  ENTER_REASON_DRAFT_TRANSFER = 63;
  ENTER_REASON_ENTER_HOME = 64;
  ENTER_REASON_EXIT_HOME = 65;
  ENTER_REASON_CHANGE_HOME_MODULE = 66;
  ENTER_REASON_GALLERY = 67;
  ENTER_REASON_HOME_SCENE_JUMP = 68;
  ENTER_REASON_HIDE_AND_SEEK = 69;
  ENTER_REASON_SUMMER_TIME_MIST_ZONE = 70;
  ENTER_REASON_FORCE_QUIT_SCENE = 71;
  ENTER_REASON_HERO_COURSE = 72;
  ENTER_REASON_TRANS_CLIMATE = 73;
  ENTER_REASON_SUMMER_TIME_BOAT_RESTART = 74;
  ENTER_REASON_TSURUMI_MIST_CLIMATE = 75;
  ENTER_REASON_TSURUMI_REGIONAL_MIST_CLIMATE = 76;
  ENTER_REASON_WINTER_CAMP_RESTART = 77;
  ENTER_REASON_TALK_EXEC_TRANSFER = 78;
  ENTER_REASON_SEALAMP_BOAT_RESTART = 79;
  ENTER_REASON_SEALAMP_BOAT_BACK = 80;
  ENTER_REASON_CHALLENGE_INTERRUPT_BACK = 81;
  ENTER_REASON_IRODORI_MASTER_TRANSFER = 82;
  ENTER_REASON_GALLERY_BACK = 83;
  ENTER_REASON_SUMMER_TIME_V2_BOAT_RESTART = 84;
  ENTER_REASON_ISLAND_PARTY_GALLERY_START_FAILED = 85;
  ENTER_REASON_GRAVEN_INNOCENCE_RACE_RESTART = 86;
  ENTER_REASON_VINTAGE_HUNTING_TRANSFER = 87;
  ENTER_REASON_FUNGUS_FIGHTER_TRANSFER = 88;
  ENTER_REASON_BRICK_BREAKER = 89;
  ENTER_REASON_BRICK_BREAKER_SINGLE = 90;
  ENTER_REASON_TRANSFER_GUARD_STOP = 91;
  ENTER_REASON_COIN_COLLECT_SINGLE = 92;
}

import "RogueDiaryAvatar.proto";

message EnterRogueDiaryDungeonReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8627;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated uint32 chosen_card_list = 5;
  repeated RogueDiaryAvatar chosen_avatar_list = 9;
}


message EnterRogueDiaryDungeonRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8152;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 9;
}

import "RogueCellInfo.proto";
import "RoguelikeRuneRecord.proto";

message EnterRoguelikeDungeonNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8657;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  float bonus_resource_prop = 11;
  uint32 Unk3300_DBDABNIINEL = 4;
  repeated RoguelikeRuneRecord rune_record_list = 12;
  uint32 cur_level = 9;
  uint32 dungeon_id = 5;
  uint32 revise_monster_level = 1188;
  bool Unk3300_PKPOKOAAOKF = 1469;
  repeated uint32 explored_cell_list = 2;
  repeated uint64 onstage_avatar_guid_list = 15;
  uint32 stage_id = 6;
  uint32 Unk3300_KLFDKOCGAHN = 2046;
  bool Unk3300_GBHHLEDAGAM = 3;
  uint32 Unk3300_IIIJDDNJEBB = 1;
  repeated uint64 backstage_avatar_guid_list = 7;
  uint32 Unk3300_PKDLOJADIPA = 10;
  map<uint32, RogueCellInfo> cell_info_map = 14;
}


message EnterSceneDoneReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 232;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 enter_scene_token = 10;
}


message EnterSceneDoneRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 268;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 enter_scene_token = 1;
  int32 retcode = 13;
}


message EnterScenePeerNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 271;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 enter_scene_token = 7;
  uint32 host_peer_id = 12;
  uint32 peer_id = 14;
  uint32 dest_scene_id = 2;
}


message EnterSceneReadyReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 262;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 enter_scene_token = 12;
}


message EnterSceneReadyRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 251;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 enter_scene_token = 11;
  int32 retcode = 8;
}


message EnterSceneWeatherAreaNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 282;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 weather_gadget_id = 1;
}


message EnterTransPointRegionNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 242;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 point_id = 1;
  uint32 scene_id = 15;
}


message EnterTrialAvatarActivityDungeonReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2142;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 enter_point_id = 7;
  uint32 activity_id = 1;
  uint32 trial_avatar_index_id = 5;
}


message EnterTrialAvatarActivityDungeonRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2176;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 trial_avatar_index_id = 2;
  int32 retcode = 1;
  uint32 activity_id = 15;
}


enum EnterType {
  ENTER_TYPE_NONE = 0;
  ENTER_TYPE_SELF = 1;
  ENTER_TYPE_GOTO = 2;
  ENTER_TYPE_JUMP = 3;
  ENTER_TYPE_OTHER = 4;
  ENTER_TYPE_BACK = 5;
  ENTER_TYPE_DUNGEON = 6;
  ENTER_TYPE_DUNGEON_REPLAY = 7;
  ENTER_TYPE_GOTO_BY_PORTAL = 8;
  ENTER_TYPE_SELF_HOME = 9;
  ENTER_TYPE_OTHER_HOME = 10;
  ENTER_TYPE_GOTO_RECREATE = 11;
}


message EnterWorldAreaReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 246;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 area_type = 8;
  uint32 area_id = 10;
}


message EnterWorldAreaRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 275;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 area_type = 15;
  int32 retcode = 11;
  uint32 area_id = 1;
}

import "AbilityInvokeEntry.proto";

message EntityAbilityInvokeEntry {
  repeated AbilityInvokeEntry invokes = 14;
  uint32 entity_id = 7;
}


message EntityAiKillSelfNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 385;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 entity_id = 7;
}

import "AiSyncInfo.proto";

message EntityAiSyncNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 304;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated AiSyncInfo info_list = 14;
  repeated uint32 local_avatar_alerted_monster_list = 13;
}

import "AuthorityChange.proto";

message EntityAuthorityChangeNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 305;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated AuthorityChange authority_change_list = 8;
}

import "AbilitySyncStateInfo.proto";
import "AnimatorParameterValueInfoPair.proto";
import "EntityClientExtraInfo.proto";
import "EntityRendererChangedInfo.proto";
import "SceneEntityAiInfo.proto";
import "Vector.proto";

message EntityAuthorityInfo {
  AbilitySyncStateInfo ability_info = 1;
  EntityRendererChangedInfo renderer_changed_info = 2;
  SceneEntityAiInfo ai_info = 3;
  Vector born_pos = 4;
  repeated AnimatorParameterValueInfoPair pose_para_list = 5;
  EntityClientExtraInfo client_extra_info = 6;
}


message EntityClientData {
  uint32 wind_change_scene_time = 1;
  float windmill_sync_angle = 2;
  int32 wind_change_target_level = 3;
}

import "Vector.proto";

message EntityClientExtraInfo {
  Vector skill_anchor_position = 1;
}


message EntityConfigHashEntry {
  uint32 entity_id = 4;
  int32 hash_value = 1;
  uint32 job_id = 6;
}

import "EntityConfigHashEntry.proto";

message EntityConfigHashNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3332;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated EntityConfigHashEntry avatar_entry_list = 1;
  repeated EntityConfigHashEntry combat_entry_list = 2;
  repeated EntityConfigHashEntry ability_entry_list = 9;
}


message EntityEnvironmentInfo {
  uint32 json_climate_type = 1;
  uint32 climate_area_id = 2;
}

import "ChangeEnergyReason.proto";
import "ChangeHpReason.proto";
import "PropChangeReason.proto";

message EntityFightPropChangeReasonNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1261;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 prop_type = 5;
  repeated uint32 param_list = 7;
  uint32 entity_id = 8;
  PropChangeReason reason = 2;
  ChangeHpReason change_hp_reason = 9;
  ChangeEnergyReason change_energy_reason = 12;
  float prop_delta = 10;
}


message EntityFightPropNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1256;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  map<uint32, float> fight_prop_map = 9;
  uint32 entity_id = 10;
}


message EntityFightPropUpdateNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1219;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 entity_id = 15;
  map<uint32, float> fight_prop_map = 7;
}

import "MotionInfo.proto";

message EntityForceSyncReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 234;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 scene_time = 13;
  MotionInfo motion_info = 10;
  uint32 entity_id = 5;
  uint32 room_id = 11;
}

import "MotionInfo.proto";

message EntityForceSyncRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 295;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 entity_id = 12;
  uint32 scene_time = 2;
  MotionInfo fail_motion = 11;
  int32 retcode = 8;
}

import "Vector.proto";

message EntityJumpNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 237;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  enum Type {
    TYPE_NULL = 0;
    TYPE_ACTIVE = 1;
    TYPE_PASSIVE = 2;
  }

  Vector pos = 6;
  Type jump_type = 2;
  uint32 entity_id = 4;
  Vector rot = 9;
}

import "MotionInfo.proto";

message EntityMoveFailInfo {
  uint32 scene_time = 8;
  int32 retcode = 9;
  uint32 reliable_seq = 2;
  MotionInfo fail_motion = 4;
  uint32 entity_id = 5;
}

import "MotionInfo.proto";

message EntityMoveInfo {
  uint32 entity_id = 1;
  MotionInfo motion_info = 2;
  uint32 scene_time = 3;
  uint32 reliable_seq = 4;
  bool is_reliable = 5;
}


message EntityMoveRoomNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3337;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 dest_room_id = 1;
  uint32 entity_id = 4;
}

import "PropValue.proto";

message EntityPropNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1279;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 entity_id = 13;
  map<uint32, PropValue> prop_map = 9;
}


message EntityRendererChangedInfo {
  map<string, uint32> changed_renderers = 1;
  uint32 visibility_count = 2;
  bool is_cached = 3;
}


message EntityTagChangeNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3192;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  string tag = 3;
  uint32 entity_id = 11;
  bool is_add = 2;
}

import "Reliquary.proto";
import "Weapon.proto";

message Equip {
  bool is_locked = 3;
  oneof detail {
    Reliquary reliquary = 1;
    Weapon weapon = 2;
  }
}


message EquipParam {
  uint32 item_id = 1;
  uint32 item_num = 2;
  uint32 item_level = 3;
  uint32 promote_level = 4;
}

import "EquipParam.proto";

message EquipParamList {
  repeated EquipParam item_list = 1;
}


message EquipRoguelikeRuneReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8357;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated uint32 rune_list = 2;
}


message EquipRoguelikeRuneRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8815;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint32 rune_list = 6;
  int32 retcode = 5;
}


enum EventTriggerType {
  EVENT_TRIGGER_TYPE_NONE = 0;
  EVENT_TRIGGER_TYPE_ENTER_FORCE = 1;
}

import "AiThreatInfo.proto";

message EvtAiSyncCombatThreatInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 320;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  map<uint32, AiThreatInfo> combat_threat_info_map = 11;
}

import "AiSkillCdInfo.proto";

message EvtAiSyncSkillCdNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 395;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  map<uint32, AiSkillCdInfo> ai_cd_map = 14;
}

import "AnimatorParameterValueInfo.proto";

message EvtAnimatorParameterInfo {
  int32 name_id = 10;
  AnimatorParameterValueInfo value = 7;
  uint32 entity_id = 14;
  bool is_server_cache = 9;
}

import "EvtAnimatorParameterInfo.proto";
import "ForwardType.proto";

message EvtAnimatorParameterNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 330;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  ForwardType forward_type = 9;
  EvtAnimatorParameterInfo animator_param_info = 13;
}

import "Vector.proto";

message EvtAnimatorStateChangedInfo {
  float fade_duration = 4;
  uint32 to_state_hash = 11;
  uint32 layer = 1;
  Vector pos = 5;
  bool Unk3300_KLMEKMGFGPD = 3;
  uint32 normalized_time_compact = 6;
  bool Unk3300_MEOPKEDJCIN = 7;
  int32 face_angle_compact = 15;
  uint32 entity_id = 2;
}

import "EvtAnimatorStateChangedInfo.proto";
import "ForwardType.proto";

message EvtAnimatorStateChangedNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 327;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  ForwardType forward_type = 14;
  EvtAnimatorStateChangedInfo evt_animator_state_changed_info = 2;
}

import "ForwardType.proto";
import "Vector.proto";

message EvtAvatarEnterFocusNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 344;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  ForwardType forward_type = 14;
  bool Unk3300_NPBLDGPCDOC = 15;
  bool Unk3300_IJHHDFDIJMA = 4;
  bool Unk3300_NALGJBLGNJI = 13;
  bool Unk3300_OOOPPHEJKDI = 2;
  bool Unk3300_KMAFBMKJDAK = 9;
  bool Unk3300_LNLOOKDHJGF = 8;
  uint32 entity_id = 1;
  bool Unk3300_GGHCEGJEHND = 11;
  bool Unk3300_NLNIBJAFADG = 7;
  Vector focus_forward = 3;
  bool Unk3300_CDAJJHIPIKH = 12;
  bool Unk3300_FHHDDNENEDD = 6;
}

import "ForwardType.proto";
import "Vector.proto";

message EvtAvatarExitFocusNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 307;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 entity_id = 7;
  ForwardType forward_type = 8;
  Vector finish_forward = 2;
}

import "Vector.proto";

message EvtAvatarLockChairReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 308;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  Vector position = 2;
  uint64 chair_id = 5;
}

import "Vector.proto";

message EvtAvatarLockChairRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 309;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 8;
  uint64 chair_id = 14;
  uint32 entity_id = 9;
  Vector position = 15;
}

import "Vector.proto";

message EvtAvatarSitDownNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 322;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint64 chair_id = 15;
  Vector position = 14;
  uint32 entity_id = 4;
}


message EvtAvatarStandUpNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 382;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  int32 direction = 13;
  uint64 chair_id = 3;
  uint32 entity_id = 5;
  int32 perform_id = 11;
}

import "ForwardType.proto";
import "Vector.proto";

message EvtAvatarUpdateFocusNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 317;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  ForwardType forward_type = 4;
  uint32 entity_id = 3;
  Vector focus_forward = 6;
}


message EvtBeingHealedNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 366;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  float real_heal_amount = 2;
  float heal_amount = 3;
  uint32 target_id = 4;
  uint32 source_id = 6;
}

import "AttackResult.proto";

message EvtBeingHitInfo {
  uint32 frame_num = 11;
  uint32 peer_id = 2;
  AttackResult attack_result = 6;
}

import "EvtBeingHitInfo.proto";
import "ForwardType.proto";

message EvtBeingHitNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 379;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  EvtBeingHitInfo being_hit_info = 12;
  ForwardType forward_type = 11;
}

import "EvtBeingHitInfo.proto";
import "ForwardType.proto";

message EvtBeingHitsCombineNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 364;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated EvtBeingHitInfo evt_being_hit_info_list = 9;
  ForwardType forward_type = 7;
}

import "ForwardType.proto";
import "Vector.proto";

message EvtBulletDeactiveNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 399;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  Vector disappear_pos = 12;
  ForwardType forward_type = 11;
  uint32 entity_id = 1;
}

import "ForwardType.proto";
import "HitColliderType.proto";
import "Vector.proto";

message EvtBulletHitNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 348;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  ForwardType forward_type = 2;
  uint32 Unk3300_ELNFDKNGHFP = 4;
  Vector hit_normal = 9;
  uint32 Unk3300_KANAJBJHCLG = 6;
  Vector hit_point = 8;
  HitColliderType hit_collider_type = 10;
  uint32 entity_id = 14;
  uint32 forward_peer = 3;
  int32 hit_box_index = 1;
}

import "ForwardType.proto";
import "Vector.proto";

message EvtBulletMoveNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 389;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  ForwardType forward_type = 5;
  Vector cur_pos = 4;
  uint32 entity_id = 13;
}

import "Vector.proto";

message EvtCombatForceSetPosInfo {
  uint32 Unk3300_LGGMBNLMGHB = 8;
  uint32 Unk3300_IALIGDPAMFL = 7;
  Vector target_pos = 1;
  uint32 entity_id = 10;
}

import "Vector.proto";

message EvtCombatSteerMotionInfo {
  Vector face_dir = 5;
  Vector pos = 1;
  Vector velocity = 8;
  uint32 entity_id = 11;
}

import "Vector.proto";

message EvtCompensatePosDiffInfo {
  uint32 entity_id = 12;
  uint32 normalized_time_compact = 5;
  uint32 cur_hash = 7;
  int32 face_angle_compact = 11;
  Vector cur_pos = 6;
}


message EvtCostStaminaNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 378;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  float cost_stamina = 4;
  uint32 skill_id = 1;
}

import "ForwardType.proto";
import "Vector.proto";

message EvtCreateGadgetNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 400;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated uint32 target_entity_id_list = 1652;
  Vector init_pos = 9;
  bool Unk3300_DLBIJFOONBA = 15;
  uint32 owner_entity_id = 2;
  ForwardType forward_type = 3;
  repeated uint32 target_lock_point_index_list = 414;
  uint32 prop_owner_entity_id = 6;
  uint32 target_lock_point_index = 4;
  bool is_async_load = 1433;
  uint32 camp_id = 10;
  bool Unk3300_EJNBIGLGMII = 8;
  Vector init_euler_angles = 12;
  bool is_peer_id_from_player = 609;
  uint32 room_id = 5;
  uint32 config_id = 14;
  uint32 camp_type = 13;
  uint64 guid = 7;
  uint32 entity_id = 1;
  uint32 target_entity_id = 11;
}

import "ForwardType.proto";

message EvtDestroyGadgetNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 343;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 entity_id = 8;
  ForwardType forward_type = 10;
}


message EvtDestroyServerGadgetNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 387;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 entity_id = 3;
}

import "ForwardType.proto";
import "Vector.proto";

message EvtDoSkillSuccNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 319;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 caster_id = 15;
  ForwardType forward_type = 9;
  uint32 skill_id = 14;
  Vector forward = 13;
}

import "EntityRendererChangedInfo.proto";
import "ForwardType.proto";

message EvtEntityRenderersChangedNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 375;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  ForwardType forward_type = 5;
  uint32 entity_id = 1;
  bool is_server_cache = 3;
  EntityRendererChangedInfo renderer_changed_info = 15;
}

import "ForwardType.proto";

message EvtEntityStartDieEndNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 325;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  bool immediately = 9;
  ForwardType forward_type = 2;
  uint32 die_state_flag = 4;
  uint32 entity_id = 6;
}

import "Vector.proto";

message EvtFaceToDirInfo {
  Vector face_dir = 2;
  uint32 entity_id = 5;
}

import "EvtFaceToDirInfo.proto";
import "ForwardType.proto";

message EvtFaceToDirNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 347;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  EvtFaceToDirInfo evt_face_to_dir_info = 2;
  ForwardType forward_type = 9;
}

import "ForwardType.proto";

message EvtFaceToEntityNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 361;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 entity_id = 10;
  ForwardType forward_type = 8;
  uint32 face_entity_id = 4;
}

import "Vector.proto";

message EvtFixedRushMove {
  uint32 entity_id = 13;
  string override_collider = 7;
  Vector target_pos = 14;
  bool Unk3300_BGOLPLHGGPO = 8;
  repeated uint32 animator_state_id_list = 9;
  bool Unk3300_BKEELCGOLLN = 12;
  float speed = 10;
}

import "Vector.proto";

message EvtGrapplingHookMove {
  Vector target_pos = 4;
  uint32 entity_id = 10;
  float speed = 2;
  float Unk3300_NDMHKNFMPCJ = 5;
  repeated uint32 animator_state_id_list = 11;
  bool Unk3300_BGOLPLHGGPO = 1;
  float Unk3300_MJAOALPCJML = 9;
  bool Unk3300_BKEELCGOLLN = 15;
  string override_collider = 3;
}

import "AttackResult.proto";

message EvtHittingOtherInfo {
  uint32 peer_id = 2;
  AttackResult attack_result = 7;
}

import "Vector.proto";

message EvtLightCoreMove {
  float speed = 4;
  uint32 entity_id = 12;
  float Unk3300_BLNIJMMNAGH = 1;
  float Unk3300_NHPEDPJMCOL = 5;
  Vector target_pos = 11;
}


message EvtLocalGadgetOwnerLeaveSceneNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 352;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 entity_id = 1;
}

import "Vector.proto";

message EvtMonsterDoBlink {
  uint32 entity_id = 14;
  Vector target_pos = 9;
  Vector target_rot = 5;
}

import "Vector.proto";

message EvtMotionInfoDuringSteerAttack {
  Vector face_dir = 15;
  Vector pos = 8;
  uint32 entity_id = 4;
  Vector velocity = 14;
}

import "Vector.proto";

message EvtRushMoveInfo {
  Vector velocity = 8;
  int32 state_name_hash = 4;
  uint32 entity_id = 12;
  Vector pos = 7;
  int32 face_angle_compact = 1;
  float time_range = 13;
  Vector Unk3300_NEBMDDGPBON = 15;
  Vector Unk3300_FGAPBJIPJFG = 5;
}

import "EvtRushMoveInfo.proto";
import "ForwardType.proto";

message EvtRushMoveNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 339;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  EvtRushMoveInfo evt_rush_move_info = 1;
  ForwardType forward_type = 10;
}


message EvtSetAttackTargetInfo {
  uint32 attack_target_id = 6;
  uint32 select_point_index = 3;
  uint32 entity_id = 2;
}

import "EvtSetAttackTargetInfo.proto";
import "ForwardType.proto";

message EvtSetAttackTargetNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 357;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  EvtSetAttackTargetInfo evt_set_attack_target_info = 13;
  ForwardType forward_type = 6;
}

import "Vector.proto";

message EvtSyncEntityPositionInfo {
  uint32 state_hash = 10;
  int32 face_angle_compact = 4;
  Vector pos = 14;
  uint32 entity_id = 1;
  uint32 normalized_time_compact = 13;
}

import "Vector.proto";

message EvtSyncSkillAnchorPosition {
  Vector skill_anchor_position = 12;
  uint32 entity_id = 7;
}

import "Vector.proto";

message EvtSyncTransform {
  Vector Unk3300_JAMKLNFBBAD = 15;
  uint32 entity_id = 13;
  Vector Unk3300_PMHFLCOPFBC = 9;
}


enum ExchangeMcoinType {
  EXCHANGE_MCOIN_TYPE_NONE = 0;
  EXCHANGE_MCOIN_TYPE_PCM_TO_PSN = 1;
  EXCHANGE_MCOIN_TYPE_PSN_TO_PCM = 2;
}


message ExclusiveRuleInfo {
  uint32 rule_type = 2;
  repeated uint32 object_id_list = 15;
}

import "ExclusiveRuleInfo.proto";

message ExclusiveRuleNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 118;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated ExclusiveRuleInfo rule_info_list = 15;
}


message ExecuteGadgetLuaReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 235;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  int32 param3 = 1;
  int32 param2 = 14;
  uint32 source_entity_id = 15;
  int32 param1 = 13;
}


message ExecuteGadgetLuaRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 240;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 15;
}


message ExecuteGroupTriggerReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 263;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 source_entity_id = 7;
  int32 param3 = 6;
  int32 param1 = 9;
  string source_name = 8;
  uint32 target_entity_id = 15;
  int32 param2 = 4;
}


message ExecuteGroupTriggerRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 204;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 5;
}


message ExhibitionDisplayInfo {
  uint32 id = 1;
  uint32 param = 2;
  uint32 detail_param = 3;
}


message ExitCustomDungeonTryReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 6243;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}


message ExitCustomDungeonTryRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 6209;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 15;
}


message ExitFishingReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5802;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}


message ExitFishingRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5843;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 4;
}


message ExitSceneWeatherAreaNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 211;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 weather_gadget_id = 13;
}


message ExitTransPointRegionNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 290;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 point_id = 4;
  uint32 scene_id = 1;
}

import "ExpeditionChallengeInfo.proto";
import "ExpeditionPathInfo.proto";

message ExpeditionActivityDetailInfo {
  uint32 Unk3300_GJLCAJOFCKL = 9;
  repeated ExpeditionChallengeInfo challenge_info_list = 15;
  uint32 Unk3300_MNPBCNEDKAJ = 3;
  repeated ExpeditionPathInfo path_info_list = 11;
  bool is_content_closed = 4;
  uint32 content_close_time = 6;
}


message ExpeditionAssistInfo {
  string target_nick_name = 1;
  uint32 costume_id = 7;
  uint32 assist_time = 12;
  uint32 avatar_id = 5;
  string online_id = 13;
}


message ExpeditionChallengeEnterRegionNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2027;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  bool is_puzzle_finished = 1;
  uint32 id = 10;
}


message ExpeditionChallengeFinishedNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2074;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 id = 11;
}


message ExpeditionChallengeInfo {
  uint32 id = 5;
  bool is_finished = 2;
  uint32 open_time = 12;
}

import "ExpeditionState.proto";

message ExpeditionPathInfo {
  uint32 start_time = 10;
  float bonus_probability = 12;
  repeated uint32 avatar_id_list = 8;
  uint32 path_id = 11;
  uint32 Unk3300_AIEJKADFLKG = 6;
  uint32 Unk3300_LKAHOEBNBBI = 14;
  uint32 Unk3300_AFGPGIIGAKA = 7;
  uint32 Unk3300_LFIFDGAGFDC = 5;
  ExpeditionState state = 13;
  uint32 challenge_id = 9;
}


message ExpeditionRecallReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2098;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 path_id = 12;
}


message ExpeditionRecallRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2066;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 path_id = 2;
  int32 retcode = 4;
}


message ExpeditionStartReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2016;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 Unk3300_AIEJKADFLKG = 10;
  uint32 path_id = 3;
  uint32 Unk3300_AFGPGIIGAKA = 14;
  repeated uint32 avatar_id_list = 7;
}


message ExpeditionStartRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2182;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 Unk3300_AIEJKADFLKG = 5;
  uint32 path_id = 3;
  int32 retcode = 6;
  repeated uint32 avatar_id_list = 4;
  uint32 Unk3300_AFGPGIIGAKA = 10;
}


enum ExpeditionState {
  EXPEDITION_STATE_NONE = 0;
  EXPEDITION_STATE_STARTED = 1;
  EXPEDITION_STATE_FINISHED = 2;
  EXPEDITION_STATE_REWARDED = 3;
  EXPEDITION_STATE_LOCKED = 4;
}


message ExpeditionTakeRewardReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2015;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 path_id = 5;
}


message ExpeditionTakeRewardRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2197;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 4;
  uint32 reward_level = 13;
  uint32 path_id = 12;
  bool is_bonus = 10;
}


enum ExploreType {
  EXPLORE_TYPE_NONE = 0;
  EXPLORE_TYPE_CRYSTAL = 1;
  EXPLORE_TYPE_CHEST = 2;
  EXPLORE_TYPE_TEMPLE = 3;
  EXPLORE_TYPE_TELEPORT = 4;
}


message FallPlayerBrief {
  bool is_ground = 7;
  uint32 uid = 2;
  uint32 score = 12;
}


message FallPlayerInfo {
  uint32 cur_score = 3;
  bool is_ground = 11;
  map<uint32, uint32> ball_catch_count_map = 1;
  uint32 uid = 5;
  uint32 time_cost = 8;
}

import "OnlinePlayerInfo.proto";

message FallSettleInfo {
  uint32 final_score = 14;
  OnlinePlayerInfo player_info = 9;
  map<uint32, uint32> flower_ring_catch_count_map = 13;
  uint32 uid = 2;
  uint32 catch_count = 1;
  uint32 remain_time = 6;
}


message FeatureBlockInfo {
  uint32 feature_type = 1;
  uint32 end_time = 2;
}


enum FeatureBlockType {
  FEATURE_BLOCK_TYPE_NONE = 0;
  FEATURE_BLOCK_TYPE_CHAT = 1;
  FEATURE_BLOCK_TYPE_MP = 2;
  FEATURE_BLOCK_TYPE_CRC = 3;
  FEATURE_BLOCK_TYPE_HOME = 4;
}


message FetterData {
  uint32 fetter_id = 1;
  uint32 fetter_state = 2;
  repeated uint32 cond_index_list = 3;
}


enum FetterState {
  FETTER_STATE_NONE = 0;
  FETTER_STATE_NOT_OPEN = 1;
  FETTER_STATE_OPEN = 2;
  FETTER_STATE_FINISH = 3;
  FETTER_STATE_CONCEAL = 4;
}


message FightPropPair {
  uint32 prop_type = 1;
  float prop_value = 2;
}


message FindHilichurlAcceptQuestNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8893;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }
}


message FindHilichurlDayContentInfo {
  uint32 start_time = 13;
}

import "FindHilichurlDayContentInfo.proto";

message FindHilichurlDetailInfo {
  uint32 day_index = 8;
  bool is_content_closed = 12;
  uint32 min_open_player_level = 2;
  repeated FindHilichurlDayContentInfo day_content_info_list = 4;
  uint32 content_close_time = 7;
  bool is_end_quest_accept = 5;
  uint32 player_day_index = 14;
}


message FindHilichurlFinishSecondQuestNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8644;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 day_index = 4;
}


message FinishDeliveryNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2030;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 finished_quest_index = 12;
  uint32 day_index = 7;
  uint32 schedule_id = 6;
}

import "ParentQuest.proto";

message FinishedParentQuestNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 419;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated ParentQuest parent_quest_list = 13;
}

import "ParentQuest.proto";

message FinishedParentQuestUpdateNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 500;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated ParentQuest parent_quest_list = 3;
}


message FinishedTalkIdListNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 578;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint32 finished_talk_id_list = 13;
}


message FinishLanternProjectionReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8932;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 finish_time = 8;
  uint32 level_id = 15;
}


message FinishLanternProjectionRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8971;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 6;
}


message FinishMainCoopReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1977;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 id = 14;
  uint32 ending_save_point_id = 3;
}


message FinishMainCoopRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1981;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 ending_save_point_id = 4;
  int32 retcode = 1;
  uint32 id = 13;
}

import "FireworksLaunchSchemeData.proto";

message FireworksLaunchDataNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5917;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated FireworksLaunchSchemeData scheme_data_list = 8;
  uint32 last_use_scheme_id = 15;
}

import "FireworksLaunchParamType.proto";

message FireworksLaunchParam {
  FireworksLaunchParamType type = 4;
  int32 value = 2;
}


enum FireworksLaunchParamType {
  FIREWORKS_LAUNCH_PARAM_TYPE_NONE = 0;
  FIREWORKS_LAUNCH_PARAM_TYPE_REPEAT = 1;
  FIREWORKS_LAUNCH_PARAM_TYPE_INTERVAL = 2;
  FIREWORKS_LAUNCH_PARAM_TYPE_DELAY = 3;
  FIREWORKS_LAUNCH_PARAM_TYPE_ROUND_INTERVAL = 4;
  FIREWORKS_LAUNCH_PARAM_TYPE_MAX = 5;
}

import "FireworksLaunchParam.proto";

message FireworksLaunchSchemeData {
  repeated FireworksLaunchParam launch_param_list = 8;
  repeated uint32 fireworks_id_list = 12;
  uint32 scheme_id = 2;
}

import "FireworksReformParam.proto";

message FireworksReformData {
  repeated FireworksReformParam reform_param_list = 8;
  uint32 id = 12;
}

import "FireworksReformData.proto";

message FireworksReformDataNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5908;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated FireworksReformData fireworks_reform_data_list = 9;
}

import "FireworksReformParamType.proto";

message FireworksReformParam {
  int32 value = 1;
  FireworksReformParamType type = 5;
}


enum FireworksReformParamType {
  FIREWORKS_REFORM_PARAM_TYPE_NONE = 0;
  FIREWORKS_REFORM_PARAM_TYPE_COLOR = 1;
  FIREWORKS_REFORM_PARAM_TYPE_HEIGHT = 2;
  FIREWORKS_REFORM_PARAM_TYPE_SIZE = 3;
  FIREWORKS_REFORM_PARAM_TYPE_DENSITY = 4;
  FIREWORKS_REFORM_PARAM_TYPE_ROTATION = 5;
}

import "Vector.proto";

message FishAttractNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5809;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  Vector pos = 2;
  repeated uint32 fish_id_list = 14;
  uint32 uid = 13;
}


message FishBaitGoneNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5830;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 uid = 11;
}


message FishBattleBeginReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5815;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}


message FishBattleBeginRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5818;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 4;
}

import "FishBattleResult.proto";

message FishBattleEndReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5808;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  FishBattleResult battle_result = 11;
  bool is_always_bonus = 3;
  uint32 max_bonus_time = 2;
}

import "FishBattleResult.proto";
import "ItemParam.proto";

message FishBattleEndRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5845;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  enum FishNoRewardReason {
    FISH_NO_REWARD_REASON_NONE = 0;
    FISH_NO_REWARD_REASON_ACTIVITY_LIMIT = 1;
    FISH_NO_REWARD_REASON_BAG_LIMIT = 2;
    FISH_NO_REWARD_REASON_POOL_LIMIT = 3;
  }

  FishBattleResult battle_result = 6;
  FishNoRewardReason no_reward_reason = 2;
  int32 retcode = 9;
  repeated ItemParam Unk3300_ABBBGOBDJEC = 12;
  bool is_got_reward = 8;
  repeated ItemParam Unk3300_MDCKKPGNKGL = 1;
  repeated ItemParam reward_item_list = 15;
}


enum FishBattleResult {
  FISH_BATTLE_RESULT_NONE = 0;
  FISH_BATTLE_RESULT_SUCC = 1;
  FISH_BATTLE_RESULT_FAIL = 2;
  FISH_BATTLE_RESULT_TIMEOUT = 3;
  FISH_BATTLE_RESULT_CANCEL = 4;
  FISH_BATTLE_RESULT_EXIT = 5;
}


message FishBiteReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5812;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}


message FishBiteRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5834;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 2;
}

import "Vector.proto";

message FishCastRodReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5827;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 Unk3300_PJFHEDDFOBM = 7;
  uint32 Unk3300_ICALEIBJCDA = 13;
  Vector pos = 11;
  uint32 rod_entity_id = 8;
}


message FishCastRodRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5831;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 12;
}


message FishChosenNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5844;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 fish_id = 4;
}

import "FishEscapeReason.proto";
import "Vector.proto";

message FishEscapeNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5817;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 uid = 2;
  Vector pos = 11;
  repeated uint32 fish_id_list = 9;
  FishEscapeReason reason = 12;
}


enum FishEscapeReason {
  FISH_ESCAPE_REASON_NONE = 0;
  FISH_ESCAPE_REASON_SHOCKED = 1;
  FISH_ESCAPE_REASON_UNHOOK = 2;
}


message FishInfo {
  uint32 Unk3300_AKFBFEDCELN = 14;
  uint32 Unk3300_FIICLBEFHLL = 7;
}

import "FishInfo.proto";
import "FishingScore.proto";

message FishingGallerySettleInfo {
  repeated FishingScore fishing_score_list = 15;
  map<uint32, FishInfo> fish_map = 10;
}

import "FishingGallerySettleInfo.proto";

message FishingGallerySettleNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8464;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 gallery_id = 5;
  FishingGallerySettleInfo settle_info = 4;
  uint32 level_id = 12;
}


message FishingScore {
  uint32 fishing_score = 11;
  bool is_new_record = 10;
}


message FishPoolDataNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5837;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 entity_id = 3;
  uint32 today_fish_num = 12;
}


message FishPoolInfo {
  uint32 pool_id = 1;
  repeated uint32 fish_area_list = 2;
  uint32 today_fish_num = 3;
}


message FishtankFishInfo {
  float fish_distance_from_water = 1;
  float fish_scale = 2;
  float initial_rotation_y = 3;
}

import "FleurFairChapterInfo.proto";
import "FleurFairDungeonSectionInfo.proto";
import "FleurFairMinigameInfo.proto";

message FleurFairActivityDetailInfo {
  uint32 Unk3300_KONOCAMIIIE = 3;
  repeated FleurFairChapterInfo chapter_info_list = 5;
  bool is_dungeon_unlocked = 6;
  map<uint32, FleurFairDungeonSectionInfo> dungeon_section_info_map = 8;
  bool is_content_closed = 13;
  map<uint32, FleurFairMinigameInfo> minigame_info_map = 9;
  uint32 Unk3300_LOFLGOOIMNH = 10;
  uint32 content_close_time = 4;
}


message FleurFairBalloonInfo {
  uint32 best_score = 4;
}

import "BalloonSettleInfo.proto";

message FleurFairBalloonSettleInfo {
  BalloonSettleInfo settle_info = 5;
  bool is_new_record = 15;
}

import "FleurFairBalloonSettleInfo.proto";

message FleurFairBalloonSettleNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2159;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 minigame_id = 1;
  map<uint32, FleurFairBalloonSettleInfo> settle_info_map = 6;
}

import "FleurFairPlayerStatInfo.proto";

message FleurFairBossSettleInfo {
  uint32 cost_time = 14;
  repeated FleurFairPlayerStatInfo stat_info_list = 11;
  uint32 energy = 4;
  bool is_success = 2;
  uint32 reward_token_num = 15;
}


message FleurFairBuffEnergyNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5322;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 energy = 13;
}


message FleurFairChapterInfo {
  uint32 chapter_id = 12;
  uint32 open_time = 7;
}


message FleurFairDungeonSectionInfo {
  bool is_open = 6;
  uint32 section_id = 14;
  uint32 open_time = 15;
}


message FleurFairFallInfo {
  uint32 best_score = 11;
}

import "FallSettleInfo.proto";

message FleurFairFallSettleInfo {
  FallSettleInfo settle_info = 3;
  bool is_new_record = 9;
}

import "FleurFairFallSettleInfo.proto";

message FleurFairFallSettleNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2136;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 minigame_id = 2;
  map<uint32, FleurFairFallSettleInfo> settle_info_map = 13;
}


message FleurFairFinishGalleryStageNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5311;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }
}


message FleurFairGallerySettleInfo {
  bool is_success = 8;
  map<uint32, int32> energy_stat_map = 2;
  uint32 energy = 3;
  uint32 gallery_stage_index = 6;
  uint32 gallery_stage_count = 15;
}

import "FleurFairBalloonInfo.proto";
import "FleurFairFallInfo.proto";
import "FleurFairMusicGameInfo.proto";

message FleurFairMinigameInfo {
  uint32 minigame_id = 3;
  bool is_open = 15;
  uint32 open_time = 13;
  oneof detail {
    FleurFairBalloonInfo balloon_info = 1;
    FleurFairFallInfo fall_info = 10;
    FleurFairMusicGameInfo music_info = 14;
  }
}

import "FleurFairMusicRecord.proto";

message FleurFairMusicGameInfo {
  map<uint32, FleurFairMusicRecord> music_record_map = 6;
}


message FleurFairMusicGameSettleReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2111;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 score = 1;
  uint32 correct_hit = 10;
  uint32 combo = 3;
  uint32 music_basic_id = 14;
}


message FleurFairMusicGameSettleRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2156;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  bool is_new_record = 15;
  bool is_unlock_next_level = 7;
  uint32 music_basic_id = 4;
  int32 retcode = 9;
}


message FleurFairMusicGameStartReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2070;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 music_basic_id = 5;
}


message FleurFairMusicGameStartRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2146;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 music_basic_id = 11;
  int32 retcode = 5;
}


message FleurFairMusicRecord {
  uint32 max_score = 11;
  bool is_unlock = 10;
  uint32 max_combo = 6;
}

import "ProfilePicture.proto";

message FleurFairPlayerStatInfo {
  ProfilePicture profile_picture = 5;
  uint32 stat_id = 4;
  uint32 head_image = 6;
  int32 param = 8;
  uint32 uid = 9;
  string nick_name = 2;
  string online_id = 11;
}


message FleurFairReplayMiniGameReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2127;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 minigame_id = 3;
}


message FleurFairReplayMiniGameRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2061;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 minigame_id = 6;
  int32 retcode = 5;
}

import "FleurFairBossSettleInfo.proto";
import "FleurFairGallerySettleInfo.proto";

message FleurFairStageSettleNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5382;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 stage_type = 7;
  oneof detail {
    FleurFairGallerySettleInfo gallery_settle_info = 1;
    FleurFairBossSettleInfo boss_settle_info = 12;
  }
}

import "FlightDailyRecord.proto";

message FlightActivityDetailInfo {
  repeated FlightDailyRecord daily_record_list = 12;
  uint32 preview_reward_id = 1;
  uint32 min_open_player_level = 4;
}


message FlightActivityRestartReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2152;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 group_id = 3;
  uint32 schedule_id = 7;
}


message FlightActivityRestartRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2158;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 4;
  uint32 group_id = 10;
  uint32 schedule_id = 11;
}


message FlightActivitySettleNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2143;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 left_time = 10;
  uint32 total_num = 6;
  uint32 group_id = 13;
  uint32 score = 15;
  uint32 Unk3300_MEEKFJJIOKE = 9;
  bool is_new_record = 4;
  bool is_success = 1;
  uint32 Unk3300_PLFMJPNPPLI = 11;
}


message FlightDailyRecord {
  uint32 best_score = 15;
  uint32 group_id = 13;
  bool is_touched = 5;
  uint32 start_time = 6;
  repeated uint32 watcher_id_list = 7;
}


message FocusAvatarReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1793;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint64 avatar_guid = 5;
  bool is_focus = 11;
}


message FocusAvatarRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1786;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  bool is_focus = 2;
  uint64 avatar_guid = 4;
  int32 retcode = 15;
}


message ForceAddPlayerFriendReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4063;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 target_uid = 3;
}

import "FriendBrief.proto";

message ForceAddPlayerFriendRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4004;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  FriendBrief target_friend_brief = 3;
  int32 retcode = 13;
  uint32 target_uid = 8;
}

import "MotionInfo.proto";

message ForceDragAvatarNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3008;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint64 Unk3300_IMFNNPGHKJJ = 3;
  MotionInfo motion_info = 9;
  bool is_first_valid = 7;
  uint32 scene_time = 12;
  uint32 entity_id = 10;
  uint64 Unk3300_AFLCLLFDPBD = 5;
}


message ForceDragBackTransferNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3494;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}


message ForceUpdateInfo {
  string force_update_url = 1;
}

import "ForgeQueueData.proto";

message ForgeDataNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 674;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint32 forge_id_list = 13;
  map<uint32, ForgeQueueData> forge_queue_map = 8;
  uint32 max_queue_num = 11;
}


message ForgeFormulaDataNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 626;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  bool is_locked = 4;
  uint32 forge_id = 3;
}


message ForgeGetQueueDataReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 664;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}

import "ForgeQueueData.proto";

message ForgeGetQueueDataRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 667;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 max_queue_num = 4;
  map<uint32, ForgeQueueData> forge_queue_map = 9;
  int32 retcode = 15;
}


message ForgeQueueData {
  uint32 next_finish_timestamp = 1;
  uint32 forge_id = 5;
  uint32 finish_count = 7;
  uint32 queue_id = 4;
  uint32 total_finish_timestamp = 15;
  uint32 avatar_id = 12;
  uint32 unfinish_count = 3;
}

import "ForgeQueueData.proto";

message ForgeQueueDataNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 695;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  map<uint32, ForgeQueueData> forge_queue_map = 1;
  repeated uint32 removed_forge_queue_list = 15;
}

import "ForgeQueueManipulateType.proto";

message ForgeQueueManipulateReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 622;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 forge_queue_id = 3;
  ForgeQueueManipulateType manipulate_type = 4;
}

import "ForgeQueueManipulateType.proto";
import "ItemParam.proto";

message ForgeQueueManipulateRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 682;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated ItemParam extra_output_item_list = 3;
  ForgeQueueManipulateType manipulate_type = 12;
  repeated ItemParam return_item_list = 4;
  repeated ItemParam output_item_list = 14;
  int32 retcode = 11;
}


enum ForgeQueueManipulateType {
  FORGE_QUEUE_MANIPULATE_TYPE_RECEIVE_OUTPUT = 0;
  FORGE_QUEUE_MANIPULATE_TYPE_STOP_FORGE = 1;
}


message ForgeStartReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 615;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 forge_id = 8;
  uint32 avatar_id = 1;
  uint32 forge_count = 10;
}


message ForgeStartRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 621;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 2;
}


enum ForwardType {
  FORWARD_TYPE_LOCAL = 0;
  FORWARD_TYPE_TO_ALL = 1;
  FORWARD_TYPE_TO_ALL_EXCEPT_CUR = 2;
  FORWARD_TYPE_TO_HOST = 3;
  FORWARD_TYPE_TO_ALL_GUEST = 4;
  FORWARD_TYPE_TO_PEER = 5;
  FORWARD_TYPE_TO_PEERS = 6;
  FORWARD_TYPE_ONLY_SERVER = 7;
  FORWARD_TYPE_TO_ALL_EXIST_EXCEPT_CUR = 8;
}

import "FoundationStatus.proto";

message FoundationInfo {
  FoundationStatus status = 1;
  repeated uint32 uid_list = 2;
  uint32 current_building_id = 3;
  uint32 locked_by_uid = 4;
}

import "FoundationInfo.proto";

message FoundationNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 876;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  FoundationInfo info = 6;
  uint32 gadget_entity_id = 14;
}


enum FoundationOpType {
  FOUNDATION_OP_TYPE_NONE = 0;
  FOUNDATION_OP_TYPE_BUILD = 1;
  FOUNDATION_OP_TYPE_DEMOLITION = 2;
  FOUNDATION_OP_TYPE_REBUILD = 3;
  FOUNDATION_OP_TYPE_ROTATE = 4;
  FOUNDATION_OP_TYPE_LOCK = 5;
  FOUNDATION_OP_TYPE_UNLOCK = 6;
}

import "FoundationOpType.proto";

message FoundationReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 842;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 gadget_entity_id = 1;
  uint32 building_id = 11;
  uint32 point_config_id = 10;
  FoundationOpType op_type = 6;
}

import "FoundationOpType.proto";

message FoundationRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 890;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 15;
  uint32 building_id = 10;
  FoundationOpType op_type = 14;
  uint32 gadget_entity_id = 2;
  uint32 point_config_id = 6;
}


enum FoundationStatus {
  FOUNDATION_STATUS_NONE = 0;
  FOUNDATION_STATUS_INIT = 1;
  FOUNDATION_STATUS_BUILDING = 2;
  FOUNDATION_STATUS_BUILT = 3;
}

import "FriendEnterHomeOption.proto";
import "FriendOnlineState.proto";
import "PlatformType.proto";
import "ProfilePicture.proto";
import "SocialShowAvatarInfo.proto";

message FriendBrief {
  uint32 uid = 1;
  string nickname = 2;
  uint32 level = 3;
  uint32 avatar_id = 4;
  uint32 world_level = 5;
  string signature = 6;
  FriendOnlineState online_state = 7;
  uint32 param = 8;
  bool is_mp_mode_available = 10;
  string online_id = 11;
  uint32 last_active_time = 12;
  uint32 name_card_id = 13;
  uint32 mp_player_num = 14;
  bool is_chat_no_disturb = 15;
  uint32 chat_sequence = 16;
  string remark_name = 17;
  repeated SocialShowAvatarInfo show_avatar_info_list = 22;
  FriendEnterHomeOption friend_enter_home_option = 23;
  ProfilePicture profile_picture = 24;
  bool is_game_source = 25;
  bool is_psn_source = 26;
  PlatformType platform_type = 27;
}


enum FriendEnterHomeOption {
  FRIEND_ENTER_HOME_OPTION_NEED_CONFIRM = 0;
  FRIEND_ENTER_HOME_OPTION_REFUSE = 1;
  FRIEND_ENTER_HOME_OPTION_DIRECT = 2;
}


message FriendInfoChangeNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4065;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 uid = 6;
  string online_id = 3;
}


enum FriendOnlineState {
  FRIEND_ONLINE_STATE_DISCONNECT = 0;
  FRIEND_ONLINE_STATE_ONLINE = 1;
}


message FungusCaptureSettleNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5510;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  bool is_success = 14;
}


message FungusCultivateReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 23545;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 Unk3300_IOANLJBMBAI = 1;
  uint32 Unk3300_DJEGJDACDEF = 6;
  uint32 Unk3300_IMEGFNOLDCE = 2;
  uint32 Unk3300_PGJKEICFKLL = 5;
  uint32 Unk3300_MBPLICBFAGL = 7;
  uint32 cultivate_id = 12;
  uint32 time = 15;
  uint32 Unk3300_AEGCNHLOPEP = 8;
}


message FungusCultivateRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 20883;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 8;
  uint32 cultivate_id = 12;
  bool is_new_record = 13;
}


message FungusDetail {
  uint32 name_id = 8;
  uint32 Unk3300_EHNBDJPANKL = 2;
  uint32 fungus_id = 3;
  bool is_cultivate = 7;
  uint32 Unk3300_GCLBPDJDEDN = 13;
}


message FungusFighterClearTrainingRuntimeDataReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 24267;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 dungeon_id = 4;
}


message FungusFighterClearTrainingRuntimeDataRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 20749;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 14;
}

import "FungusDetail.proto";
import "FungusPlotStageDetail.proto";
import "FungusTrainingDungeonDetail.proto";
import "FungusTrainingProgressDetail.proto";

message FungusFighterDetailInfo {
  repeated FungusDetail fungus_detail_list = 6;
  repeated uint32 Unk3300_GIHAKKAJHDH = 1;
  repeated uint32 Unk3300_KGKFJJHFHAB = 8;
  repeated FungusTrainingProgressDetail training_dungeon_progress_detail_list = 3;
  repeated uint32 Unk3300_HPDOJOBPFMJ = 9;
  repeated FungusPlotStageDetail plot_stage_detail_list = 11;
  repeated FungusTrainingDungeonDetail training_dungeon_detail_list = 2;
}


message FungusFighterMonsterDetail {
  float cur_hp_percentage = 9;
  bool is_alive = 10;
  uint32 fungus_id = 13;
}


message FungusFighterPlotInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 23920;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 dungeon_id = 12;
  repeated uint32 fungus_id_list = 8;
}


message FungusFighterRestartTrainingDungeonReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 24273;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}


message FungusFighterRestartTrainingDungeonRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 20579;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 14;
}

import "FungusTrainingProgressDetail.proto";

message FungusFighterRuntimeDataNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 20567;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  FungusTrainingProgressDetail progress_detail = 7;
}

import "GalleryStopReason.proto";

message FungusFighterTrainingGallerySettleNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 23475;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  GalleryStopReason reason = 3;
  bool is_final_settle = 2;
  uint32 total_used_time = 14;
  bool is_new_record = 11;
  uint32 Unk3300_KKFBMHLOLFC = 10;
  uint32 Unk3300_BHOMHPHLOHL = 13;
  uint32 Unk3300_POCDEGBHJEA = 15;
  uint32 final_score = 5;
}


message FungusFighterTrainingInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5533;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 buff_id = 14;
  uint32 Unk3300_IOEELCAMDCK = 10;
  uint32 Unk3300_HGPGNCMNDJN = 4;
  uint32 Unk3300_EDHANEGNMJM = 3;
  uint32 Unk3300_GMLIPFDMDOG = 6;
  uint32 Unk3300_EKAMCPNGCGH = 13;
  uint32 max_monster_count = 9;
}


message FungusFighterTrainingSelectFungusReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 24249;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated uint32 backup_fungus_id_list = 3;
  repeated uint32 fight_fungus_id_list = 9;
}


message FungusFighterTrainingSelectFungusRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 23309;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 11;
}

import "GalleryStopReason.proto";

message FungusFighterTrainingSettleInfo {
  uint32 used_time = 13;
  GalleryStopReason reason = 4;
  string transaction = 3;
}


message FungusFighterUseBackupFungusReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 22075;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated uint32 backup_fungus_id_list = 8;
}


message FungusFighterUseBackupFungusRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 21089;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 11;
}


message FungusPlotStageDetail {
  bool is_open = 13;
  uint32 stage_id = 10;
}


message FungusRenameReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 22498;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 fungus_id = 12;
  uint32 name_id = 11;
}


message FungusRenameRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 22216;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 fungus_id = 1;
  int32 retcode = 7;
  uint32 name_id = 6;
}


message FungusTrainingDungeonDetail {
  uint32 best_score = 8;
  uint32 dungeon_id = 6;
  bool is_open = 13;
}


message FungusTrainingMonsterPreviewDetail {
  uint32 monster_id = 12;
  uint32 level = 8;
  repeated uint32 affix_list = 9;
}

import "FungusTrainingMonsterPreviewDetail.proto";

message FungusTrainingPoolPreviewDetail {
  repeated FungusTrainingMonsterPreviewDetail monster_preview_detail_list = 10;
  uint32 pool_id = 8;
}

import "FungusFighterMonsterDetail.proto";
import "FungusTrainingPoolPreviewDetail.proto";

message FungusTrainingProgressDetail {
  repeated uint32 Unk3300_EEOIMDJOHCM = 10;
  uint32 total_used_time = 3;
  repeated FungusFighterMonsterDetail monster_detail_list = 14;
  uint32 dungeon_id = 1;
  repeated FungusTrainingPoolPreviewDetail monster_pool_preview_list = 5;
  uint32 cur_round = 9;
  repeated uint32 Unk3300_NLHEFGBEOAC = 4;
}


message Furniture {
  uint32 count = 1;
}

import "Uint32Pair.proto";

message FurnitureCurModuleArrangeCountNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4538;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated Uint32Pair furniture_arrange_count_list = 3;
}

import "ProfilePicture.proto";

message FurnitureMakeBeHelpedData {
  string player_name = 11;
  uint32 icon = 7;
  ProfilePicture profile_picture = 2;
  fixed32 time = 12;
  uint32 uid = 8;
}

import "FurnitureMakeBeHelpedData.proto";
import "FurnitureMakeSlot.proto";

message FurnitureMakeBeHelpedNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4766;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  FurnitureMakeBeHelpedData furniture_make_helped_data = 12;
  FurnitureMakeSlot furniture_make_slot = 3;
}


message FurnitureMakeCancelReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4726;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 make_id = 14;
  uint32 index = 4;
}

import "FurnitureMakeSlot.proto";

message FurnitureMakeCancelRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4676;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 8;
  uint32 make_id = 6;
  FurnitureMakeSlot furniture_make_slot = 4;
}


message FurnitureMakeData {
  fixed32 begin_time = 1;
  uint32 avatar_id = 5;
  uint32 make_id = 10;
  uint32 index = 6;
  uint32 dur_time = 8;
  uint32 accelerate_time = 7;
}


message FurnitureMakeFinishNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4850;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }
}


message FurnitureMakeHelpData {
  uint32 times = 12;
  uint32 uid = 2;
}


message FurnitureMakeHelpReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4478;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}

import "FurnitureMakeHelpData.proto";

message FurnitureMakeHelpRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4507;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated FurnitureMakeHelpData help_data_list = 4;
  int32 retcode = 3;
}


message FurnitureMakeInfo {
  uint32 make_count = 15;
  uint32 furniture_id = 9;
}

import "FurnitureMakeInfo.proto";

message FurnitureMakeInfoChangeNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4882;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  FurnitureMakeInfo make_info = 10;
}


message FurnitureMakeReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4802;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}

import "FurnitureMakeBeHelpedData.proto";
import "FurnitureMakeHelpData.proto";
import "FurnitureMakeInfo.proto";
import "FurnitureMakeSlot.proto";

message FurnitureMakeRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4504;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  FurnitureMakeSlot furniture_make_slot = 13;
  repeated FurnitureMakeHelpData help_data_list = 4;
  int32 retcode = 11;
  repeated FurnitureMakeBeHelpedData helped_data_list = 6;
  repeated FurnitureMakeInfo make_info_list = 7;
}

import "FurnitureMakeData.proto";

message FurnitureMakeSlot {
  repeated FurnitureMakeData furniture_make_data_list = 1;
}


message FurnitureMakeStartReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4581;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 make_id = 15;
  uint32 avatar_id = 13;
}

import "FurnitureMakeSlot.proto";

message FurnitureMakeStartRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4877;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  FurnitureMakeSlot furniture_make_slot = 14;
  int32 retcode = 8;
}


message GachaActivityCreateRobotReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8316;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}


message GachaActivityCreateRobotRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8494;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 15;
  uint32 robot_id = 11;
}

import "GachaStageData.proto";

message GachaActivityDetailInfo {
  uint32 Unk3300_JJDHKJGDEKJ = 12;
  map<uint32, uint32> robot_num_map = 10;
  map<uint32, uint32> have_reward_robot_num_map = 3;
  repeated uint32 have_get_robot_list = 14;
  repeated GachaStageData gacha_stage_data_list = 7;
  uint32 Unk3300_IGGPBEOCNGI = 15;
}


message GachaActivityNextStageReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8342;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}


message GachaActivityNextStageRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8914;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 stage_id = 11;
  int32 retcode = 5;
}


message GachaActivityPercentNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8706;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 Unk3300_GHHIGKFDONE = 13;
  uint32 Unk3300_EOPJBPHFDEE = 6;
  uint32 Unk3300_IOLPAJKDEEA = 5;
  map<uint32, uint32> target_num_map = 12;
}


message GachaActivityResetReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8540;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 stage_id = 1;
}


message GachaActivityResetRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8416;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 8;
  uint32 stage_id = 5;
}


message GachaActivityTakeRewardReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8853;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  map<uint32, uint32> robot_num_map = 7;
}


message GachaActivityTakeRewardRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8354;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  map<uint32, uint32> robot_num_map = 10;
  int32 retcode = 8;
}


message GachaActivityUpdateElemNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8241;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 elem_type = 9;
}

import "GachaUpInfo.proto";

message GachaInfo {
  uint32 Unk3300_JLELMHELIDC = 5;
  uint32 gacha_type = 7;
  uint32 wish_progress = 954;
  string Unk3300_GKDEEFNFCAC = 1532;
  string Unk3300_FOGPKBALHPI = 15;
  string Unk3300_HLPKLMGIBIB = 1;
  uint32 begin_time = 14;
  uint32 schedule_id = 8;
  repeated uint32 Unk3300_LBLEBDLJDLL = 476;
  uint32 gacha_times_limit = 10;
  string Unk3300_BCJONGECBOH = 4;
  string Unk3300_JOGAHFBKHNJ = 114;
  uint32 Unk3300_HLANONBCBLM = 245;
  uint32 end_time = 2;
  repeated uint32 Unk3300_COABNBJCKEO = 540;
  uint32 Unk3300_MEDMCPFCIOO = 13;
  uint32 wish_max_progress = 1275;
  uint32 Unk3300_DBFMKAMNPCL = 9;
  uint32 Unk3300_DDBOLMGHEKN = 6;
  bool is_new_wish = 967;
  uint32 Unk3300_JLBFLPEMAPP = 12;
  uint32 wish_item_id = 1580;
  string Unk3300_ODFKNFOMAGE = 1259;
  repeated GachaUpInfo gacha_up_info_list = 1585;
  uint32 Unk3300_PLFMMOFNGAG = 3;
  string Unk3300_OFOHDLDFCLF = 11;
}

import "GachaTransferItem.proto";
import "ItemParam.proto";

message GachaItem {
  bool is_flash_card = 8;
  repeated GachaTransferItem transfer_items = 6;
  bool is_gacha_item_new = 13;
  ItemParam gacha_item = 5;
  repeated ItemParam token_item_list = 10;
}


message GachaOpenWishNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1561;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 gacha_schedule_id = 1;
  uint32 gacha_type = 10;
}


message GachaSimpleInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1547;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  bool is_new = 11;
}


message GachaStageData {
  uint32 stage_id = 6;
  bool is_open = 14;
  map<uint32, uint32> target_num_map = 1;
}

import "ItemParam.proto";

message GachaTransferItem {
  ItemParam item = 1;
  bool is_transfer_item_new = 11;
}


message GachaUpInfo {
  uint32 item_parent_type = 15;
  repeated uint32 item_id_list = 6;
}


message GachaWishReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1600;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 gacha_type = 3;
  uint32 gacha_schedule_id = 12;
  uint32 item_id = 9;
}


message GachaWishRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1543;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 wish_progress = 6;
  uint32 wish_item_id = 15;
  uint32 gacha_schedule_id = 11;
  int32 retcode = 13;
  uint32 wish_max_progress = 10;
  uint32 gacha_type = 8;
}

import "Item.proto";

message GadgetAutoPickDropInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 899;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated Item item_list = 15;
}


enum GadgetBornType {
  GADGET_BORN_TYPE_NONE = 0;
  GADGET_BORN_TYPE_IN_AIR = 1;
  GADGET_BORN_TYPE_PLAYER = 2;
  GADGET_BORN_TYPE_MONSTER_HIT = 3;
  GADGET_BORN_TYPE_MONSTER_DIE = 4;
  GADGET_BORN_TYPE_GADGET = 5;
  GADGET_BORN_TYPE_GROUND = 6;
}


message GadgetChainLevelChangeNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 837;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  map<uint32, uint32> gadget_chain_level_map = 13;
}


message GadgetChainLevelUpdateNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 873;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  map<uint32, uint32> gadget_chain_level_map = 2;
}

import "CustomGadgetTreeInfo.proto";

message GadgetChangeLevelTagReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 875;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 gadget_entity_id = 14;
  uint32 level_tag_id = 6;
  CustomGadgetTreeInfo combination_info = 7;
}


message GadgetChangeLevelTagRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 834;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 2;
}


message GadgetCrucibleInfo {
  uint32 mp_play_id = 1;
  uint32 prepare_end_time = 2;
}

import "CustomGadgetTreeInfo.proto";

message GadgetCustomTreeInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 846;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  CustomGadgetTreeInfo custom_gadget_tree_info = 8;
  uint32 gadget_entity_id = 7;
}

import "ItemParam.proto";

message GadgetGeneralRewardInfo {
  uint32 resin = 1;
  uint32 dead_time = 2;
  repeated uint32 remain_uid_list = 3;
  repeated uint32 qualify_uid_list = 4;
  ItemParam item_param = 5;
}

import "GadgetGeneralRewardInfo.proto";

message GadgetGeneralRewardInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 848;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 entity_id = 10;
  GadgetGeneralRewardInfo general_reward_info = 12;
}


enum GadgetGuestBanDrop {
  GADGET_GUEST_BAN_DROP_NONE = 0;
  GADGET_GUEST_BAN_DROP_DIE_LUA = 1;
  GADGET_GUEST_BAN_DROP_SUBFIELD = 2;
}

import "InterOpType.proto";
import "ResinCostType.proto";

message GadgetInteractReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 879;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 gadget_id = 1;
  ResinCostType resin_cost_type = 13;
  uint32 gadget_entity_id = 8;
  InterOpType op_type = 2;
  uint32 ui_interact_id = 11;
  bool is_use_condense_resin = 6;
}

import "InterOpType.proto";
import "InteractType.proto";

message GadgetInteractRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 830;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  InteractType interact_type = 2;
  uint32 gadget_id = 11;
  int32 retcode = 7;
  uint32 gadget_entity_id = 1;
  InterOpType op_type = 8;
}


message GadgetPlayDataNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 827;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 entity_id = 13;
  uint32 progress = 6;
  uint32 play_type = 11;
}

import "GadgetCrucibleInfo.proto";

message GadgetPlayInfo {
  uint32 play_type = 1;
  uint32 duration = 2;
  repeated uint32 progress_stage_list = 3;
  uint32 start_cd = 4;
  uint32 start_time = 5;
  uint32 progress = 6;
  oneof play_info {
    GadgetCrucibleInfo crucible_info = 21;
  }
}


message GadgetPlayStartNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 878;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 start_time = 12;
  uint32 play_type = 13;
  uint32 entity_id = 10;
}

import "GadgetPlayUidInfo.proto";

message GadgetPlayStopNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 857;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated GadgetPlayUidInfo uid_info_list = 1;
  uint32 play_type = 3;
  bool is_win = 8;
  uint32 entity_id = 15;
  uint32 score = 5;
  uint32 cost_time = 14;
}


enum GadgetPlayType {
  GADGET_PLAY_TYPE_NONE = 0;
  GADGET_PLAY_TYPE_CRUSIBLE = 1;
}

import "ProfilePicture.proto";

message GadgetPlayUidInfo {
  string online_id = 5;
  uint32 score = 1;
  string nickname = 11;
  uint32 icon = 15;
  uint32 battle_watcher_id = 9;
  ProfilePicture profile_picture = 6;
  uint32 uid = 12;
}


message GadgetPlayUidOpNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 839;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  string param_str = 14;
  uint32 op = 2;
  uint32 entity_id = 10;
  repeated uint32 param_list = 12;
  uint32 play_type = 9;
  repeated uint32 uid_list = 5;
}


message GadgetStateNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 856;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 gadget_entity_id = 7;
  uint32 gadget_state = 5;
  bool is_enable_interact = 6;
}


message GadgetTalkChangeNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 816;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 cur_gadget_talk_state = 12;
  uint32 gadget_entity_id = 13;
}


message GalleryBalloonScoreNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5556;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  map<uint32, uint32> uid_score_map = 12;
  uint32 gallery_id = 11;
}


message GalleryBalloonShootNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5530;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 trigger_entity_id = 3;
  uint32 combo = 15;
  uint64 combo_disable_time = 9;
  uint32 cur_score = 1;
  int32 add_score = 2;
  uint32 gallery_id = 11;
}


message GalleryBounceConjuringHitNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5542;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 gallery_id = 8;
  uint32 add_score = 15;
  bool is_perfect = 11;
}


message GalleryBrokenFloorFallNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5539;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 fall_count = 10;
  uint32 gallery_id = 7;
}


message GalleryBulletHitNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5527;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 gallery_id = 3;
  uint32 hit_count = 7;
}


message GalleryCrystalLinkBuffInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5516;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  bool is_buff_valid = 11;
  uint32 buff_id = 14;
  uint32 gallery_id = 6;
}


message GalleryCrystalLinkKillMonsterNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5576;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 score = 5;
  uint32 gallery_id = 1;
}


message GalleryFallCatchNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5600;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 add_score = 1;
  uint32 gallery_id = 7;
  uint32 cur_score = 11;
  uint32 time_cost = 15;
  bool is_ground = 8;
  map<uint32, uint32> ball_catch_count_map = 14;
}

import "FallPlayerBrief.proto";

message GalleryFallScoreNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5543;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  map<uint32, FallPlayerBrief> uid_brief_map = 10;
  uint32 gallery_id = 15;
}


message GalleryFlowerCatchNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5578;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 gallery_id = 13;
  uint32 cur_score = 2;
  uint32 add_score = 12;
}


message GalleryFlowerStartParam {
  uint32 target_score = 9;
}


message GalleryIslandPartyDownHillInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5537;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 coin = 8;
  uint32 gallery_id = 14;
  uint32 total_kill_monster_count = 7;
}


message GalleryPreStartNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5557;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 gallery_id = 4;
  uint32 pre_start_end_time = 1;
}


enum GalleryStageType {
  GALLERY_STAGE_TYPE_NONE = 0;
  GALLERY_STAGE_TYPE_PRESTART = 1;
  GALLERY_STAGE_TYPE_START = 2;
}

import "GalleryFlowerStartParam.proto";

message GalleryStartNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5579;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 gallery_id = 6;
  uint32 end_time = 13;
  uint32 owner_uid = 8;
  uint32 start_time = 7;
  uint32 player_count = 9;
  oneof detail {
    GalleryFlowerStartParam flower_start_param = 11;
  }
}


enum GalleryStartSource {
  GALLERY_START_SOURCE_BY_NONE = 0;
  GALLERY_START_SOURCE_BY_MATCH = 1;
  GALLERY_START_SOURCE_BY_DRAFT = 2;
}


message GalleryStopNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5519;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 gallery_id = 8;
}


enum GalleryStopReason {
  GALLERY_STOP_REASON_NONE = 0;
  GALLERY_STOP_REASON_TIMEUP = 1;
  GALLERY_STOP_REASON_CLIENT_INTERRUPT = 2;
  GALLERY_STOP_REASON_LUA_INTERRUPT_SUCCESS = 3;
  GALLERY_STOP_REASON_LUA_INTERRUPT_FAIL = 4;
  GALLERY_STOP_REASON_OWNER_LEAVE_SCENE = 5;
  GALLERY_STOP_REASON_PLAY_INIT_FAILED = 6;
  GALLERY_STOP_REASON_OTHER_PLAYER_ENTER = 7;
  GALLERY_STOP_REASON_AVATAR_DIE = 8;
  GALLERY_STOP_REASON_FINISHED = 9;
  GALLERY_STOP_REASON_FUNGUS_ALL_DIE = 10;
  GALLERY_STOP_REASON_LIFE_COUNT_ZERO = 11;
  GALLERY_STOP_REASON_Unk3300_DFPLGCGIIDM = 12;
}


message GallerySumoKillMonsterNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5590;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 score = 6;
  uint32 gallery_id = 11;
  uint32 kill_elite_monster_num = 14;
  uint32 kill_normal_monster_num = 4;
}

import "GalleryStartSource.proto";

message GalleryWillStartCountdownNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5505;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 gallery_id = 13;
  GalleryStartSource start_source = 14;
  uint32 end_time = 15;
  bool is_end = 6;
}


message GameplayRecommendationElementReliquaryRequest {
  uint32 element_type = 2;
  uint32 equip_type = 3;
}

import "GameplayRecommendationReliquaryMainPropData.proto";

message GameplayRecommendationElementReliquaryResponse {
  uint32 element_type = 1;
  uint32 equip_type = 9;
  repeated GameplayRecommendationReliquaryMainPropData main_prop_data_list = 5;
}


message GameplayRecommendationReliquaryMainPropData {
  uint32 permillage = 5;
  uint32 main_prop_id = 10;
}


message GameplayRecommendationReliquaryRequest {
  uint32 equip_type = 9;
}

import "GameplayRecommendationReliquaryMainPropData.proto";

message GameplayRecommendationReliquaryResponse {
  uint32 equip_type = 11;
  repeated GameplayRecommendationReliquaryMainPropData main_prop_data_list = 2;
}


message GameplayRecommendationSkillRequest {
  uint32 skill_depot_id = 4;
}


message GameplayRecommendationSkillResponse {
  repeated uint32 skill_id_list = 1;
  uint32 skill_depot_id = 11;
}


message GatherGadgetInfo {
  uint32 item_id = 1;
  bool is_forbid_guest = 2;
}


enum GCGActionType {
  GCG_ACTION_TYPE_NONE = 0;
  GCG_ACTION_TYPE_SPECIAL_PHASE = 1;
  GCG_ACTION_TYPE_NEXT_PHASE = 2;
  GCG_ACTION_TYPE_DRAW = 3;
  GCG_ACTION_TYPE_REDRAW = 4;
  GCG_ACTION_TYPE_SELECT_ONSTAGE = 5;
  GCG_ACTION_TYPE_ROLL = 6;
  GCG_ACTION_TYPE_REROLL = 7;
  GCG_ACTION_TYPE_ATTACK = 8;
  GCG_ACTION_TYPE_PLAY_CARD = 9;
  GCG_ACTION_TYPE_PASS = 10;
  GCG_ACTION_TYPE_REBOOT = 11;
  GCG_ACTION_TYPE_GAME_OVER = 12;
  GCG_ACTION_TYPE_TRIGGER = 13;
  GCG_ACTION_TYPE_PHASE_EXIT = 14;
  GCG_ACTION_TYPE_CUSTOM = 15;
  GCG_ACTION_TYPE_NOTIFY_COST = 16;
  GCG_ACTION_TYPE_AFTER_OPERATION = 17;
  GCG_ACTION_TYPE_USE_SKILL = 18;
  GCG_ACTION_TYPE_NOTIFY_SKILL_PREVIEW = 19;
  GCG_ACTION_TYPE_PREVIEW_ATTACK = 20;
  GCG_ACTION_TYPE_PREVIEW_AFTER_ATTACK = 21;
  GCG_ACTION_TYPE_SEND_MESSAGE = 22;
  GCG_ACTION_TYPE_WAITING_CHARACTER = 23;
  GCG_ACTION_TYPE_TRIGGER_SKILL = 24;
  GCG_ACTION_TYPE_BEFORE_NEXT_OPERATION = 25;
}


message GCGApplyInviteBattleNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7984;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  bool is_agree = 4;
  int32 retcode = 14;
}


message GCGApplyInviteBattleReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7032;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  bool is_agree = 12;
}


message GCGApplyInviteBattleRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7754;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 punish_end_time = 6;
  int32 retcode = 8;
}


message GCGAskDuelReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7034;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}

import "GCGDuel.proto";

message GCGAskDuelRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7564;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  GCGDuel duel = 9;
  int32 retcode = 2;
}

import "Uint32Pair.proto";

message GCGAttackCostInfo {
  repeated Uint32Pair cost_map = 1;
  uint32 skill_id = 7;
}


message GCGBackToDuelReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7015;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  bool is_back = 10;
}


message GCGBackToDuelRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7039;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 14;
}


message GCGBasicDataNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7739;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 level = 6;
  uint32 exp = 4;
  repeated uint32 level_reward_taken_list = 14;
}


message GCGBossChallengeData {
  repeated uint32 unlock_level_id_list = 3;
  uint32 id = 10;
}

import "GCGBossChallengeData.proto";

message GCGBossChallengeUpdateNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7852;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  GCGBossChallengeData boss_challenge = 7;
}

import "GCGSkillLimitsInfo.proto";
import "GCGToken.proto";

message GCGCard {
  repeated uint32 tag_list = 7;
  uint32 guid = 11;
  bool is_show = 15;
  repeated GCGToken token_list = 8;
  uint32 face_type = 2;
  repeated uint32 skill_id_list = 13;
  repeated GCGSkillLimitsInfo skill_limits_list = 3;
  uint32 id = 6;
  uint32 controller_id = 5;
}

import "GCGSkillLimitsInfo.proto";

message GCGCardSkillLimitsInfo {
  repeated GCGSkillLimitsInfo skill_limits_list = 1;
}


message GCGChallengeData {
  uint32 challenge_id = 1;
  uint32 challenge_type = 2;
  repeated uint32 param_list = 3;
  uint32 progress = 4;
}

import "GCGDuelChallenge.proto";

message GCGChallengeUpdateNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7270;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 server_seq = 15;
  GCGDuelChallenge challenge = 1;
}

import "GCGSkillPreviewInfo.proto";

message GCGChangeOnstageInfo {
  bool is_quick = 11;
  uint32 card_guid = 6;
  GCGSkillPreviewInfo change_onstage_preview_info = 5;
}


enum GCGClientPerformType {
  GCG_CLIENT_PERFORM_TYPE_INVALID = 0;
  GCG_CLIENT_PERFORM_TYPE_CARD_EXCHANGE = 1;
  GCG_CLIENT_PERFORM_TYPE_FIRST_HAND = 2;
  GCG_CLIENT_PERFORM_TYPE_REROLL = 3;
}


message GCGClientSettleReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7035;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}


message GCGClientSettleRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7532;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 close_time = 5;
  int32 retcode = 9;
}

import "ProfilePicture.proto";

message GCGControllerShowInfo {
  string psn_id = 12;
  string nick_name = 10;
  string online_id = 15;
  ProfilePicture profile_picture = 3;
  uint32 controller_id = 11;
}

import "GCGAttackCostInfo.proto";
import "GCGPlayCardCostInfo.proto";
import "GCGSelectOnStageCostInfo.proto";

message GCGCostReviseInfo {
  repeated uint32 can_use_hand_card_id_list = 15;
  repeated GCGSelectOnStageCostInfo select_on_stage_cost_list = 13;
  repeated GCGPlayCardCostInfo play_card_cost_list = 5;
  repeated GCGAttackCostInfo attack_cost_list = 12;
  bool is_can_attack = 14;
}


message GCGDamageDetail {
  uint32 card_guid = 4;
  uint32 skill_id = 12;
}


message GCGDebugReplayNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7071;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  string json_str = 15;
}


enum GCGDiceSideType {
  GCG_DICE_SIDE_TYPE_INVALID = 0;
  GCG_DICE_SIDE_TYPE_CRYO = 1;
  GCG_DICE_SIDE_TYPE_HYDRO = 2;
  GCG_DICE_SIDE_TYPE_PYRO = 3;
  GCG_DICE_SIDE_TYPE_ELECTRO = 4;
  GCG_DICE_SIDE_TYPE_GEO = 5;
  GCG_DICE_SIDE_TYPE_DENDRO = 6;
  GCG_DICE_SIDE_TYPE_ANEMO = 7;
  GCG_DICE_SIDE_TYPE_PAIMON = 8;
}


message GCGDSBanCardNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7135;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint32 card_list = 10;
}


message GCGDSCardBackUnlockNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7078;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 card_back_id = 13;
}


message GCGDSCardData {
  uint32 num = 11;
  uint32 face_type = 5;
  uint32 card_id = 4;
  repeated uint32 Unk3300_CIGGHHIHJFM = 14;
  repeated uint32 Unk3300_OAFMDJCPCJH = 6;
  uint32 proficiency = 10;
}


message GCGDSCardFaceUnlockNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7767;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 face_type = 13;
  uint32 card_id = 8;
}


message GCGDSCardFaceUpdateNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7066;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 card_id = 9;
  uint32 face_type = 1;
}


message GCGDSCardNumChangeNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7244;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 num = 1;
  uint32 card_id = 15;
}


message GCGDSCardProficiencyNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7969;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 proficiency = 10;
  uint32 card_id = 13;
}


message GCGDSChangeCardBackReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7680;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 card_back_id = 15;
  uint32 deck_id = 13;
}


message GCGDSChangeCardBackRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7011;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 13;
  uint32 card_back_id = 5;
  uint32 deck_id = 9;
}


message GCGDSChangeCardFaceReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7010;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 card_id = 9;
  uint32 face_type = 14;
}


message GCGDSChangeCardFaceRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7549;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 face_type = 9;
  int32 retcode = 5;
  uint32 card_id = 8;
}


message GCGDSChangeCurDeckReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7257;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 deck_id = 13;
}


message GCGDSChangeCurDeckRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7908;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 6;
  uint32 deck_id = 3;
}


message GCGDSChangeDeckNameReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7463;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  bool Unk3300_OIPMFIIBPHB = 11;
  uint32 deck_id = 2;
  string name = 1;
}


message GCGDSChangeDeckNameRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7617;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  bool Unk3300_OIPMFIIBPHB = 5;
  int32 retcode = 15;
  uint32 deck_id = 10;
  string name = 7;
}


message GCGDSChangeFieldReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7788;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 field_id = 3;
  uint32 deck_id = 13;
}


message GCGDSChangeFieldRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7036;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 14;
  uint32 deck_id = 6;
  uint32 field_id = 1;
}


message GCGDSCurDeckChangeNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7769;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 deck_id = 3;
}

import "GCGDSCardData.proto";
import "GCGDSDeckData.proto";

message GCGDSDataNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7850;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 cur_deck_id = 8;
  repeated GCGDSDeckData deck_list = 3;
  repeated uint32 unlock_card_back_id_list = 10;
  repeated GCGDSCardData card_list = 9;
  repeated uint32 unlock_field_id_list = 5;
  repeated uint32 unlock_deck_id_list = 6;
}


message GCGDSDeckData {
  fixed32 create_time = 5;
  uint32 field_id = 13;
  uint32 card_back_id = 9;
  repeated uint32 card_list = 1;
  repeated uint32 character_card_list = 7;
  uint32 id = 12;
  string name = 10;
  bool is_valid = 15;
}


message GCGDSDeckSaveReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7713;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 deck_id = 4;
  repeated uint32 card_list = 11;
  repeated uint32 character_card_list = 6;
  string name = 5;
}


message GCGDSDeckSaveRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7459;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 9;
  bool is_valid = 5;
  uint32 deck_id = 15;
  fixed32 create_time = 7;
}


message GCGDSDeckUnlockNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7427;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 deck_id = 14;
}


message GCGDSDeckUpdateNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7751;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  bool is_valid = 2;
  uint32 deck_id = 15;
}


message GCGDSDeleteDeckReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7821;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 deck_id = 1;
}


message GCGDSDeleteDeckRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7067;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 deck_id = 14;
  int32 retcode = 13;
}


message GCGDSFieldUnlockNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7860;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 field_id = 12;
}


message GCGDSTakeCardProficiencyRewardReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7001;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 reward_index = 15;
  uint32 card_id = 3;
}


message GCGDSTakeCardProficiencyRewardRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7718;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 card_id = 6;
  int32 retcode = 1;
  uint32 reward_index = 15;
}

import "GCGCard.proto";
import "GCGControllerShowInfo.proto";
import "GCGCostReviseInfo.proto";
import "GCGDuelChallenge.proto";
import "GCGGameBusinessType.proto";
import "GCGMessagePack.proto";
import "GCGPVEIntention.proto";
import "GCGPhase.proto";
import "GCGPlayerField.proto";
import "Unk3300_ADHENCIFKNI.proto";

message GCGDuel {
  uint32 server_seq = 3;
  repeated GCGControllerShowInfo show_info_list = 7;
  repeated uint32 forbid_finish_challenge_list = 192;
  repeated GCGCard card_list = 1;
  uint32 Unk3300_BIANMOPDEHO = 9;
  GCGCostReviseInfo cost_revise = 8;
  uint32 game_id = 4;
  repeated GCGPlayerField field_list = 5;
  repeated Unk3300_ADHENCIFKNI Unk3300_CDCMBOKBLAK = 1987;
  GCGGameBusinessType business_type = 13;
  repeated GCGPVEIntention intention_list = 2;
  repeated GCGDuelChallenge challenge_list = 1617;
  repeated GCGCard history_card_list = 1872;
  uint32 round = 11;
  uint32 controller_id = 12;
  repeated GCGMessagePack history_msg_pack_list = 797;
  uint32 Unk3300_JHDDNKFPINA = 10;
  repeated uint32 card_id_list = 6;
  uint32 Unk3300_JBBMBKGOONO = 15;
  GCGPhase phase = 14;
}


message GCGDuelChallenge {
  uint32 challenge_id = 12;
  uint32 cur_progress = 2;
  uint32 total_progress = 4;
}

import "GCGChallengeData.proto";
import "PlatformType.proto";

message GCGDuelExtra {
  repeated uint32 card_id_list = 1;
  uint32 field_id = 2;
  uint32 card_back_id = 3;
  map<uint32, uint32> card_face_map = 4;
  repeated GCGChallengeData challenge_list = 5;
  uint32 score = 6;
  bool is_match_ai = 7;
  uint32 ai_deck_id = 8;
  bool is_internal = 9;
  repeated uint32 forbid_finish_challenge_list = 10;
  uint32 level = 11;
  uint32 client_version = 12;
  PlatformType platform_type = 13;
}


enum GCGEndReason {
  GCG_END_REASON_DEFAULT = 0;
  GCG_END_REASON_DIE = 1;
  GCG_END_REASON_SURRENDER = 2;
  GCG_END_REASON_DISCONNECTED = 3;
  GCG_END_REASON_ROUND_LIMIT = 4;
  GCG_END_REASON_GM = 5;
  GCG_END_REASON_NO_PLAYER = 6;
  GCG_END_REASON_GIVE_UP = 7;
  GCG_END_REASON_INIT_TIMEOUT = 8;
  GCG_END_REASON_EFFECT = 9;
  GCG_END_REASON_Unk3300_INAPHKAKKHF = 10;
}

import "GCGGameBusinessType.proto";
import "GCGPlayerBriefData.proto";

message GCGGameBriefData {
  uint32 Unk3300_NCLDOGNCHGF = 13;
  GCGGameBusinessType business_type = 8;
  uint32 Unk3300_FJJDMIBIBJN = 14;
  uint32 platform_type = 6;
  uint32 game_id = 12;
  repeated GCGPlayerBriefData player_brief_list = 5;
}

import "GCGGameBriefData.proto";

message GCGGameBriefDataNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7824;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  GCGGameBriefData gcg_brief_data = 3;
  bool is_new_game = 4;
}


enum GCGGameBusinessType {
  GCG_GAME_BUSINESS_TYPE_NONE = 0;
  GCG_GAME_BUSINESS_TYPE_GM = 1;
  GCG_GAME_BUSINESS_TYPE_MATCH = 2;
  GCG_GAME_BUSINESS_TYPE_PVP = 3;
  GCG_GAME_BUSINESS_TYPE_TAVERN_CHALLENGE = 4;
  GCG_GAME_BUSINESS_TYPE_CONST_CHALLENGE = 5;
  GCG_GAME_BUSINESS_TYPE_WORLD_CHALLENGE = 6;
  GCG_GAME_BUSINESS_TYPE_BOSS_CHALLENGE = 7;
  GCG_GAME_BUSINESS_TYPE_WEEK_CHALLENGE = 8;
  GCG_GAME_BUSINESS_TYPE_BREAK_CHALLENGE = 9;
  GCG_GAME_BUSINESS_TYPE_QUEST = 10;
  GCG_GAME_BUSINESS_TYPE_GUIDE_GROUP = 11;
}


message GCGGameCreateFailReasonNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7658;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  enum GCGGameCreateReason {
    GCG_GAME_CREATE_REASON_NONE = 0;
    GCG_GAME_CREATE_REASON_GAME_MAX = 1;
    GCG_GAME_CREATE_REASON_CLIENT_VERSION_NOT_LATEST = 2;
    GCG_GAME_CREATE_REASON_RESOURCE_NOT_COMPLETE = 3;
    GCG_GAME_CREATE_REASON_TIMEOUT = 4;
    GCG_GAME_CREATE_REASON_Unk3300_EMCDFGGFFAH = 5;
  }

  GCGGameCreateReason reason = 7;
}


message GCGGameMaxNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7226;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }
}


message GCGGrowthLevelNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7343;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 level = 10;
  uint32 exp = 2;
}


message GCGGrowthLevelRewardNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7934;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint32 level_reward_taken_list = 2;
}


message GCGGrowthLevelTakeRewardReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7486;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 level = 12;
}


message GCGGrowthLevelTakeRewardRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7602;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 4;
  uint32 level = 11;
}


message GCGHeartBeatNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7576;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 server_seq = 12;
}


message GCGInitFinishReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7348;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}


message GCGInitFinishRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7369;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 4;
}


enum GCGIntentionChangeType {
  GCG_INTENTION_CHANGE_TYPE_NONE = 0;
  GCG_INTENTION_CHANGE_TYPE_RM = 1;
}


message GCGInviteBattleNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7448;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 confirm_end_time = 1;
}


message GCGInviteGuestBattleReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7202;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 uid = 8;
}


message GCGInviteGuestBattleRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7997;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 uid = 12;
  int32 retcode = 13;
  uint32 punish_end_time = 3;
  uint32 confirm_end_time = 7;
}


message GCGLevelChallengeDeleteNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7993;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint32 level_id_list = 6;
}


message GCGLevelChallengeFinishNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7004;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 level_id = 14;
  repeated uint32 finished_challenge_id_list = 3;
}

import "GCGBossChallengeData.proto";
import "GCGLevelData.proto";

message GCGLevelChallengeNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7183;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated GCGBossChallengeData unlock_boss_challenge_list = 11;
  repeated uint32 unlock_world_challenge_list = 3;
  repeated GCGLevelData level_list = 4;
}


message GCGLevelData {
  repeated uint32 finished_challenge_id_list = 13;
  uint32 level_id = 7;
}


enum GCGLevelType {
  GCG_LEVEL_TYPE_NONE = 0;
  GCG_LEVEL_TYPE_CONST = 1;
  GCG_LEVEL_TYPE_WEEK = 2;
  GCG_LEVEL_TYPE_WORLD = 3;
  GCG_LEVEL_TYPE_BOSS = 4;
  GCG_LEVEL_TYPE_CHARACTER = 5;
  GCG_LEVEL_TYPE_BREAK = 6;
  GCG_LEVEL_TYPE_QUEST = 7;
  GCG_LEVEL_TYPE_GUIDE_GROUP = 8;
}


message GCGLimitsInfo {
  uint32 Unk3300_MNCNOLHHGPA = 7;
  uint32 Unk3300_PHKPKFBDGJF = 13;
}

import "MatchPlayerInfo.proto";

message GCGMatchInfo {
  repeated MatchPlayerInfo player_list = 15;
}

import "GCGMsgAddCards.proto";
import "GCGMsgAddDice.proto";
import "GCGMsgCardUpdate.proto";
import "GCGMsgCharDie.proto";
import "GCGMsgClientPerform.proto";
import "GCGMsgCostDice.proto";
import "GCGMsgCostRevise.proto";
import "GCGMsgDiceReroll.proto";
import "GCGMsgDiceRoll.proto";
import "GCGMsgDuelDataChange.proto";
import "GCGMsgGameOver.proto";
import "GCGMsgModifyAdd.proto";
import "GCGMsgModifyRemove.proto";
import "GCGMsgMoveCard.proto";
import "GCGMsgNewCard.proto";
import "GCGMsgNoDamageSkillResult.proto";
import "GCGMsgOpTimer.proto";
import "GCGMsgPVEIntentionChange.proto";
import "GCGMsgPVEIntentionInfo.proto";
import "GCGMsgPass.proto";
import "GCGMsgPhaseChange.proto";
import "GCGMsgPhaseContinue.proto";
import "GCGMsgReactionBegin.proto";
import "GCGMsgReactionEnd.proto";
import "GCGMsgRemoveCards.proto";
import "GCGMsgSelectOnStage.proto";
import "GCGMsgSelectOnStageByEffect.proto";
import "GCGMsgSkillLimitsChange.proto";
import "GCGMsgSkillResult.proto";
import "GCGMsgTokenChange.proto";
import "GCGMsgUpdateController.proto";
import "GCGMsgUseSkill.proto";
import "GCGMsgUseSkillEnd.proto";
import "GCGMsgWaitingListChange.proto";

message GCGMessage {
  oneof message {
    GCGMsgTokenChange token_change = 2;
    GCGMsgPhaseChange phase_change = 10;
    GCGMsgAddCards add_cards = 5;
    GCGMsgRemoveCards remove_cards = 12;
    GCGMsgSelectOnStage select_on_stage = 6;
    GCGMsgDiceRoll dice_roll = 14;
    GCGMsgDiceReroll dice_reroll = 15;
    GCGMsgPass pass = 8;
    GCGMsgCharDie char_die = 4;
    GCGMsgSkillResult skill_result = 3;
    GCGMsgCostDice cost_dice = 13;
    GCGMsgAddDice add_dice = 7;
    GCGMsgMoveCard move_card = 11;
    GCGMsgUseSkill use_skill = 1;
    GCGMsgNewCard new_card = 296;
    GCGMsgUpdateController update_controller = 1111;
    GCGMsgModifyAdd modify_add = 1733;
    GCGMsgModifyRemove modify_remove = 2014;
    GCGMsgUseSkillEnd use_skill_end = 1368;
    GCGMsgDuelDataChange duel_data_change = 1791;
    GCGMsgClientPerform client_perform = 1677;
    GCGMsgGameOver game_over = 632;
    GCGMsgOpTimer op_timer = 154;
    GCGMsgWaitingListChange waiting_list_change = 1991;
    GCGMsgCardUpdate card_update = 1702;
    GCGMsgSelectOnStageByEffect select_on_stage_by_effect = 1737;
    GCGMsgCostRevise cost_revise = 468;
    GCGMsgPhaseContinue phase_continue = 1157;
    GCGMsgPVEIntentionInfo pve_intention_info = 850;
    GCGMsgPVEIntentionChange pve_intention_change = 1268;
    GCGMsgSkillLimitsChange skill_limits_change = 710;
    GCGMsgNoDamageSkillResult no_damage_skill_result = 773;
    GCGMsgReactionBegin reaction_begin = 243;
    GCGMsgReactionEnd reaction_end = 1172;
  }
}

import "GCGActionType.proto";
import "GCGMessage.proto";

message GCGMessagePack {
  GCGActionType action_type = 9;
  repeated GCGMessage msg_list = 5;
  uint32 controller_id = 7;
}

import "GCGMessagePack.proto";

message GCGMessagePackNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7299;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 server_seq = 2;
  repeated GCGMessagePack msg_pack_list = 12;
}

import "GCGReason.proto";
import "GCGZoneType.proto";

message GCGMsgAddCards {
  GCGZoneType zone = 5;
  GCGReason reason = 7;
  repeated uint32 card_guid_list = 4;
  uint32 controller_id = 9;
  uint32 pos = 14;
}

import "GCGDiceSideType.proto";
import "GCGReason.proto";

message GCGMsgAddDice {
  map<uint32, GCGDiceSideType> Unk3300_KFKOGOKPIFN = 13;
  GCGReason reason = 10;
  int32 change_count = 6;
  map<uint32, GCGDiceSideType> Unk3300_PCMPCCLFEIM = 11;
  uint32 controller_id = 5;
}

import "GCGCard.proto";

message GCGMsgCardUpdate {
  GCGCard card = 14;
}


message GCGMsgCharDie {
  uint32 controller_id = 13;
  uint32 card_guid = 7;
}

import "GCGClientPerformType.proto";

message GCGMsgClientPerform {
  repeated uint32 param_list = 4;
  GCGClientPerformType perform_type = 1;
}

import "GCGReason.proto";

message GCGMsgCostDice {
  GCGReason reason = 1;
  repeated uint32 select_dice_index_list = 12;
  uint32 controller_id = 7;
}

import "GCGCostReviseInfo.proto";

message GCGMsgCostRevise {
  GCGCostReviseInfo cost_revise = 3;
  uint32 controller_id = 1;
}

import "GCGDiceSideType.proto";

message GCGMsgDiceReroll {
  uint32 controller_id = 1;
  repeated GCGDiceSideType dice_side_list = 8;
  repeated uint32 select_dice_index_list = 12;
}

import "GCGDiceSideType.proto";

message GCGMsgDiceRoll {
  uint32 controller_id = 9;
  uint32 dice_num = 3;
  repeated GCGDiceSideType dice_side_list = 14;
}


message GCGMsgDuelDataChange {
  uint32 round = 6;
}

import "GCGEndReason.proto";

message GCGMsgGameOver {
  GCGEndReason end_reason = 6;
  uint32 win_controller_id = 3;
}

import "GCGReason.proto";

message GCGMsgModifyAdd {
  uint32 owner_card_guid = 11;
  uint32 pos = 9;
  repeated uint32 card_guid_list = 3;
  uint32 controller_id = 12;
  GCGReason reason = 15;
}

import "GCGReason.proto";

message GCGMsgModifyRemove {
  uint32 owner_card_guid = 7;
  GCGReason reason = 3;
  uint32 controller_id = 14;
  repeated uint32 card_guid_list = 13;
}

import "GCGReason.proto";
import "GCGZoneType.proto";

message GCGMsgMoveCard {
  GCGZoneType to = 9;
  repeated uint32 fail_guid_list = 2;
  GCGZoneType from = 14;
  uint32 controller_id = 4;
  GCGReason reason = 13;
  repeated uint32 card_guid_list = 5;
}

import "GCGCard.proto";

message GCGMsgNewCard {
  GCGCard card = 15;
}

import "GCGDamageDetail.proto";

message GCGMsgNoDamageSkillResult {
  uint32 Unk3300_LPGLOCDDPCL = 7;
  uint32 Unk3300_EPNDCIAJOJP = 6;
  uint32 target_card_guid = 3;
  repeated GCGDamageDetail detail_list = 14;
  uint32 skill_id = 13;
  uint32 Unk3300_NNJAOEHNPPD = 4;
  uint32 Unk3300_NIGDCIGLAKE = 11;
}

import "GCGPhaseType.proto";

message GCGMsgOpTimer {
  GCGPhaseType phase = 13;
  uint32 controller_id = 14;
  fixed64 time_stamp = 15;
  fixed64 begin_time = 6;
}


message GCGMsgPass {
  uint32 controller_id = 14;
}

import "GCGPhaseType.proto";
import "Uint32Pair.proto";

message GCGMsgPhaseChange {
  GCGPhaseType before_phase = 15;
  GCGPhaseType after_phase = 3;
  repeated Uint32Pair allow_controller_map = 11;
}


message GCGMsgPhaseContinue {}


message GCGMsgPVEIntention {
  uint32 card_guid = 1;
  repeated uint32 skill_id_list = 2;
}

import "GCGIntentionChangeType.proto";
import "GCGMsgPVEIntention.proto";

message GCGMsgPVEIntentionChange {
  GCGIntentionChangeType change_type = 9;
  repeated GCGMsgPVEIntention change_intention_list = 6;
}

import "GCGMsgPVEIntention.proto";

message GCGMsgPVEIntentionInfo {
  map<uint32, GCGMsgPVEIntention> intention_map = 14;
}


message GCGMsgReactionBegin {
  uint32 card_guid = 4;
  uint32 skill_id = 13;
}


message GCGMsgReactionEnd {
  uint32 skill_id = 4;
}

import "GCGReason.proto";
import "GCGZoneType.proto";

message GCGMsgRemoveCards {
  repeated uint32 card_guid_list = 2;
  GCGReason reason = 13;
  uint32 controller_id = 9;
  GCGZoneType zone = 15;
}

import "GCGReason.proto";

message GCGMsgSelectOnStage {
  GCGReason reason = 11;
  uint32 controller_id = 12;
  uint32 card_guid = 4;
}


message GCGMsgSelectOnStageByEffect {
  uint32 card_guid = 15;
  uint32 controller_id = 2;
  uint32 skill_id = 6;
}

import "GCGCardSkillLimitsInfo.proto";

message GCGMsgSkillLimitsChange {
  map<uint32, GCGCardSkillLimitsInfo> card_limits_change_map = 3;
}

import "GCGDamageDetail.proto";

message GCGMsgSkillResult {
  uint32 Unk3300_NIGDCIGLAKE = 9;
  uint32 target_card_guid = 13;
  uint32 Unk3300_PDBAGJINFPF = 4;
  repeated GCGDamageDetail detail_list = 5;
  uint32 skill_id = 14;
  uint32 damage = 7;
  uint32 Unk3300_EPNDCIAJOJP = 12;
  uint32 Unk3300_NNJAOEHNPPD = 15;
  uint32 Unk3300_LPGLOCDDPCL = 10;
}

import "GCGReason.proto";

message GCGMsgTokenChange {
  uint32 token_type = 7;
  uint32 Unk3300_LLGHGEALDDI = 10;
  GCGReason reason = 3;
  uint32 Unk3300_LCNKBFBJDFM = 12;
  uint32 card_guid = 13;
}

import "Uint32Pair.proto";

message GCGMsgUpdateController {
  repeated Uint32Pair allow_controller_map = 10;
}


message GCGMsgUseSkill {
  uint32 skill_id = 3;
  uint32 card_guid = 10;
}


message GCGMsgUseSkillEnd {
  uint32 card_guid = 9;
  uint32 skill_id = 6;
}


message GCGMsgWaitingListChange {
  uint32 controller_id = 11;
  uint32 cur_index = 3;
}

import "GCGOperationAttack.proto";
import "GCGOperationOnStageSelect.proto";
import "GCGOperationPass.proto";
import "GCGOperationPlayCard.proto";
import "GCGOperationReboot.proto";
import "GCGOperationRedraw.proto";
import "GCGOperationReroll.proto";
import "GCGOperationSurrender.proto";

message GCGOperation {
  oneof op {
    GCGOperationRedraw op_redraw = 3;
    GCGOperationOnStageSelect op_select_on_stage = 9;
    GCGOperationReroll op_reroll = 4;
    GCGOperationAttack op_attack = 7;
    GCGOperationPass op_pass = 6;
    GCGOperationPlayCard op_play_card = 15;
    GCGOperationReboot op_reboot = 5;
    GCGOperationSurrender op_surrender = 10;
  }
}


message GCGOperationAttack {
  uint32 skill_id = 15;
  repeated uint32 cost_dice_index_list = 3;
}


message GCGOperationOnStageSelect {
  repeated uint32 cost_dice_index_list = 10;
  uint32 card_guid = 6;
}


message GCGOperationPass {}


message GCGOperationPlayCard {
  uint32 replace_card_guid = 8;
  repeated uint32 target_card_guid_list = 14;
  uint32 card_guid = 1;
  repeated uint32 cost_dice_index_list = 11;
}


message GCGOperationReboot {
  repeated uint32 dice_index_list = 2;
  repeated uint32 cost_card_guid_list = 14;
}


message GCGOperationRedraw {
  repeated uint32 card_list = 7;
}

import "GCGReplayControllerData.proto";
import "GCGReplayOperationData.proto";
import "Unk3300_PPKPCOCOMDH.proto";

message GCGOperationReplay {
  repeated Unk3300_PPKPCOCOMDH Unk3300_FKBLJIMBHEA = 6;
  uint32 seed = 1;
  repeated GCGReplayOperationData operation_data_list = 8;
  uint32 game_id = 2;
  repeated GCGReplayControllerData controller_data_list = 7;
}

import "GCGOperation.proto";

message GCGOperationReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7664;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 redirect_uid = 12;
  uint32 op_seq = 10;
  GCGOperation op = 8;
}


message GCGOperationReroll {
  repeated uint32 dice_index_list = 7;
}


message GCGOperationRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7285;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 op_seq = 8;
  int32 retcode = 7;
}


message GCGOperationSurrender {}

import "GCGPhaseType.proto";

message GCGPhase {
  GCGPhaseType phase_type = 4;
  map<uint32, uint32> allow_controller_map = 12;
}


enum GCGPhaseType {
  GCG_PHASE_TYPE_INVALID = 0;
  GCG_PHASE_TYPE_START = 1;
  GCG_PHASE_TYPE_DRAW = 2;
  GCG_PHASE_TYPE_ON_STAGE = 3;
  GCG_PHASE_TYPE_DICE = 4;
  GCG_PHASE_TYPE_MAIN = 5;
  GCG_PHASE_TYPE_END = 6;
  GCG_PHASE_TYPE_DIE = 7;
  GCG_PHASE_TYPE_FIN = 8;
  GCG_PHASE_TYPE_PRE_MAIN = 9;
  GCG_PHASE_TYPE_REROLL = 10;
}

import "Uint32Pair.proto";

message GCGPlayCardCostInfo {
  uint32 card_id = 9;
  repeated Uint32Pair cost_map = 12;
}

import "ProfilePicture.proto";

message GCGPlayerBriefData {
  string online_id = 5;
  uint32 uid = 9;
  uint32 controller_id = 10;
  ProfilePicture profile_picture = 11;
  string nick_name = 1;
  map<uint32, uint32> card_face_map = 14;
  repeated uint32 card_id_list = 13;
  string psn_id = 2;
}

import "GCGDiceSideType.proto";
import "GCGPVEIntention.proto";
import "GCGWaitingCharacter.proto";
import "GCGZone.proto";

message GCGPlayerField {
  uint32 Unk3300_IKJMGAHCFPM = 5;
  map<uint32, GCGZone> modify_zone_map = 7;
  uint32 Unk3300_GGHKFFADEAL = 731;
  GCGZone Unk3300_AOPJIOHMPOF = 10;
  uint32 Unk3300_FDFPHNDOJML = 12;
  GCGZone Unk3300_IPLMHKCNDLE = 1;
  GCGZone Unk3300_EIHOMDLENMK = 9;
  repeated GCGWaitingCharacter waiting_list = 2;
  uint32 Unk3300_PBECINKKHND = 15;
  uint32 controller_id = 6;
  GCGZone Unk3300_INDJNJJJNKL = 11;
  GCGZone Unk3300_EFNAEFBECHD = 4;
  bool is_passed = 8;
  repeated GCGPVEIntention intention_list = 304;
  repeated GCGDiceSideType dice_side_list = 13;
  uint32 Unk3300_FJNPFBIHFGD = 3;
  uint32 Unk3300_GLNIFLOKBPM = 14;
}


message GCGPlayerGCGState {
  uint32 uid = 14;
  bool Unk3300_GIKOMFNNAAA = 11;
  bool Unk3300_DEKGMKCCGEG = 4;
}


message GCGPVEIntention {
  repeated uint32 skill_id_list = 14;
  uint32 card_guid = 15;
}


enum GCGReason {
  GCG_REASON_DEFAULT = 0;
  GCG_REASON_EFFECT = 1;
  GCG_REASON_COST = 2;
  GCG_REASON_GM = 3;
  GCG_REASON_ATTACK = 4;
  GCG_REASON_REBOOT = 5;
  GCG_REASON_PLAY_CARD = 6;
  GCG_REASON_QUICKLY_ONSTAGE = 7;
  GCG_REASON_REMOVE_AFTER_DIE = 8;
  GCG_REASON_INIT = 9;
  GCG_REASON_EFFECT_DAMAGE = 10;
  GCG_REASON_EFFECT_HEAL = 11;
  GCG_REASON_EFFECT_REVIVE = 12;
}


message GCGReplayControllerData {
  repeated uint32 card_id_list = 12;
  uint32 controller_id = 6;
}

import "GCGOperation.proto";

message GCGReplayOperationData {
  GCGOperation op = 1;
  uint32 controller_id = 8;
}


message GCGResourceStateNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7586;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  bool is_complete = 12;
}

import "Uint32Pair.proto";

message GCGSelectOnStageCostInfo {
  uint32 card_guid = 3;
  repeated Uint32Pair cost_map = 1;
}

import "GCGEndReason.proto";
import "GCGGameBusinessType.proto";
import "ItemParam.proto";

message GCGSettleNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7562;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated ItemParam reward_item_list = 8;
  repeated uint32 finished_challenge_id_list = 1;
  uint32 game_id = 3;
  bool is_win = 2;
  GCGGameBusinessType business_type = 5;
  uint32 win_controller_id = 11;
  repeated uint32 forbid_finish_challenge_list = 10;
  GCGEndReason reason = 4;
}


enum GCGSettleOption {
  GCG_SETTLE_OPTION_OPT_NONE = 0;
  GCG_SETTLE_OPTION_OPT_EXIT = 1;
  GCG_SETTLE_OPTION_OPT_CONTINUE = 2;
  GCG_SETTLE_OPTION_OPT_RESTART = 3;
}

import "GCGSettleOption.proto";

message GCGSettleOptionReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7600;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  GCGSettleOption option = 9;
}

import "GCGSettleOption.proto";

message GCGSettleOptionRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7110;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  GCGSettleOption option = 2;
  int32 retcode = 5;
}


enum GCGSkillHpChangeType {
  GCG_SKILL_HP_CHANGE_TYPE_NONE = 0;
  GCG_SKILL_HP_CHANGE_TYPE_DAMAGE = 1;
  GCG_SKILL_HP_CHANGE_TYPE_HEAL = 2;
}

import "GCGLimitsInfo.proto";

message GCGSkillLimitsInfo {
  uint32 skill_id = 1;
  repeated GCGLimitsInfo limits_list = 7;
}


message GCGSkillPreviewAskReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7858;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}


message GCGSkillPreviewAskRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7877;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 13;
}

import "GCGZoneType.proto";

message GCGSkillPreviewCardInfo {
  uint32 card_guid = 10;
  uint32 face_type = 2;
  uint32 controller_id = 11;
  uint32 card_id = 8;
  GCGZoneType zone_type = 14;
  uint32 owner_card_guid = 3;
}

import "GCGSkillPreviewReactionInfo.proto";

message GCGSkillPreviewElementReactionInfo {
  repeated uint32 Unk3300_JOBNBDJHAPJ = 12;
  repeated uint32 Unk3300_BELBNDNDGAO = 14;
  repeated GCGSkillPreviewReactionInfo reaction_list = 1;
}

import "GCGSkillPreviewCardInfo.proto";

message GCGSkillPreviewExtraInfo {
  repeated GCGSkillPreviewCardInfo Unk3300_KIFFJGFDNKA = 6;
  repeated GCGSkillPreviewCardInfo Unk3300_GMEMMDJKCGN = 8;
}

import "GCGSkillHpChangeType.proto";

message GCGSkillPreviewHpInfo {
  GCGSkillHpChangeType change_type = 8;
  uint32 hp_change_value = 4;
}

import "GCGSkillPreviewCardInfo.proto";
import "GCGSkillPreviewElementReactionInfo.proto";
import "GCGSkillPreviewExtraInfo.proto";
import "GCGSkillPreviewHpInfo.proto";
import "GCGSkillPreviewOnstageChangeInfo.proto";
import "GCGSkillPreviewTokenChangeInfo.proto";

message GCGSkillPreviewInfo {
  repeated GCGSkillPreviewOnstageChangeInfo change_onstage_character_list = 6;
  repeated GCGSkillPreviewCardInfo Unk3300_DAJFJEDNLKK = 15;
  uint32 skill_id = 12;
  map<uint32, GCGSkillPreviewHpInfo> hp_info_map = 3;
  repeated GCGSkillPreviewCardInfo Unk3300_AGNONGELFGC = 2;
  GCGSkillPreviewExtraInfo extra_info = 11;
  map<uint32, GCGSkillPreviewElementReactionInfo> reaction_info_map = 14;
  map<uint32, GCGSkillPreviewTokenChangeInfo> card_token_change_map = 8;
}

import "GCGChangeOnstageInfo.proto";
import "GCGSkillPreviewInfo.proto";
import "GCGSkillPreviewPlayCardInfo.proto";

message GCGSkillPreviewNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7659;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 controller_id = 13;
  repeated GCGSkillPreviewInfo skill_preview_list = 15;
  repeated GCGChangeOnstageInfo change_onstage_preview_list = 3;
  repeated GCGSkillPreviewPlayCardInfo play_card_list = 11;
  uint32 onstage_card_guid = 6;
}


message GCGSkillPreviewOnstageChangeInfo {
  uint32 Unk3300_EHHDPPFDIFB = 8;
  uint32 Unk3300_BALADGFAPKL = 14;
}

import "GCGSkillPreviewInfo.proto";

message GCGSkillPreviewPlayCardInfo {
  uint32 hand_card_guid = 15;
  GCGSkillPreviewInfo play_card_info = 10;
  uint32 target_card_guid = 8;
}


message GCGSkillPreviewReactionInfo {
  uint32 Unk3300_AENPLEDPMJH = 3;
  uint32 Unk3300_PDEHPHJFAKD = 2;
}

import "GCGSkillPreviewTokenInfo.proto";

message GCGSkillPreviewTokenChangeInfo {
  repeated GCGSkillPreviewTokenInfo token_change_list = 10;
}


message GCGSkillPreviewTokenInfo {
  uint32 token_type = 11;
  uint32 Unk3300_MMIKPPJMHAD = 10;
  uint32 Unk3300_IKICJMEFEON = 3;
}

import "GCGLevelType.proto";

message GCGStartChallengeByCheckRewardReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7982;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 level_id = 13;
  GCGLevelType level_type = 3;
  uint32 config_id = 5;
}

import "GCGLevelType.proto";

message GCGStartChallengeByCheckRewardRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7727;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint32 exceeded_item_type_list = 3;
  uint32 level_id = 5;
  repeated uint32 exceeded_item_list = 8;
  GCGLevelType level_type = 2;
  uint32 config_id = 9;
  int32 retcode = 12;
}

import "GCGLevelType.proto";

message GCGStartChallengeReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7964;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  GCGLevelType level_type = 12;
  uint32 config_id = 7;
  uint32 level_id = 2;
}

import "GCGLevelType.proto";

message GCGStartChallengeRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7999;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 config_id = 8;
  uint32 level_id = 5;
  GCGLevelType level_type = 11;
  int32 retcode = 1;
}


message GCGTavernNpcInfo {
  uint32 id = 9;
  uint32 scene_point_id = 15;
  uint32 level_id = 6;
}

import "GCGTavernNpcInfo.proto";

message GCGTavernNpcInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7267;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated GCGTavernNpcInfo Unk3300_FKAKHMMIEBC = 12;
  repeated GCGTavernNpcInfo Unk3300_BAMLNENDLCM = 2;
  GCGTavernNpcInfo character_npc = 11;
}


message GCGTCInviteReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7341;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 character_id = 8;
  uint32 level_id = 11;
}


message GCGTCInviteRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7027;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 character_id = 9;
  int32 retcode = 11;
}


message GCGTCTavernChallengeData {
  repeated uint32 unlock_level_id_list = 13;
  uint32 character_id = 4;
}

import "GCGTCTavernChallengeData.proto";

message GCGTCTavernChallengeDataNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7356;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated GCGTCTavernChallengeData tavern_challenge_list = 5;
}

import "GCGTCTavernChallengeData.proto";

message GCGTCTavernChallengeUpdateNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7907;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  GCGTCTavernChallengeData tavern_challenge = 12;
}


message GCGTCTavernInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7268;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 level_id = 5;
  bool Unk3300_IMFJBNFMCHM = 11;
  bool Unk3300_MBGMHBNBKBK = 8;
  uint32 point_id = 4;
  uint32 element_type = 6;
  uint32 avatar_id = 9;
  uint32 character_id = 12;
}


message GCGToken {
  uint32 value = 14;
  uint32 key = 4;
}


message GCGWaitingCharacter {
  uint32 cond_count = 1;
  uint32 card_id = 11;
}


message GCGWeekChallengeInfo {
  uint32 npc_id = 9;
  uint32 unlock_time = 8;
  bool is_finished = 12;
}

import "GCGWeekChallengeInfo.proto";

message GCGWeekChallengeInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7058;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated GCGWeekChallengeInfo challenge_info_list = 3;
  uint32 next_refresh_time = 4;
  bool is_notify_npc_change = 7;
}


message GCGWorldChallengeUnlockNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7370;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint32 unlock_id_list = 6;
}


message GCGWorldPlayerGCGStateReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7375;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}

import "GCGPlayerGCGState.proto";

message GCGWorldPlayerGCGStateRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7248;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 15;
  repeated GCGPlayerGCGState player_state = 2;
}


message GCGZone {
  repeated uint32 card_list = 11;
}


enum GCGZoneType {
  GCG_ZONE_TYPE_INVALID = 0;
  GCG_ZONE_TYPE_DECK = 1;
  GCG_ZONE_TYPE_HAND = 2;
  GCG_ZONE_TYPE_CHARACTER = 3;
  GCG_ZONE_TYPE_MODIFY = 4;
  GCG_ZONE_TYPE_SUMMON = 5;
  GCG_ZONE_TYPE_ASSIST = 7;
  GCG_ZONE_TYPE_ONSTAGE = 8;
  GCG_ZONE_TYPE_RULE = 9;
}

import "GearLevelData.proto";
import "JigsawPictureData.proto";

message GearActivityDetailInfo {
  repeated GearLevelData gear_level_data_list = 2;
  JigsawPictureData jigsaw_picture_data = 8;
}

import "GearColumnInfo.proto";

message GearActivityFinishPlayGearReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 20236;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  bool use_clue = 10;
  uint32 level_id = 3;
  bool is_success = 8;
  repeated GearColumnInfo gear_column_info_list = 12;
}


message GearActivityFinishPlayGearRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 20776;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 level_id = 10;
  int32 retcode = 2;
  bool is_success = 8;
}


message GearActivityFinishPlayPictureReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 23793;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  bool is_success = 12;
}


message GearActivityFinishPlayPictureRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 20453;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 12;
  bool is_success = 8;
}


message GearActivityStartPlayGearReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 20589;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 level_id = 11;
}


message GearActivityStartPlayGearRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 23953;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 level_id = 4;
  int32 retcode = 12;
}


message GearActivityStartPlayPictureReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 24968;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}


message GearActivityStartPlayPictureRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 20011;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 3;
}


message GearColumnInfo {
  uint32 Unk3300_GHIBPOIAIGF = 6;
  bool Unk3300_KEEGLHMBAKM = 8;
  uint32 Unk3300_EDLLMBGNDEH = 2;
  uint32 gear_id = 7;
  bool Unk3300_HGIKKDOBANK = 15;
}


message GearLevelData {
  uint32 Unk3300_DFGHKDBENED = 4;
  bool is_finished = 3;
  bool is_open = 5;
  uint32 open_time = 11;
  uint32 level_id = 10;
  uint32 Unk3300_FIKPLGJIBGP = 15;
}

import "MatchPlayerInfo.proto";

message GeneralMatchInfo {
  uint32 match_id = 8;
  uint32 match_param = 3;
  repeated MatchPlayerInfo player_list = 12;
}


message GetActivityInfoReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2011;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated uint32 activity_id_list = 1;
}

import "ActivityInfo.proto";
import "Uint32Pair.proto";

message GetActivityInfoRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2043;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated Uint32Pair disable_transfer_point_interaction_list = 10;
  int32 retcode = 6;
  repeated ActivityInfo activity_info_list = 2;
  repeated uint32 activated_sale_id_list = 1;
}


message GetActivityScheduleReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2008;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}

import "ActivityScheduleInfo.proto";

message GetActivityScheduleRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2056;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated ActivityScheduleInfo activity_schedule_list = 15;
  int32 retcode = 8;
  uint32 remain_fly_sea_lamp_num = 7;
}


message GetActivityShopSheetInfoReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 761;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 shop_type = 10;
}

import "ActivityShopSheetInfo.proto";

message GetActivityShopSheetInfoRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 747;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 shop_type = 15;
  int32 retcode = 7;
  repeated ActivityShopSheetInfo sheet_info_list = 4;
}


message GetAllActivatedBargainDataReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 403;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}

import "BargainSnapshot.proto";

message GetAllActivatedBargainDataRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 433;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 12;
  repeated BargainSnapshot snapshot_list = 6;
}


message GetAllH5ActivityInfoReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5691;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}

import "H5ActivityInfo.proto";

message GetAllH5ActivityInfoRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5692;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 client_red_dot_timestamp = 3;
  repeated H5ActivityInfo h5_activity_info_list = 5;
  int32 retcode = 14;
}


message GetAllMailNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1499;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  bool is_collected = 5;
}


message GetAllMailReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1427;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  bool is_collected = 4;
}

import "MailData.proto";

message GetAllMailResultNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1425;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 page_index = 13;
  string transaction = 14;
  bool is_collected = 12;
  int32 retcode = 7;
  repeated MailData mail_list = 2;
  uint32 total_page_count = 6;
}

import "MailData.proto";

message GetAllMailRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1439;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated MailData mail_list = 15;
  bool is_collected = 12;
  int32 retcode = 1;
  bool is_truncated = 8;
}


message GetAllSceneGalleryInfoReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5561;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}

import "SceneGalleryInfo.proto";

message GetAllSceneGalleryInfoRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5547;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 3;
  repeated SceneGalleryInfo gallery_info_list = 12;
}


message GetAllUnlockNameCardReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4017;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}


message GetAllUnlockNameCardRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4005;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated uint32 name_card_list = 11;
  int32 retcode = 14;
}


message GetAreaExplorePointReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 267;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated uint32 area_id_list = 12;
}


message GetAreaExplorePointRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 215;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint32 explore_point_list = 4;
  int32 retcode = 2;
  repeated uint32 area_id_list = 11;
}


message GetAuthkeyReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1447;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 Unk3300_FGBHHPOKCJH = 6;
  string auth_appid = 13;
  uint32 Unk3300_DODLFCNOAMB = 15;
}


message GetAuthkeyRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1478;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 8;
  string authkey = 6;
  uint32 Unk3300_DODLFCNOAMB = 13;
  uint32 Unk3300_FGBHHPOKCJH = 3;
  string auth_appid = 7;
  string game_biz = 1;
}


message GetAuthSalesmanInfoReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2049;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 schedule_id = 14;
}


message GetAuthSalesmanInfoRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2087;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 schedule_id = 15;
  int32 retcode = 8;
  uint32 day_reward_id = 6;
}


message GetBargainDataReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 494;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 bargain_id = 8;
}

import "BargainSnapshot.proto";

message GetBargainDataRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 472;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 bargain_id = 4;
  BargainSnapshot snapshot = 15;
  int32 retcode = 2;
}


message GetBattlePassProductReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2612;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 battle_pass_product_play_type = 2;
}


message GetBattlePassProductRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2634;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 cur_schedule_id = 14;
  string product_id = 2;
  string price_tier = 9;
  int32 retcode = 10;
  uint32 battle_pass_product_play_type = 15;
}


message GetBlossomBriefInfoListReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2779;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated uint32 city_id_list = 7;
}

import "BlossomBriefInfo.proto";

message GetBlossomBriefInfoListRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2730;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  int32 retcode = 14;
  repeated BlossomBriefInfo brief_info_list = 1;
}


message GetBonusActivityRewardReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2525;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 bonus_activity_id = 5;
}

import "BonusActivityInfo.proto";

message GetBonusActivityRewardRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2542;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 11;
  BonusActivityInfo bonus_activity_info_list = 3;
}


message GetChatEmojiCollectionReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4088;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}

import "ChatEmojiCollectionData.proto";

message GetChatEmojiCollectionRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4066;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  ChatEmojiCollectionData chat_emoji_collection_data = 15;
  int32 retcode = 5;
}


message GetCityHuntingOfferReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4322;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 city_id = 3;
}

import "HuntingOfferData.proto";
import "HuntingPair.proto";

message GetCityHuntingOfferRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4335;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated HuntingOfferData hunting_offer_list = 2;
  int32 retcode = 9;
  uint32 cur_week_finished_count = 1;
  HuntingPair ongoing_hunting_pair = 15;
  uint32 next_refresh_time = 5;
  uint32 city_id = 12;
}


message GetCityReputationInfoReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2879;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 city_id = 15;
}

import "CityReputationInfo.proto";

message GetCityReputationInfoRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2830;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  CityReputationInfo city_reputation_info = 11;
  uint32 city_id = 7;
  int32 retcode = 2;
}


message GetCityReputationMapInfoReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2839;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}


message GetCityReputationMapInfoRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2848;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 13;
  repeated uint32 unlock_hunting_city_list = 4;
  bool is_new_hunting = 12;
  bool is_new_request = 5;
  repeated uint32 Unk3300_PAPBOHKOMFK = 15;
}


message GetCompoundDataReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 167;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}

import "CompoundQueueData.proto";

message GetCompoundDataRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 115;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated CompoundQueueData compound_queue_data_list = 4;
  repeated uint32 unlock_compound_list = 10;
  int32 retcode = 15;
}


message GetCustomDungeonReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 6205;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}

import "CustomDungeonBanInfo.proto";
import "CustomDungeonBrief.proto";

message GetCustomDungeonRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 6211;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated CustomDungeonBrief brief_list = 5;
  int32 retcode = 3;
  CustomDungeonBanInfo ban_info = 10;
}


message GetDailyDungeonEntryInfoReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 950;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 scene_id = 8;
}

import "DailyDungeonEntryInfo.proto";

message GetDailyDungeonEntryInfoRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 953;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated DailyDungeonEntryInfo daily_dungeon_info_list = 1;
  int32 retcode = 9;
}


message GetDungeonEntryExploreConditionReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3364;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 dungeon_entry_config_id = 2;
  uint32 scene_id = 9;
  uint32 dungeon_entry_scene_point_id = 14;
}

import "DungeonEntryCond.proto";

message GetDungeonEntryExploreConditionRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3425;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 5;
  DungeonEntryCond dungeon_entry_cond = 14;
}


message GetExpeditionAssistInfoListReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2088;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}

import "ExpeditionAssistInfo.proto";

message GetExpeditionAssistInfoListRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2100;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 6;
  repeated ExpeditionAssistInfo assist_info_list = 1;
}


message GetFriendShowAvatarInfoReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4049;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 uid = 1;
}

import "ShowAvatarInfo.proto";

message GetFriendShowAvatarInfoRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4091;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated ShowAvatarInfo show_avatar_info_list = 5;
  uint32 uid = 9;
  int32 retcode = 1;
}


message GetFriendShowNameCardInfoReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4098;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 uid = 5;
}


message GetFriendShowNameCardInfoRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4020;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint32 show_name_card_id_list = 5;
  uint32 uid = 9;
  int32 retcode = 3;
}


message GetFurnitureCurModuleArrangeCountReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4730;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}


message GetGachaInfoReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1579;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}

import "GachaInfo.proto";

message GetGachaInfoRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1530;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 14;
  uint32 daily_gacha_times = 6;
  repeated GachaInfo gacha_info_list = 10;
  bool Unk3300_OHFMHIHJHPJ = 4;
  uint32 gacha_random = 9;
  bool Unk3300_HBILIAEIHNK = 3;
}

import "GameplayRecommendationElementReliquaryRequest.proto";
import "GameplayRecommendationReliquaryRequest.proto";
import "GameplayRecommendationSkillRequest.proto";

message GetGameplayRecommendationReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 155;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 avatar_id = 6;
  oneof detail {
    GameplayRecommendationSkillRequest skill_request = 1566;
    GameplayRecommendationReliquaryRequest reliquary_request = 72;
    GameplayRecommendationElementReliquaryRequest element_reliquary_request = 867;
  }
}

import "GameplayRecommendationElementReliquaryResponse.proto";
import "GameplayRecommendationReliquaryResponse.proto";
import "GameplayRecommendationSkillResponse.proto";

message GetGameplayRecommendationRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 113;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 8;
  uint32 avatar_id = 15;
  oneof detail {
    GameplayRecommendationSkillResponse skill_response = 680;
    GameplayRecommendationReliquaryResponse reliquary_response = 1153;
    GameplayRecommendationElementReliquaryResponse element_reliquary_response = 714;
  }
}


message GetHomeExchangeWoodInfoReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4777;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}


message GetHomeExchangeWoodInfoRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4580;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  message HomeExchangeWoodInfo {
    uint32 wood_id = 1;
    uint32 exchanged_count = 7;
    uint32 next_refresh_time = 14;
    uint32 exchange_limit = 4;
  }

  repeated HomeExchangeWoodInfo wood_info_list = 7;
  int32 retcode = 12;
}


message GetHomeLevelUpRewardReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4457;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 level = 11;
}


message GetHomeLevelUpRewardRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4857;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 8;
  uint32 level = 5;
}

import "HuntingPair.proto";

message GetHuntingOfferRewardReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4327;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  HuntingPair hunting_pair = 10;
  uint32 city_id = 8;
}

import "HuntingPair.proto";

message GetHuntingOfferRewardRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4331;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 city_id = 3;
  int32 retcode = 1;
  HuntingPair hunting_pair = 10;
}


message GetInvestigationMonsterReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1930;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  bool is_for_mark = 8;
  repeated uint32 city_id_list = 11;
}

import "InvestigationMonster.proto";

message GetInvestigationMonsterRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1901;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  int32 retcode = 13;
  bool is_for_mark = 11;
  repeated InvestigationMonster monster_list = 14;
}


message GetMailItemReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1419;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated uint32 mail_id_list = 1;
}

import "EquipParam.proto";

message GetMailItemRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1500;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated EquipParam item_list = 6;
  repeated uint32 mail_id_list = 3;
  int32 retcode = 7;
}


message GetMapAreaReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3106;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}

import "MapAreaInfo.proto";

message GetMapAreaRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3275;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 14;
  repeated MapAreaInfo map_area_info_list = 12;
}


message GetMapMarkTipsReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3473;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}

import "MapMarkTipsInfo.proto";

message GetMapMarkTipsRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3272;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated MapMarkTipsInfo mark_tips_list = 8;
  int32 retcode = 11;
}


message GetMechanicusInfoReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3979;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}

import "MechanicusInfo.proto";

message GetMechanicusInfoRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3930;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  MechanicusInfo mechanicus_info = 5;
  int32 retcode = 12;
}


message GetNextResourceInfoReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 197;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}

import "ResVersionConfig.proto";

message GetNextResourceInfoRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 102;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  ResVersionConfig next_res_version_config = 6;
  int32 retcode = 8;
  string next_resource_url = 15;
}


message GetOnlinePlayerInfoReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 90;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  bool is_online_id = 8;
  oneof player_id {
    uint32 target_uid = 1;
    string online_id = 7;
    string psn_id = 4;
  }
}

import "OnlinePlayerInfo.proto";

message GetOnlinePlayerInfoRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 76;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 target_uid = 9;
  uint32 param = 3;
  OnlinePlayerInfo target_player_info = 6;
  int32 retcode = 7;
}


message GetOnlinePlayerListReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 47;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}

import "OnlinePlayerInfo.proto";

message GetOnlinePlayerListRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 78;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 15;
  uint32 param = 8;
  repeated OnlinePlayerInfo player_info_list = 5;
}


message GetOpActivityInfoReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5179;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}

import "OpActivityInfo.proto";

message GetOpActivityInfoRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5130;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 6;
  repeated OpActivityInfo op_activity_info_list = 8;
}


message GetParentQuestVideoKeyReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 449;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 parent_quest_id = 13;
}


message GetParentQuestVideoKeyRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 491;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 parent_quest_id = 15;
  uint64 video_key = 12;
  int32 retcode = 4;
}


message GetPlayerAskFriendListReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4008;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}

import "FriendBrief.proto";

message GetPlayerAskFriendListRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4009;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 11;
  repeated FriendBrief ask_friend_list = 3;
}


message GetPlayerBlacklistReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4015;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}

import "FriendBrief.proto";

message GetPlayerBlacklistRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4021;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated FriendBrief blacklist = 5;
  int32 retcode = 11;
}


message GetPlayerFriendListReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4079;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}

import "FriendBrief.proto";

message GetPlayerFriendListRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4030;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated FriendBrief ask_friend_list = 13;
  int32 retcode = 4;
  repeated FriendBrief friend_list = 15;
}


message GetPlayerHomeCompInfoReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4655;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}


message GetPlayerMpModeAvailabilityReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1812;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}


message GetPlayerMpModeAvailabilityRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1834;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint32 param_list = 8;
  int32 mp_ret = 12;
  int32 retcode = 3;
}


message GetPlayerSocialDetailReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4078;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 uid = 1;
}

import "SocialDetail.proto";

message GetPlayerSocialDetailRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4057;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  SocialDetail detail_data = 6;
  int32 retcode = 14;
}


message GetPlayerTokenReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 179;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 uid = 10;
  uint32 Unk3300_DILMOPPLPEM = 1735;
  uint32 platform_type = 2;
  bool is_guest = 14;
  string online_id = 12;
  uint32 account_type = 6;
  uint32 channel_id = 8;
  string client_rand_key = 400;
  string Unk3300_PHNOHCKIHIA = 3;
  uint32 lang = 1548;
  string Unk3300_PKONAOIDNFK = 13;
  uint32 Unk3300_PMGFBMJNNCL = 1;
  string psn_id = 5;
  uint32 key_id = 1175;
  string account_uid = 4;
  string client_ip_str = 15;
  string account_token = 9;
  string country_code = 11;
  string birthday = 292;
  uint32 sub_channel_id = 7;
}

import "StopServerInfo.proto";

message GetPlayerTokenRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 130;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  bytes security_cmd_buffer = 6;
  uint32 Unk3300_PIPLDEAPMMN = 7;
  bool is_guest = 11;
  bool Unk3300_AJBBIPFMBEL = 126;
  uint32 key_id = 134;
  string sign = 1666;
  string secret_key = 15;
  uint32 account_type = 8;
  uint32 channel_id = 676;
  bytes extra_bin_data = 5;
  uint64 secret_key_seed = 3;
  string token = 13;
  string server_rand_key = 1188;
  uint32 Unk3300_DILMOPPLPEM = 1670;
  string birthday = 1847;
  uint32 tag = 1099;
  string client_ip_str = 1382;
  uint32 sub_channel_id = 1038;
  int32 retcode = 2;
  string client_version_random_key = 1152;
  string psn_id = 242;
  bool is_proficient_player = 9;
  uint32 platform_type = 10;
  uint32 reg_platform = 646;
  StopServerInfo stop_server = 1897;
  uint32 black_uid_end_time = 12;
  bool Unk3300_CFBHAHOHDKC = 746;
  string account_uid = 1;
  repeated uint32 finish_collection_id_list = 1766;
  string msg = 4;
  string country_code = 245;
  uint32 uid = 14;
}


message GetPushTipsRewardReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2217;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated uint32 push_tips_id_list = 7;
}


message GetPushTipsRewardRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2205;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint32 push_tips_id_list = 5;
  int32 retcode = 2;
}


message GetQuestLackingResourceReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 453;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 quest_id = 13;
}


message GetQuestLackingResourceRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 424;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  map<uint32, uint32> lacked_place_map = 2;
  map<uint32, uint32> lacked_npc_map = 7;
  repeated uint32 lacked_place_list = 11;
  uint32 quest_id = 3;
  int32 retcode = 6;
  repeated uint32 lacked_npc_list = 14;
}


message GetQuestTalkHistoryReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 447;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 parent_quest_id = 15;
}


message GetQuestTalkHistoryRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 478;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 4;
  uint32 parent_quest_id = 3;
  repeated uint32 talk_id_list = 5;
}


message GetRecentMpPlayerListReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4080;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}

import "FriendBrief.proto";

message GetRecentMpPlayerListRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4046;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated FriendBrief recent_mp_player_brief_list = 9;
  int32 retcode = 13;
}


message GetRecommendCustomDungeonReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 6221;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  bool is_refresh = 6;
}

import "OtherCustomDungeonBrief.proto";

message GetRecommendCustomDungeonRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 6237;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated OtherCustomDungeonBrief custom_dungeon_list = 7;
  int32 retcode = 14;
}


message GetRegionSearchReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5627;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}


message GetReunionMissionInfoReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5062;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 mission_id = 3;
}

import "ReunionMissionInfo.proto";

message GetReunionMissionInfoRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5084;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 2;
  ReunionMissionInfo mission_info = 4;
}


message GetReunionPrivilegeInfoReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5093;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 privilege_id = 15;
}

import "ReunionPrivilegeInfo.proto";

message GetReunionPrivilegeInfoRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5059;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  ReunionPrivilegeInfo privilege_info = 6;
  int32 retcode = 3;
}


message GetReunionSignInInfoReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5077;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 sign_in_config_id = 3;
}

import "ReunionSignInInfo.proto";

message GetReunionSignInInfoRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5081;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  ReunionSignInInfo sign_in_info = 2;
  int32 retcode = 13;
}


message GetRogueDairyRepairInfoReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8730;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}


message GetRogueDairyRepairInfoRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8656;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 8;
}


message GetSceneAreaReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 289;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 scene_id = 1;
  uint32 belong_uid = 6;
}

import "CityInfo.proto";

message GetSceneAreaRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 244;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 scene_id = 8;
  int32 retcode = 1;
  repeated uint32 area_id_list = 15;
  repeated CityInfo city_info_list = 9;
}


message GetSceneNpcPositionReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 519;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 scene_id = 7;
  repeated uint32 npc_id_list = 13;
}

import "NpcPositionInfo.proto";

message GetSceneNpcPositionRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 600;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 scene_id = 1;
  repeated NpcPositionInfo npc_info_list = 2;
  int32 retcode = 5;
}


message GetScenePerformanceReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3403;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}

import "Vector.proto";

message GetScenePerformanceRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3010;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 1;
  uint32 Unk3300_GLNFIFPNJIE = 4;
  uint32 Unk3300_IHBPCPCJIBC = 2;
  uint32 Unk3300_MMALJIFDKJK = 13;
  uint32 Unk3300_PDPJEMEKHKD = 10;
  uint32 Unk3300_LIOFGAHKNIA = 14;
  uint32 Unk3300_MIJMKLBGKML = 11;
  uint32 Unk3300_JMLJLNKLJNP = 15;
  Vector pos = 9;
}


message GetScenePointReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 299;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 scene_id = 13;
  uint32 belong_uid = 5;
}


message GetScenePointRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 225;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint32 unlock_area_list = 9;
  repeated uint32 locked_point_list = 15;
  int32 retcode = 13;
  repeated uint32 unhide_point_list = 3;
  repeated uint32 hide_point_list = 10;
  repeated uint32 group_unlimit_point_list = 1;
  repeated uint32 not_interact_dungeon_entry_list = 11;
  repeated uint32 to_be_explore_dungeon_entry_list = 6;
  repeated uint32 not_explored_dungeon_entry_list = 7;
  uint32 belong_uid = 12;
  repeated uint32 unlocked_point_list = 2;
  uint32 scene_id = 8;
}


message GetShopmallDataReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 800;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}


message GetShopmallDataRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 743;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 2;
  repeated uint32 shop_type_list = 7;
}


message GetShopReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 779;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 shop_type = 9;
}

import "Shop.proto";

message GetShopRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 730;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 1;
  Shop shop = 8;
}


message GetSignInRewardReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2600;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 reward_day = 4;
  uint32 schedule_id = 1;
}

import "SignInInfo.proto";

message GetSignInRewardRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2543;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  SignInInfo sign_in_info = 3;
  int32 retcode = 1;
}


message GetStoreCustomDungeonReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 6204;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}

import "OtherCustomDungeonBrief.proto";

message GetStoreCustomDungeonRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 6210;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated OtherCustomDungeonBrief custom_dungeon_list = 2;
  int32 retcode = 15;
}

import "UgcType.proto";

message GetUgcBriefInfoReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 6322;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint64 ugc_guid = 5;
  UgcType ugc_type = 1;
}

import "UgcMusicBriefInfo.proto";
import "UgcType.proto";

message GetUgcBriefInfoRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 6335;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint64 ugc_guid = 3;
  int32 retcode = 12;
  UgcType ugc_type = 9;
  oneof brief {
    UgcMusicBriefInfo music_brief_info = 7;
  }
}

import "GetUgcType.proto";
import "RecordUsage.proto";
import "UgcType.proto";

message GetUgcReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 6342;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint64 ugc_guid = 6;
  UgcType ugc_type = 2;
  GetUgcType get_ugc_type = 12;
  RecordUsage ugc_record_usage = 13;
  bool is_require_brief = 7;
}

import "RecordUsage.proto";
import "UgcMusicBriefInfo.proto";
import "UgcMusicRecord.proto";
import "UgcType.proto";

message GetUgcRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 6341;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 10;
  RecordUsage ugc_record_usage = 5;
  UgcType ugc_type = 6;
  uint64 ugc_guid = 3;
  oneof record {
    UgcMusicRecord music_record = 2;
  }
  oneof brief {
    UgcMusicBriefInfo music_brief_info = 1540;
  }
}


enum GetUgcType {
  GET_UGC_TYPE_NONE = 0;
  GET_UGC_TYPE_MINE = 1;
  GET_UGC_TYPE_PUBLISH = 2;
}


message GetWidgetSlotReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4274;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}

import "WidgetSlotData.proto";

message GetWidgetSlotRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4270;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated WidgetSlotData slot_list = 3;
  int32 retcode = 10;
}


message GetWorldMpInfoReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3034;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}


message GetWorldMpInfoRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3310;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 quit_mp_valid_time = 15;
  int32 retcode = 1;
  bool is_in_mp_mode = 14;
}


message GiveUpRoguelikeDungeonCardReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8440;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}


message GiveUpRoguelikeDungeonCardRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8762;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 15;
}


message GivingRecord {
  bool is_gadget_giving = 3;
  uint32 group_id = 7;
  bool is_finished = 6;
  map<uint32, uint32> material_count_map = 1;
  uint32 config_id = 4;
  uint32 last_group_id = 5;
  uint32 giving_id = 14;
}

import "GivingRecord.proto";

message GivingRecordChangeNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 187;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  bool is_deactive = 14;
  GivingRecord giving_record = 15;
}

import "GivingRecord.proto";

message GivingRecordNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 123;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated GivingRecord giving_record_list = 13;
}

import "BuildingInfo.proto";

message GlobalBuildingInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5302;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 max_num = 1;
  uint32 current_num = 3;
  repeated BuildingInfo building_list = 15;
}

import "MathQuaternion.proto";
import "Vector.proto";
import "Vector3Int.proto";

message GMObstacleInfo {
  enum ShapeType {
    SHAPE_TYPE_OBSTACLE_SHAPE_CAPSULE = 0;
    SHAPE_TYPE_OBSTACLE_SHAPE_BOX = 1;
  }

  ShapeType shape = 2;
  MathQuaternion rotation = 8;
  Vector center = 15;
  int64 timestamp = 1;
  int32 obstacle_id = 13;
  Vector3Int extents = 9;
}

import "Vector.proto";

message GMShowNavMeshReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2363;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  Vector extent = 3;
  Vector center = 4;
}

import "PBNavMeshTile.proto";

message GMShowNavMeshRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2304;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 1;
  repeated PBNavMeshTile tiles = 10;
}


message GMShowObstacleReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2398;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}

import "GMObstacleInfo.proto";

message GMShowObstacleRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2320;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated GMObstacleInfo obstacles = 8;
  int32 retcode = 12;
}


message GmTalkNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  string msg = 2;
}


message GmTalkReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 30;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  string msg = 7;
}


message GmTalkRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 56;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  string retmsg = 11;
  int32 retcode = 4;
  string msg = 9;
}

import "Reward.proto";

message GrantRewardNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 603;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  Reward reward = 1;
}

import "GravenInnocenceCampStageInfo.proto";

message GravenInnocenceCampInfo {
  repeated GravenInnocenceCampStageInfo stage_info_list = 14;
}


message GravenInnocenceCampStageInfo {
  bool is_open = 11;
  bool is_finished = 6;
  uint32 level_id = 7;
  uint32 stage_id = 3;
}

import "GravenInnocenceCarveStageInfo.proto";

message GravenInnocenceCarveInfo {
  uint32 can_edit_count = 8;
  repeated uint32 has_edit_config_id_list = 12;
  repeated GravenInnocenceCarveStageInfo stage_info_list = 2;
}


message GravenInnocenceCarveStageInfo {
  bool is_open = 8;
  uint32 stage_id = 10;
}

import "GravenInnocenceCampInfo.proto";
import "GravenInnocenceCarveInfo.proto";
import "GravenInnocencePhotoInfo.proto";
import "GravenInnocenceRaceInfo.proto";

message GravenInnocenceDetailInfo {
  bool is_content_closed = 8;
  GravenInnocenceRaceInfo race_info = 2;
  GravenInnocenceCampInfo camp_info = 3;
  GravenInnocenceCarveInfo carve_info = 13;
  GravenInnocencePhotoInfo photo_info = 10;
}

import "CustomGadgetTreeInfo.proto";

message GravenInnocenceEditCarveCombinationReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 24150;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  CustomGadgetTreeInfo combination_info = 4;
  uint32 entity_id = 10;
}


message GravenInnocenceEditCarveCombinationRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 23400;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 8;
}


message GravenInnocencePhotoFinishReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 22391;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 param = 6;
  uint32 object_id = 12;
}


message GravenInnocencePhotoFinishRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 22418;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 15;
  uint32 object_id = 3;
  uint32 param = 10;
}

import "GravenInnocencePhotoObjectInfo.proto";
import "GravenInnocencePhotoStageInfo.proto";

message GravenInnocencePhotoInfo {
  repeated GravenInnocencePhotoStageInfo stage_info_list = 3;
  repeated GravenInnocencePhotoObjectInfo object_info_list = 15;
}


message GravenInnocencePhotoObjectInfo {
  uint32 object_id = 4;
  uint32 param = 15;
  uint32 finish_time = 10;
}


message GravenInnocencePhotoReminderNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 22577;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 reminder_id = 13;
  uint32 group_bundle_id = 7;
}


message GravenInnocencePhotoStageInfo {
  uint32 stage_id = 11;
  bool is_open = 10;
  bool is_finished = 8;
}

import "GravenInnocenceRaceLevelInfo.proto";

message GravenInnocenceRaceInfo {
  repeated GravenInnocenceRaceLevelInfo level_info_list = 9;
}


message GravenInnocenceRaceLevelInfo {
  uint32 level_id = 12;
  uint32 max_score = 5;
  bool is_open = 2;
}


message GravenInnocenceRaceRestartReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 23067;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 gallery_id = 7;
}


message GravenInnocenceRaceRestartRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 20056;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 2;
  uint32 gallery_id = 3;
}

import "GalleryStopReason.proto";

message GravenInnocenceRaceSettleNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 24427;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 gallery_id = 9;
  bool is_new_record = 3;
  uint32 level_id = 11;
  uint32 Unk3300_BOIPHOPMHJM = 8;
  uint32 score = 4;
  bool is_success = 10;
  GalleryStopReason reason = 12;
  uint32 Unk3300_IPGJKKFDPJJ = 6;
  uint32 remain_time = 2;
  uint32 Unk3300_OHAHHKNAJKL = 7;
}

import "GroupLinkBundle.proto";

message GroupLinkAllNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5792;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated GroupLinkBundle bundle_list = 9;
}

import "Vector.proto";

message GroupLinkBundle {
  uint32 bundle_id = 1;
  Vector center = 12;
  bool is_show_mark = 11;
  uint32 scene_id = 2;
  bool is_activated = 10;
  uint32 radius = 4;
}

import "GroupLinkBundle.proto";

message GroupLinkChangeNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5791;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  GroupLinkBundle bundle = 5;
}


message GroupLinkDeleteNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5772;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 bundle_id = 9;
}

import "GroupLinkBundle.proto";

message GroupLinkMarkUpdateNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5785;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  GroupLinkBundle bundle = 15;
}


enum GroupLoadStrategy {
  GROUP_LOAD_STRATEGY_NONE = 0;
  GROUP_LOAD_STRATEGY_SINGLE = 1;
  GROUP_LOAD_STRATEGY_MULTI = 2;
  GROUP_LOAD_STRATEGY_ALL = 3;
}


message GroupSuiteNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3489;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  map<uint32, uint32> group_map = 4;
}


message GroupUnloadNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3138;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint32 group_list = 6;
}


enum GroupVariableType {
  GROUP_VARIABLE_TYPE_NORMAL = 0;
  GROUP_VARIABLE_TYPE_LOGIC_STATE = 1;
}


message GuestBeginEnterSceneNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3125;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 uid = 14;
  uint32 scene_id = 2;
}


message GuestPostEnterSceneNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3229;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 uid = 9;
  uint32 scene_id = 2;
}


message H5ActivityIdsNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5672;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 client_red_dot_timestamp = 5;
  map<uint32, uint32> h5_activity_map = 12;
}


message H5ActivityInfo {
  bool is_entrance_open = 2;
  uint32 Unk3300_OBKEBDCKHJF = 1;
  uint32 Unk3300_DMBNFECAKBH = 14;
  uint32 content_close_time = 4;
  string url = 3;
  string prefab_path = 15;
  uint32 begin_time = 5;
  uint32 end_time = 7;
}

import "HachiStageInfo.proto";

message HachiActivityDetailInfo {
  map<uint32, HachiStageInfo> stage_map = 6;
}


message HachiStageInfo {
  uint32 open_time = 9;
  bool is_open = 10;
  bool is_finished = 14;
  uint32 stage_id = 15;
}


message HashedString {
  uint32 hash = 1;
}

import "HideAndSeekMapInfo.proto";

message HideAndSeekActivityDetailInfo {
  repeated uint32 Unk3300_JBKIAGNADEN = 6;
  repeated HideAndSeekMapInfo open_map_info_list = 13;
  repeated uint32 Unk3300_FPCDPLNJKKN = 2;
  repeated uint32 Unk3300_CMLGPPDANNN = 15;
  repeated uint32 Unk3300_HHJPAALNMNK = 4;
}


message HideAndSeekChooseMapReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8759;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated uint32 map_list = 6;
}


message HideAndSeekChooseMapRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8501;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint32 map_list = 11;
  int32 retcode = 15;
}


message HideAndSeekMapInfo {
  repeated uint32 match_lock_reason_list = 6;
  uint32 id = 12;
}


message HideAndSeekPlayerBattleInfo {
  bool is_ready = 12;
  repeated uint32 skill_list = 11;
  uint32 avatar_id = 15;
  uint32 costume_id = 4;
}


message HideAndSeekPlayerCapturedNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5580;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 ghost_skill_id = 12;
}


message HideAndSeekPlayerReadyNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5393;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint32 uid_list = 2;
}


message HideAndSeekPlayerSetAvatarNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5354;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 uid = 12;
  uint32 costume_id = 8;
  uint32 avatar_id = 10;
}


message HideAndSeekSelectAvatarReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5350;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 avatar_id = 10;
}


message HideAndSeekSelectAvatarRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5353;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 avatar_id = 8;
  int32 retcode = 7;
}


message HideAndSeekSelectSkillReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8062;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated uint32 skill_list = 11;
}


message HideAndSeekSelectSkillRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8841;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 1;
  repeated uint32 skill_list = 4;
}


message HideAndSeekSetReadyReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5324;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}


message HideAndSeekSetReadyRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5349;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 15;
}

import "ExhibitionDisplayInfo.proto";
import "ProfilePicture.proto";

message HideAndSeekSettleInfo {
  repeated ExhibitionDisplayInfo card_list = 2;
  string nickname = 15;
  uint32 head_image = 9;
  uint32 uid = 6;
  string online_id = 5;
  ProfilePicture profile_picture = 14;
}

import "ExhibitionDisplayInfo.proto";
import "HideAndSeekSettleInfo.proto";

message HideAndSeekSettleNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5391;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  enum SettleReason {
    SETTLE_REASON_TIME_OUT = 0;
    SETTLE_REASON_PLAY_END = 1;
    SETTLE_REASON_PLAYER_QUIT = 2;
  }

  uint32 play_index = 6;
  repeated ExhibitionDisplayInfo score_list = 11;
  SettleReason reason = 1;
  repeated uint32 winner_list = 2;
  uint32 cost_time = 15;
  uint32 stage_type = 7;
  bool is_record_score = 5;
  repeated HideAndSeekSettleInfo settle_info_list = 4;
}

import "HideAndSeekPlayerBattleInfo.proto";
import "HideAndSeekStageType.proto";

message HideAndSeekStageInfo {
  uint32 hunter_uid = 9;
  map<uint32, HideAndSeekPlayerBattleInfo> battle_info_map = 8;
  bool is_record_score = 5;
  repeated uint32 hider_uid_list = 2;
  uint32 map_id = 13;
  HideAndSeekStageType stage_type = 6;
}


enum HideAndSeekStageType {
  HIDE_AND_SEEK_STAGE_TYPE_PREPARE = 0;
  HIDE_AND_SEEK_STAGE_TYPE_PICK = 1;
  HIDE_AND_SEEK_STAGE_TYPE_GAME = 2;
  HIDE_AND_SEEK_STAGE_TYPE_HIDE = 3;
  HIDE_AND_SEEK_STAGE_TYPE_SEEK = 4;
  HIDE_AND_SEEK_STAGE_TYPE_SETTLE = 5;
}

import "Vector.proto";

message HitClientTrivialNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 238;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 owner_entity_id = 14;
  Vector position = 1;
}


enum HitColliderType {
  HIT_COLLIDER_TYPE_INVALID = 0;
  HIT_COLLIDER_TYPE_HIT_BOX = 1;
  HIT_COLLIDER_TYPE_WET_HIT_BOX = 2;
  HIT_COLLIDER_TYPE_HEAD_BOX = 3;
}

import "HitColliderType.proto";
import "Vector.proto";

message HitCollision {
  int32 hit_box_index = 8;
  HitColliderType hit_collider_type = 5;
  float attackee_hit_entity_angle = 7;
  Vector hit_dir = 3;
  Vector hit_point = 14;
  float attackee_hit_force_angle = 10;
}

import "Vector.proto";

message HitTreeInfo {
  Vector tree_pos = 10;
  uint32 tree_type = 7;
}

import "Vector.proto";

message HitTreeNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3018;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 tree_type = 8;
  Vector drop_pos = 12;
  Vector tree_pos = 15;
}


message HomeAllUnlockedBgmIdListNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4841;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint32 all_unlocked_bgm_id_list = 14;
}

import "Vector.proto";

message HomeAnimalData {
  uint32 furniture_id = 6;
  Vector spawn_rot = 14;
  Vector spawn_pos = 11;
}


message HomeAvatarAllFinishRewardNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4798;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint32 event_id_list = 10;
}


message HomeAvatarCostumeChangeNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4775;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 avatar_id = 12;
  uint32 costume_id = 14;
}


message HomeAvatarRewardEventGetReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4754;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 event_id = 2;
  uint32 avatar_id = 8;
}

import "ItemParam.proto";

message HomeAvatarRewardEventGetRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4713;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 3;
  uint32 event_id = 8;
  repeated ItemParam item_list = 1;
}


message HomeAvatarRewardEventInfo {
  uint32 random_position = 9;
  uint32 suite_id = 11;
  uint32 guid = 6;
  uint32 event_id = 5;
  uint32 avatar_id = 7;
}

import "HomeAvatarRewardEventInfo.proto";

message HomeAvatarRewardEventNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4849;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated HomeAvatarRewardEventInfo pending_list = 8;
  HomeAvatarRewardEventInfo reward_event = 14;
  bool is_event_trigger = 3;
}

import "HomeAvatarSummonEventInfo.proto";

message HomeAvatarSummonAllEventNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4670;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated HomeAvatarSummonEventInfo summon_event_list = 14;
}


message HomeAvatarSummonEventInfo {
  uint32 random_position = 11;
  uint32 guid = 5;
  uint32 event_over_time = 6;
  uint32 suit_id = 12;
  uint32 avatar_id = 8;
  uint32 event_id = 10;
}


message HomeAvatarSummonEventReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4894;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 avatar_id = 11;
  uint32 suit_id = 14;
  uint32 guid = 15;
}


message HomeAvatarSummonEventRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4562;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 event_id = 9;
  int32 retcode = 4;
}


message HomeAvatarSummonFinishReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4804;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 event_id = 5;
}


message HomeAvatarSummonFinishRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4814;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 3;
  uint32 event_id = 12;
}


message HomeAvatarTalkFinishInfo {
  repeated uint32 finish_talk_id_list = 4;
  uint32 avatar_id = 2;
}

import "HomeAvatarTalkFinishInfo.proto";

message HomeAvatarTalkFinishInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4757;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated HomeAvatarTalkFinishInfo avatar_talk_info_list = 9;
}


message HomeAvatarTalkReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4704;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 talk_id = 10;
  uint32 avatar_id = 5;
}

import "HomeAvatarTalkFinishInfo.proto";

message HomeAvatarTalkRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4718;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 10;
  HomeAvatarTalkFinishInfo avatar_talk_info = 4;
}


message HomeAvtarAllFinishRewardNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4535;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint32 event_id_list = 1;
}

import "HomeGroupPlayerInfo.proto";

message HomeBalloonGalleryRecord {
  uint32 score = 12;
  uint32 hit_count = 3;
  HomeGroupPlayerInfo player_info = 9;
  uint32 timestamp = 1;
}


message HomeBalloonGalleryScoreNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4734;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 gallery_id = 1;
  uint32 trigger_entity_id = 3;
  uint32 add_score = 4;
  uint32 cur_score = 14;
}

import "BalloonGallerySettleInfo.proto";

message HomeBalloonGallerySettleNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4604;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 gallery_id = 8;
  uint32 rank = 13;
  BalloonGallerySettleInfo settle_info = 5;
  bool is_new_record = 9;
}

import "HomeBalloonGalleryRecord.proto";

message HomeBalloonRecord {
  repeated HomeBalloonGalleryRecord record_list = 15;
}

import "HomeLimitedShopInfo.proto";

message HomeBasicInfo {
  uint64 exp = 3;
  uint32 home_owner_uid = 11;
  uint32 cur_room_scene_id = 14;
  string owner_nick_name = 6;
  uint32 cur_module_id = 4;
  HomeLimitedShopInfo limited_shop_info = 13;
  bool is_in_edit_mode = 7;
  uint32 level = 9;
}

import "HomeBasicInfo.proto";

message HomeBasicInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4622;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  HomeBasicInfo basic_info = 3;
}

import "HomeAnimalData.proto";
import "HomeBlockDotPattern.proto";
import "HomeBlockFieldData.proto";
import "HomeFurnitureCustomSuiteData.proto";
import "HomeFurnitureData.proto";
import "HomeFurnitureGroupData.proto";
import "HomeFurnitureSuiteData.proto";
import "HomeNpcData.proto";
import "WeekendDjinnInfo.proto";

message HomeBlockArrangementInfo {
  repeated HomeFurnitureData deploy_furniure_list = 10;
  repeated HomeAnimalData deploy_animal_list = 7;
  repeated HomeFurnitureSuiteData furniture_suite_list = 3;
  repeated WeekendDjinnInfo weekend_djinn_info_list = 5;
  uint32 block_id = 14;
  repeated HomeBlockDotPattern dot_pattern_list = 6;
  bool is_unlocked = 15;
  repeated HomeNpcData deploy_npc_list = 1;
  repeated HomeFurnitureGroupData furniture_group_list = 8;
  repeated HomeBlockFieldData field_list = 13;
  uint32 comfort_value = 9;
  repeated HomeFurnitureData persistent_furniture_list = 12;
  repeated HomeFurnitureCustomSuiteData furniture_custom_suite_list = 4;
}

import "HomeFurnitureArrangementMuipData.proto";

message HomeBlockArrangementMuipData {
  uint32 block_id = 1;
  repeated HomeFurnitureArrangementMuipData furniture_data_list = 2;
}


message HomeBlockDotPattern {
  uint32 width = 13;
  bytes data = 12;
  uint32 height = 11;
}

import "HomeBlockSubFieldData.proto";
import "Vector.proto";

message HomeBlockFieldData {
  repeated HomeBlockSubFieldData sub_field_list = 4;
  uint32 guid = 15;
  Vector pos = 8;
  uint32 furniture_id = 12;
  Vector rot = 13;
}


message HomeBlockNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4679;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 end_time = 10;
}

import "Vector.proto";

message HomeBlockSubFieldData {
  Vector pos = 4;
  Vector rot = 13;
}

import "HomeBlueprintBriefMuipData.proto";

message HomeBlueprintBatchBriefMuipData {
  repeated HomeBlueprintBriefMuipData brief_list = 1;
  repeated string not_exist_share_code_list = 2;
}


message HomeBlueprintBriefMuipData {
  string share_code = 1;
  uint32 owner_uid = 2;
  uint32 module_id = 3;
  uint32 scene_id = 4;
  uint32 block_id = 5;
  bool is_allow_copy = 6;
  uint32 create_time = 7;
}


message HomeBlueprintInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4813;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  bool is_allow_friend_copy = 1;
}


message HomeBlueprintSearchInfo {
  string share_code = 2;
  uint32 scene_id = 15;
  uint32 block_id = 13;
  uint32 module_id = 10;
}


message HomeBlueprintSlotInfo {
  uint32 create_time = 12;
  uint32 scene_id = 10;
  string share_code = 9;
  uint32 module_id = 3;
  uint32 block_id = 2;
  uint32 slot_id = 8;
  bool is_allow_copy = 6;
}


message HomeChangeBgmNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4518;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 bgm_id = 9;
}


message HomeChangeBgmReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4736;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 bgm_id = 9;
}


message HomeChangeBgmRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4895;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 5;
}


message HomeChangeEditModeReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4719;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  bool is_enter_edit_mode = 15;
}


message HomeChangeEditModeRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4661;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  bool is_enter_edit_mode = 2;
  int32 retcode = 13;
}


message HomeChangeModuleReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4559;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 target_module_id = 6;
}


message HomeChangeModuleRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4551;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 14;
  uint32 target_module_id = 8;
}


message HomeChooseModuleReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4456;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 module_id = 14;
}


message HomeChooseModuleRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4638;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 9;
  uint32 module_id = 15;
}


message HomeClearGroupRecordReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4823;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 group_id = 8;
}


message HomeClearGroupRecordRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4525;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 group_id = 10;
  int32 retcode = 4;
}

import "HomeModuleComfortInfo.proto";

message HomeComfortInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4763;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated HomeModuleComfortInfo module_info_list = 3;
}

import "HomeSceneArrangementInfo.proto";

message HomeCreateBlueprintReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4539;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  HomeSceneArrangementInfo scene_arrangement_info = 4;
  uint32 gen_share_code_count = 9;
  string server_share_code = 5;
  uint32 slot_id = 15;
}

import "HomeBlueprintSlotInfo.proto";

message HomeCreateBlueprintRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4806;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 15;
  HomeBlueprintSlotInfo slot_info = 6;
}

import "CustomCommonNodeInfo.proto";

message HomeCustomFurnitureInfo {
  uint32 guid = 7;
  repeated CustomCommonNodeInfo sub_furniture_list = 11;
}

import "HomeCustomFurnitureInfo.proto";

message HomeCustomFurnitureInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4888;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint32 delete_custom_furniture_list = 13;
  repeated HomeCustomFurnitureInfo custom_furniture_info_list = 15;
  map<uint32, uint32> used_sub_furniture_count_map = 3;
}


message HomeDeleteBlueprintReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4501;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 slot_id = 14;
}


message HomeDeleteBlueprintRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4545;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 2;
  uint32 slot_id = 15;
}

import "HomeCustomFurnitureInfo.proto";

message HomeEditCustomFurnitureReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4778;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  HomeCustomFurnitureInfo custom_furniture_info = 9;
}

import "HomeCustomFurnitureInfo.proto";

message HomeEditCustomFurnitureRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4769;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 1;
  HomeCustomFurnitureInfo custom_furniture_info = 2;
}


message HomeEnterEditModeFinishReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4865;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}


message HomeEnterEditModeFinishRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4583;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 15;
}


message HomeExchangeWoodReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4808;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 wood_id = 1;
  map<uint32, uint32> material_count_map = 4;
}


message HomeExchangeWoodRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4885;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 15;
  uint32 exchanged_count = 8;
  uint32 wood_count = 5;
  uint32 wood_id = 9;
}


message HomeFishFarmingInfo {
  repeated uint32 fish_id_list = 13;
  uint32 fishpond_guid = 5;
}

import "HomeFishFarmingInfo.proto";

message HomeFishFarmingInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4842;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated HomeFishFarmingInfo fish_farming_info_list = 8;
}

import "Vector.proto";

message HomeFurnitureArrangementMuipData {
  uint32 furniture_id = 1;
  Vector spawn_pos = 2;
  Vector spawn_rot = 3;
}

import "Vector.proto";

message HomeFurnitureCustomSuiteData {
  repeated int32 included_furniture_index_list = 14;
  Vector spawn_pos = 5;
  uint32 guid = 12;
}

import "Vector.proto";

message HomeFurnitureData {
  uint32 furniture_id = 8;
  int32 parent_furniture_index = 15;
  uint32 guid = 12;
  Vector spawn_rot = 6;
  Vector spawn_pos = 2;
  uint32 version = 11;
}

import "HomeFurnitureData.proto";

message HomeFurnitureGroupData {
  repeated HomeFurnitureData virtual_furniture_list = 1;
  uint32 group_furniture_index = 15;
}

import "Vector.proto";

message HomeFurnitureSuiteData {
  bool is_allow_summon = 4;
  uint32 suite_id = 3;
  uint32 guid = 5;
  Vector spawn_pos = 9;
  repeated int32 included_furniture_index_list = 11;
}


message HomeGalleryInPlayingNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5573;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 gallery_id = 7;
}


message HomeGetArrangementInfoReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4601;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated uint32 scene_id_list = 6;
}

import "HomeSceneArrangementInfo.proto";

message HomeGetArrangementInfoRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4878;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated HomeSceneArrangementInfo scene_arrangement_info_list = 13;
  int32 retcode = 11;
}


message HomeGetBasicInfoReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4743;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}


message HomeGetBlueprintSlotInfoReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4688;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}

import "HomeBlueprintSlotInfo.proto";

message HomeGetBlueprintSlotInfoRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4498;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint32 delete_slot_id_list = 1;
  repeated HomeBlueprintSlotInfo slot_info_list = 15;
  int32 retcode = 7;
}


message HomeGetFishFarmingInfoReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4835;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}

import "HomeFishFarmingInfo.proto";

message HomeGetFishFarmingInfoRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4567;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 15;
  repeated HomeFishFarmingInfo fish_farming_info_list = 12;
}


message HomeGetGroupRecordReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4756;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 group_id = 6;
}

import "HomeGroupRecord.proto";

message HomeGetGroupRecordRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4824;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  HomeGroupRecord group_record = 6;
  int32 retcode = 7;
  uint32 record_type = 15;
}


message HomeGetOnlineStatusReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4856;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}

import "OnlinePlayerInfo.proto";

message HomeGetOnlineStatusRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4649;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 1;
  repeated OnlinePlayerInfo player_info_list = 2;
}

import "ProfilePicture.proto";

message HomeGroupPlayerInfo {
  string psn_id = 10;
  string nickname = 13;
  uint32 uid = 1;
  ProfilePicture profile_picture = 2;
  uint32 player_level = 9;
  string online_id = 4;
}

import "HomeBalloonRecord.proto";
import "HomeRacingRecord.proto";
import "HomeSeekFurnitureAllRecord.proto";
import "HomeStakeRecord.proto";

message HomeGroupRecord {
  uint32 group_id = 15;
  oneof detail {
    HomeRacingRecord racing_gallery_info = 835;
    HomeBalloonRecord balloon_gallery_info = 726;
    HomeStakeRecord stake_play_info = 1818;
    HomeSeekFurnitureAllRecord seek_furniture_gallery_info = 370;
  }
}


message HomeKickPlayerReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4684;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  bool is_kick_all = 14;
  uint32 target_uid = 2;
}


message HomeKickPlayerRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4657;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  bool is_kick_all = 2;
  int32 retcode = 14;
  uint32 target_uid = 7;
}

import "HomeLimitedShopGoods.proto";

message HomeLimitedShop {
  repeated HomeLimitedShopGoods goods_list = 9;
}

import "HomeLimitedShopGoods.proto";

message HomeLimitedShopBuyGoodsReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4574;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  HomeLimitedShopGoods goods = 6;
  uint32 buy_count = 13;
}

import "HomeLimitedShopGoods.proto";

message HomeLimitedShopBuyGoodsRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4630;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated HomeLimitedShopGoods goods_list = 3;
  uint32 buy_count = 10;
  int32 retcode = 13;
  HomeLimitedShopGoods goods = 9;
}

import "ItemParam.proto";

message HomeLimitedShopGoods {
  uint32 buy_limit = 8;
  uint32 disable_type = 10;
  uint32 goods_id = 12;
  uint32 bought_num = 5;
  ItemParam goods_item = 2;
  repeated ItemParam cost_item_list = 4;
}


message HomeLimitedShopGoodsListReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4537;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}

import "HomeLimitedShop.proto";

message HomeLimitedShopGoodsListRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4492;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 1;
  HomeLimitedShop shop = 12;
}

import "Vector.proto";

message HomeLimitedShopInfo {
  uint32 uid = 9;
  fixed32 next_guest_open_time = 8;
  Vector djinn_rot = 11;
  fixed32 next_open_time = 5;
  Vector djinn_pos = 2;
  fixed32 next_close_time = 15;
}

import "HomeLimitedShopGoods.proto";

message HomeLimitedShopInfoChangeNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4790;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated HomeLimitedShopGoods goods_list = 2;
}

import "HomeLimitedShopInfo.proto";

message HomeLimitedShopInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4475;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  HomeLimitedShopInfo shop_info = 7;
}


message HomeLimitedShopInfoReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4815;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}

import "HomeLimitedShopInfo.proto";

message HomeLimitedShopInfoRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4739;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 9;
  HomeLimitedShopInfo shop_info = 12;
}

import "HomeMarkPointNPCData.proto";
import "HomeMarkPointSuiteData.proto";
import "Vector.proto";

message HomeMarkPointFurnitureData {
  uint32 guid = 1;
  uint32 furniture_id = 2;
  uint32 furniture_type = 3;
  Vector pos = 4;
  oneof extra {
    HomeMarkPointNPCData npc_data = 6;
    HomeMarkPointSuiteData suite_data = 7;
  }
}

import "HomeMarkPointSceneData.proto";

message HomeMarkPointNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4868;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated HomeMarkPointSceneData mark_point_data_list = 11;
}


message HomeMarkPointNPCData {
  uint32 avatar_id = 1;
  uint32 costume_id = 2;
}

import "HomeMarkPointFurnitureData.proto";
import "Vector.proto";

message HomeMarkPointSceneData {
  Vector teapot_spirit_pos = 9;
  uint32 scene_id = 6;
  Vector safe_point_pos = 11;
  uint32 module_id = 8;
  repeated HomeMarkPointFurnitureData furniture_list = 13;
}


message HomeMarkPointSuiteData {
  uint32 suite_id = 1;
}


message HomeModuleComfortInfo {
  uint32 room_scene_comfort_value = 5;
  repeated uint32 world_scene_block_comfort_value_list = 10;
  uint32 module_id = 15;
}


message HomeModuleSeenReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4861;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated uint32 seen_module_id_list = 9;
}


message HomeModuleSeenRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4693;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint32 seen_module_id_list = 9;
  int32 retcode = 6;
}


message HomeModuleUnlockNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4674;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 module_id = 4;
}


message HomeNewUnlockedBgmIdListNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4899;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint32 new_unlocked_bgm_id_list = 1;
}

import "Vector.proto";

message HomeNpcData {
  uint32 avatar_id = 11;
  Vector spawn_pos = 13;
  uint32 costume_id = 4;
  Vector spawn_rot = 7;
}


message HomePictureFrameInfo {
  uint32 picture_id = 9;
  uint32 guid = 5;
}

import "HomePictureFrameInfo.proto";

message HomePictureFrameInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4495;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated HomePictureFrameInfo picture_frame_info_list = 7;
}

import "HomePlantSubFieldData.proto";
import "Vector.proto";

message HomePlantFieldData {
  uint32 scene_id = 15;
  uint32 field_guid = 5;
  repeated HomePlantSubFieldData sub_field_list = 3;
  uint32 furniture_id = 1;
  Vector spawn_pos = 9;
}

import "HomePlantFieldData.proto";

message HomePlantFieldNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4848;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  HomePlantFieldData field = 7;
}


enum HomePlantFieldStatus {
  HOME_PLANT_FIELD_STATUS_STATUE_NONE = 0;
  HOME_PLANT_FIELD_STATUS_STATUE_SEED = 1;
  HOME_PLANT_FIELD_STATUS_STATUE_SPROUT = 2;
  HOME_PLANT_FIELD_STATUS_STATUE_GATHER = 3;
}

import "HomePlantFieldData.proto";

message HomePlantInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4873;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated HomePlantFieldData field_list = 11;
}


message HomePlantInfoReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4629;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}

import "HomePlantFieldData.proto";

message HomePlantInfoRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4460;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  int32 retcode = 8;
  repeated HomePlantFieldData field_list = 10;
}


message HomePlantSeedReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4768;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated uint32 seed_id_list = 7;
  uint32 field_guid = 1;
  uint32 index = 9;
}


message HomePlantSeedRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4694;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 8;
}

import "HomePlantFieldStatus.proto";

message HomePlantSubFieldData {
  HomePlantFieldStatus field_status = 5;
  uint32 home_gather_id = 7;
  repeated uint32 entity_id_list = 12;
  fixed32 end_time = 6;
  uint32 seed_id = 9;
}


message HomePlantWeedReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4866;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 field_guid = 13;
  uint32 index = 3;
}


message HomePlantWeedRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4619;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 5;
}


message HomePreChangeEditModeNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4720;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  bool is_enter_edit_mode = 10;
}


message HomePreviewBlueprintReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4745;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  string share_code = 10;
}

import "HomeSceneArrangementInfo.proto";

message HomePreviewBlueprintRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4462;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 13;
  HomeSceneArrangementInfo scene_arrangement_info = 5;
  string share_code = 9;
}


message HomePriorCheckNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4557;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  fixed32 end_time = 3;
}

import "HomeGroupPlayerInfo.proto";

message HomeRacingGalleryRecord {
  uint32 timestamp = 13;
  HomeGroupPlayerInfo player_info = 2;
  uint32 use_time = 6;
}

import "RacingGallerySettleInfo.proto";

message HomeRacingGallerySettleNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4807;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  RacingGallerySettleInfo settle_info = 14;
  bool is_new_record = 7;
  uint32 rank = 15;
  uint32 gallery_id = 3;
}

import "HomeRacingGalleryRecord.proto";

message HomeRacingRecord {
  repeated HomeRacingGalleryRecord record_list = 9;
}


message HomeResource {
  uint32 store_limit = 6;
  fixed32 next_refresh_time = 13;
  uint32 store_value = 1;
}

import "HomeResource.proto";

message HomeResourceNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4762;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  HomeResource fetter_exp = 7;
  HomeResource home_coin = 5;
}


message HomeResourceTakeFetterExpReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4521;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}

import "HomeResource.proto";

message HomeResourceTakeFetterExpRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4607;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  HomeResource fetter_exp = 4;
  int32 retcode = 1;
}


message HomeResourceTakeHomeCoinReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4800;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}

import "HomeResource.proto";

message HomeResourceTakeHomeCoinRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4779;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 4;
  HomeResource home_coin = 12;
}


message HomeSaveArrangementNoChangeReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4672;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 scene_id = 15;
}


message HomeSaveArrangementNoChangeRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4603;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 scene_id = 9;
  int32 retcode = 10;
}

import "HomeBlockArrangementInfo.proto";
import "HomeFurnitureData.proto";
import "Vector.proto";

message HomeSceneArrangementInfo {
  uint32 comfort_value = 6;
  repeated HomeBlockArrangementInfo block_arrangement_info_list = 1;
  bool is_set_born_pos = 4;
  Vector djinn_pos = 14;
  Vector born_rot = 10;
  uint32 bgm_id = 5;
  Vector born_pos = 11;
  repeated HomeFurnitureData Unk3300_GCHNAMHBPHG = 2;
  HomeFurnitureData main_house = 15;
  uint32 scene_id = 8;
  repeated HomeFurnitureData Unk3300_HPCHPODNBPH = 9;
  uint32 tmp_version = 3;
}

import "HomeBlockArrangementMuipData.proto";

message HomeSceneArrangementMuipData {
  uint32 module_id = 1;
  uint32 scene_id = 2;
  bool is_room = 3;
  repeated HomeBlockArrangementMuipData block_data_list = 4;
}


message HomeSceneInitFinishReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4451;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}


message HomeSceneInitFinishRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4531;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 15;
}


message HomeSceneJumpReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4527;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  bool is_enter_room_scene = 2;
}


message HomeSceneJumpRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4647;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  bool is_enter_room_scene = 6;
  int32 retcode = 5;
}


message HomeScenePointFishFarmingInfo {
  uint32 scene_id = 9;
  uint32 local_entity_id = 7;
  repeated uint32 fish_id_list = 11;
}

import "HomeScenePointFishFarmingInfo.proto";

message HomeScenePointFishFarmingInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4834;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated HomeScenePointFishFarmingInfo fish_farming_info_list = 13;
}


message HomeSearchBlueprintReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4705;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  string share_code = 6;
}

import "HomeBlueprintSearchInfo.proto";

message HomeSearchBlueprintRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4512;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  HomeBlueprintSearchInfo search_info = 4;
  int32 retcode = 8;
}

import "HomeSeekFurnitureOneRecord.proto";

message HomeSeekFurnitureAllRecord {
  repeated HomeSeekFurnitureOneRecord record_list = 9;
}

import "GalleryStopReason.proto";
import "HomeSeekFurnitureOneRecord.proto";

message HomeSeekFurnitureGalleryScoreNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4723;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  GalleryStopReason reason = 7;
  uint32 gallery_id = 13;
  HomeSeekFurnitureOneRecord record = 2;
}

import "HomeSeekFurniturePlayerScore.proto";

message HomeSeekFurnitureOneRecord {
  uint32 timestamp = 12;
  repeated HomeSeekFurniturePlayerScore engaged_player_score_list = 5;
}

import "HomeGroupPlayerInfo.proto";

message HomeSeekFurniturePlayerScore {
  uint32 score = 8;
  HomeGroupPlayerInfo player_info = 6;
}


message HomeSetBlueprintFriendOptionReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4472;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  bool is_allow_friend_copy = 8;
}


message HomeSetBlueprintFriendOptionRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4615;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  bool is_allow_friend_copy = 14;
  int32 retcode = 13;
}


message HomeSetBlueprintSlotOptionReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4491;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 slot_id = 3;
  bool is_allow_copy = 8;
}


message HomeSetBlueprintSlotOptionRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4621;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 5;
  bool is_allow_copy = 15;
  uint32 slot_id = 10;
}

import "HomeGroupPlayerInfo.proto";

message HomeStakePlayRecord {
  repeated HomeGroupPlayerInfo engaged_player_info_list = 7;
  uint32 timestamp = 3;
}

import "HomeStakePlayRecord.proto";

message HomeStakeRecord {
  repeated HomeStakePlayRecord record_list = 9;
}

import "Vector.proto";

message HomeTransferData {
  Vector spawn_pos = 1;
  uint32 guid = 5;
}


message HomeTransferReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4613;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  bool is_transfer_to_safe_point = 4;
  uint32 guid = 13;
}


message HomeTransferRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4711;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  int32 retcode = 12;
}

import "HomeSceneArrangementInfo.proto";

message HomeUpdateArrangementInfoReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4533;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  HomeSceneArrangementInfo scene_arrangement_info = 6;
}


message HomeUpdateArrangementInfoRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4776;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 3;
}

import "HomeFishFarmingInfo.proto";

message HomeUpdateFishFarmingInfoReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4767;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  HomeFishFarmingInfo fish_farming_info = 3;
}


message HomeUpdateFishFarmingInfoRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4582;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 14;
}

import "HomePictureFrameInfo.proto";

message HomeUpdatePictureFrameInfoReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4764;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  HomePictureFrameInfo picture_frame_info = 13;
}

import "HomePictureFrameInfo.proto";

message HomeUpdatePictureFrameInfoRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4468;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  HomePictureFrameInfo picture_frame_info = 6;
  int32 retcode = 9;
}

import "HomeScenePointFishFarmingInfo.proto";

message HomeUpdateScenePointFishFarmingInfoReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4652;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  HomeScenePointFishFarmingInfo fish_farming_info = 2;
}


message HomeUpdateScenePointFishFarmingInfoRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4606;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 11;
}


message HomeVerifyBlockData {
  uint32 block_id = 11;
  uint32 furniture_count = 13;
}

import "HomeSceneArrangementMuipData.proto";
import "HomeVerifySceneData.proto";
import "LanguageType.proto";

message HomeVerifyData {
  HomeVerifySceneData home_info = 4;
  HomeSceneArrangementMuipData arrangement_data = 9;
  fixed32 timestamp = 11;
  string token = 1;
  string aid = 10;
  LanguageType lang = 6;
  uint32 uid = 2;
  string region = 7;
}


message HomeVerifyFurnitureData {
  repeated uint32 type = 12;
  uint32 num = 7;
  uint32 id = 13;
}

import "HomeVerifyBlockData.proto";

message HomeVerifySceneData {
  uint32 scene_id = 7;
  repeated HomeVerifyBlockData blocks = 8;
  uint32 version = 2;
  uint32 is_room = 9;
  uint32 module_id = 12;
}


message HostPlayerNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 356;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 host_peer_id = 12;
  uint32 host_uid = 14;
}

import "HuntingPair.proto";

message HuntingFailNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4315;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  HuntingPair hunting_pair = 7;
}

import "HuntingPair.proto";

message HuntingGiveUpReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4308;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  HuntingPair hunting_pair = 2;
}

import "HuntingPair.proto";

message HuntingGiveUpRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4345;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 2;
  HuntingPair hunting_pair = 12;
}

import "HuntingOfferState.proto";
import "HuntingPair.proto";

message HuntingOfferData {
  HuntingPair hunting_pair = 15;
  HuntingOfferState state = 1;
  uint32 city_id = 3;
}


enum HuntingOfferState {
  HUNTING_OFFER_STATE_NONE = 0;
  HUNTING_OFFER_STATE_STARTED = 1;
  HUNTING_OFFER_STATE_UNSTARTED = 2;
  HUNTING_OFFER_STATE_SUCC = 3;
}

import "HuntingPair.proto";
import "Vector.proto";

message HuntingOngoingNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4318;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  HuntingPair hunting_pair = 11;
  uint32 finish_clue_count = 7;
  Vector next_position = 2;
  bool is_final = 5;
  bool is_started = 13;
  uint32 fail_time = 4;
}


message HuntingPair {
  uint32 monster_config_id = 1;
  uint32 refresh_id = 3;
}

import "HuntingPair.proto";
import "Vector.proto";

message HuntingRevealClueNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4317;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  HuntingPair hunting_pair = 3;
  uint32 finished_group_id = 6;
  uint32 finish_clue_count = 14;
  Vector clue_position = 2;
}

import "HuntingPair.proto";
import "Vector.proto";

message HuntingRevealFinalNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4312;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  Vector final_position = 3;
  HuntingPair hunting_pair = 9;
  uint32 finished_group_id = 14;
}

import "HuntingPair.proto";
import "Vector.proto";

message HuntingStartNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4344;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  HuntingPair hunting_pair = 3;
  uint32 fail_time = 5;
  Vector clue_position = 6;
  bool is_final = 8;
}

import "HuntingPair.proto";

message HuntingSuccessNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4334;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  HuntingPair hunting_pair = 7;
}

import "ChessCardInfo.proto";
import "ChessMysteryInfo.proto";
import "ChessPlayerInfo.proto";

message InBattleChessInfo {
  uint32 round = 2;
  ChessMysteryInfo mystery_info = 6;
  map<uint32, ChessPlayerInfo> player_info_map = 15;
  uint32 max_escapable_monsters = 7;
  uint32 escaped_monsters = 11;
  repeated ChessCardInfo selected_card_info_list = 4;
  uint32 total_round = 13;
  uint32 left_monsters = 5;
  repeated uint32 ban_card_tag_list = 1;
}

import "ExhibitionDisplayInfo.proto";

message InBattleChessSettleInfo {
  uint32 Unk3300_LPANFEBFJOJ = 5;
  uint64 scene_time_ms = 8;
  uint32 Unk3300_NKHDFHAPNCN = 13;
  bool is_success = 6;
  uint32 Unk3300_EMNLLDJHMEI = 1;
  repeated ExhibitionDisplayInfo score_list = 4;
  uint32 Unk3300_IPGILJCBABK = 2;
}


message InBattleFleurFairInfo {
  uint32 gallery_stage_index = 7;
  uint32 preview_display_duration = 11;
  repeated uint32 Unk3300_NNPMBFGJELL = 15;
  uint32 preview_stage_index = 9;
  repeated uint32 Unk3300_IJBKKLGOMIE = 14;
}

import "IrodoriChessMysteryInfo.proto";

message InBattleIrodoriChessInfo {
  uint32 settle_score = 1;
  IrodoriChessMysteryInfo mystery_info = 2;
  uint32 left_monsters = 15;
  repeated uint32 selected_card_id_list = 10;
  uint32 building_points = 8;
}


message InBattleIrodoriChessSettleInfo {
  uint32 kill_monster_num = 15;
  uint64 scene_time_ms = 14;
  bool is_perfect = 8;
  bool is_new_record = 7;
  uint32 settle_score = 10;
  bool is_activity_end = 5;
}


message InBattleMechanicusBuildingInfo {
  uint32 refund_points = 8;
  uint32 cost_points = 15;
  uint32 level = 13;
  uint32 building_id = 3;
}


message InBattleMechanicusBuildingPointsNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5361;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  map<uint32, uint32> player_building_points_map = 12;
}


enum InBattleMechanicusCardChallengeState {
  IN_BATTLE_MECHANICUS_CARD_CHALLENGE_STATE_NONE = 0;
  IN_BATTLE_MECHANICUS_CARD_CHALLENGE_STATE_ON_GOING = 1;
  IN_BATTLE_MECHANICUS_CARD_CHALLENGE_STATE_FAIL = 2;
  IN_BATTLE_MECHANICUS_CARD_CHALLENGE_STATE_SUCCESS = 3;
}

import "InBattleMechanicusCardChallengeState.proto";

message InBattleMechanicusCardInfo {
  uint32 Unk3300_KCIEINMEPDH = 2;
  uint32 Unk3300_NDAOOKKGJPH = 7;
  uint32 cost_points = 5;
  uint32 card_id = 3;
  uint32 Unk3300_FNAHKHODBKN = 13;
  InBattleMechanicusCardChallengeState challenge_state = 15;
}

import "InBattleMechanicusCardInfo.proto";

message InBattleMechanicusCardResultNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5399;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 group_id = 10;
  repeated InBattleMechanicusCardInfo card_list = 8;
  uint32 play_index = 14;
  map<uint32, uint32> player_confirmed_card_map = 9;
  uint64 wait_begin_time_us = 2;
  uint32 wait_seconds = 5;
}


message InBattleMechanicusConfirmCardNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5348;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 group_id = 11;
  uint32 player_uid = 12;
  uint32 card_id = 8;
  uint32 play_index = 13;
}


message InBattleMechanicusConfirmCardReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5327;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 card_id = 3;
  uint32 play_index = 8;
  uint32 group_id = 5;
}


message InBattleMechanicusConfirmCardRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5339;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 7;
  uint32 group_id = 5;
  uint32 card_id = 9;
  uint32 play_index = 13;
}


message InBattleMechanicusEscapeMonsterNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5400;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 escaped_monster_num = 15;
}

import "InBattleMechanicusCardInfo.proto";
import "InBattleMechanicusMonsterInfo.proto";
import "InBattleMechanicusPlayerInfo.proto";
import "InBattleMechanicusStageType.proto";

message InBattleMechanicusInfo {
  repeated uint32 Unk3300_MNNDELKIBLG = 656;
  repeated uint32 Unk3300_GHBEHPGBBIH = 683;
  InBattleMechanicusStageType stage = 7;
  uint32 Unk3300_EBOIGFMOKHK = 4;
  uint32 wait_seconds = 13;
  uint32 left_monster_num = 15;
  uint64 Unk3300_IFIPKLOGEOF = 6;
  repeated InBattleMechanicusPlayerInfo player_list = 12;
  uint32 total_round = 1;
  uint64 Unk3300_IAPINOLIALF = 14;
  repeated InBattleMechanicusMonsterInfo monster_list = 9;
  uint32 Unk3300_CIJALCAMHCD = 3;
  uint64 wait_begin_time_us = 2;
  repeated InBattleMechanicusCardInfo history_card_list = 5;
  repeated InBattleMechanicusCardInfo pick_card_list = 8;
  uint32 escaped_monster_num = 10;
  uint32 round = 11;
}


message InBattleMechanicusLeftMonsterNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5343;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 left_monster_num = 5;
}


message InBattleMechanicusMonsterInfo {
  uint32 level = 10;
  uint32 monster_id = 8;
  uint32 count = 9;
}


message InBattleMechanicusPickCardNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5357;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 player_uid = 1;
  uint32 card_id = 11;
  uint32 group_id = 12;
  uint32 play_index = 4;
}


message InBattleMechanicusPickCardReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5347;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 card_id = 9;
  uint32 play_index = 4;
  uint32 group_id = 1;
}


message InBattleMechanicusPickCardRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5378;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 4;
  uint32 group_id = 14;
  uint32 play_index = 10;
  uint32 card_id = 3;
}

import "InBattleMechanicusBuildingInfo.proto";

message InBattleMechanicusPlayerInfo {
  uint32 uid = 13;
  bool is_card_confirmed = 12;
  uint32 building_points = 2;
  repeated InBattleMechanicusBuildingInfo building_list = 5;
  uint32 pick_card_id = 15;
}

import "MultistageSettleWatcherInfo.proto";

message InBattleMechanicusSettleInfo {
  uint64 scene_time_ms = 12;
  bool is_success = 13;
  uint32 group_id = 10;
  uint32 Unk3300_EKAIAPLNIPM = 9;
  uint32 Unk3300_HAEOPAOBBFE = 4;
  uint32 Unk3300_NAMBBHMJJLN = 11;
  uint32 play_index = 8;
  repeated MultistageSettleWatcherInfo watcher_list = 15;
}

import "MultistageSettleWatcherInfo.proto";

message InBattleMechanicusSettleNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5342;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint64 scene_time_ms = 15;
  uint32 group_id = 5;
  repeated MultistageSettleWatcherInfo watcher_list = 2;
  uint32 Unk3300_NAMBBHMJJLN = 13;
  uint32 Unk3300_HAEOPAOBBFE = 3;
  uint32 Unk3300_EKAIAPLNIPM = 10;
  uint32 play_index = 6;
  bool is_success = 1;
}


enum InBattleMechanicusStageType {
  IN_BATTLE_MECHANICUS_STAGE_TYPE_NONE = 0;
  IN_BATTLE_MECHANICUS_STAGE_TYPE_BUILD = 1;
  IN_BATTLE_MECHANICUS_STAGE_TYPE_CARD_FLIP = 2;
  IN_BATTLE_MECHANICUS_STAGE_TYPE_KILL = 3;
}

import "InferenceWordInfo.proto";

message InferencePageInfo {
  repeated InferenceWordInfo unlock_word_list = 3;
  uint32 page_id = 5;
}


message InferenceWordInfo {
  bool is_submit = 12;
  uint32 unlock_by_word_id = 11;
  bool is_associate = 10;
  uint32 word_id = 2;
  bool is_interpret = 3;
}


message InstableSprayAvatarInfo {
  uint64 avatar_id = 10;
  bool is_trial = 12;
}

import "InstableSprayStageInfo.proto";

message InstableSprayDetailInfo {
  repeated InstableSprayStageInfo stage_info_list = 2;
}


message InstableSprayDungeonSettleInfo {
  uint32 stage_id = 12;
  uint32 difficulty = 15;
  bool is_new_record = 9;
  repeated uint32 score_list = 3;
}

import "InstableSprayAvatarInfo.proto";

message InstableSprayEnterDungeonReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 21889;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 stage_id = 5;
  repeated InstableSprayAvatarInfo avatar_info_list = 2;
  uint32 difficulty = 1;
}


message InstableSprayEnterDungeonRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 24458;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 level_id = 4;
  int32 retcode = 8;
}


message InstableSprayGalleryInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5594;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 score = 14;
}


message InstableSprayLevelFinishNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 21512;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 round = 2;
  uint32 level_id = 15;
  bool Unk3300_AMEBAPIPLGL = 3;
  bool Unk3300_DHKHBKLBIPA = 12;
  uint32 stage_id = 10;
}

import "InstableSprayAvatarInfo.proto";

message InstableSprayRestartDungeonReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 22725;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated InstableSprayAvatarInfo avatar_info_list = 15;
}


message InstableSprayRestartDungeonRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 23617;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 12;
  uint32 level_id = 4;
}

import "InstableSprayTeamInfo.proto";

message InstableSprayStageInfo {
  bool is_finished = 12;
  uint32 stage_id = 2;
  repeated InstableSprayTeamInfo team_info_list = 9;
  uint32 max_score = 7;
}

import "InstableSprayAvatarInfo.proto";

message InstableSpraySwitchTeamReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 22524;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated InstableSprayAvatarInfo avatar_info_list = 13;
}


message InstableSpraySwitchTeamRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 21806;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 7;
  uint32 level_id = 11;
}

import "InstableSprayAvatarInfo.proto";

message InstableSprayTeamInfo {
  repeated InstableSprayAvatarInfo avatar_info_list = 5;
}


message InteractDailyDungeonInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 954;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}


enum InteractType {
  INTERACT_TYPE_NONE = 0;
  INTERACT_TYPE_PICK_ITEM = 1;
  INTERACT_TYPE_GATHER = 2;
  INTERACT_TYPE_OPEN_CHEST = 3;
  INTERACT_TYPE_OPEN_STATUE = 4;
  INTERACT_TYPE_CONSUME = 5;
  INTERACT_TYPE_MP_PLAY_REWARD = 6;
  INTERACT_TYPE_VIEW = 7;
  INTERACT_TYPE_GENERAL_REWARD = 8;
  INTERACT_TYPE_MIRACLE_RING = 9;
  INTERACT_TYPE_FOUNDATION = 10;
  INTERACT_TYPE_ECHO_SHELL = 11;
  INTERACT_TYPE_HOME_GATHER = 12;
  INTERACT_TYPE_ENV_ANIMAL = 13;
  INTERACT_TYPE_QUEST_GADGET = 14;
  INTERACT_TYPE_UI_INTERACT = 15;
  INTERACT_TYPE_DESHRET_OBELISK = 16;
}


enum InterOpType {
  INTER_OP_TYPE_FINISH = 0;
  INTER_OP_TYPE_START = 1;
}


message InterpretInferenceWordReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 454;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 page_id = 3;
  uint32 word_id = 4;
}


message InterpretInferenceWordRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 498;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 15;
  uint32 word_id = 2;
  uint32 page_id = 9;
}


message InterruptGalleryReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5548;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 gallery_id = 4;
}


message InterruptGalleryRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5599;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  int32 retcode = 10;
  uint32 gallery_id = 3;
}


message Investigation {
  enum State {
    STATE_INVALID = 0;
    STATE_IN_PROGRESS = 1;
    STATE_COMPLETE = 2;
    STATE_REWARD_TAKEN = 3;
  }

  uint32 total_progress = 5;
  uint32 progress = 14;
  uint32 id = 10;
  State state = 6;
}

import "Vector.proto";
import "WeeklyBossResinDiscountInfo.proto";

message InvestigationMonster {
  enum LockState {
    LOCK_STATE_NONE = 0;
    LOCK_STATE_QUEST = 1;
  }

  bool is_alive = 13;
  Vector pos = 7;
  uint32 scene_id = 12;
  uint32 next_refresh_time = 8;
  uint32 city_id = 14;
  uint32 group_id = 1735;
  uint32 next_boss_chest_refresh_time = 1;
  WeeklyBossResinDiscountInfo weekly_boss_resin_discount_info = 3;
  uint32 Unk3300_DKKOBDIEKPP = 6;
  uint32 id = 9;
  uint32 monster_id = 562;
  LockState lock_state = 4;
  uint32 refresh_interval = 10;
  bool is_area_locked = 5;
  uint32 level = 2;
  uint32 max_boss_chest_num = 11;
  uint32 resin = 15;
}

import "InvestigationMonster.proto";

message InvestigationMonsterUpdateNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1910;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  InvestigationMonster investigation_monster = 6;
}


message InvestigationQuestDailyNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1926;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }
}


message InvestigationReadQuestDailyNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1908;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}


message InvestigationTarget {
  enum State {
    STATE_INVALID = 0;
    STATE_IN_PROGRESS = 1;
    STATE_COMPLETE = 2;
    STATE_REWARD_TAKEN = 3;
  }

  uint32 investigation_id = 8;
  uint32 quest_id = 6;
  State state = 2;
  uint32 total_progress = 5;
  uint32 progress = 15;
}

import "IrodoriChessData.proto";
import "IrodoriFlowerData.proto";
import "IrodoriMasterLevelInfo.proto";
import "IrodoriPoetryData.proto";

message IrodoriActivityDetailInfo {
  IrodoriChessData chess_data = 5;
  IrodoriFlowerData flower_data = 3;
  IrodoriPoetryData poetry_data = 6;
  repeated IrodoriMasterLevelInfo master_level_list = 1;
}

import "IrodoriChessLevelData.proto";

message IrodoriChessData {
  bool is_open = 8;
  repeated IrodoriChessLevelData level_data_list = 13;
}

import "IrodoriChessEntranceInfo.proto";

message IrodoriChessEntranceDetailInfo {
  repeated IrodoriChessEntranceInfo info_list = 14;
}

import "IrodoriChessMonsterInfo.proto";

message IrodoriChessEntranceInfo {
  uint32 entrance_point_id = 11;
  repeated IrodoriChessMonsterInfo monster_info_list = 8;
}


message IrodoriChessEquipCardReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8766;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  bool is_hard_map = 8;
  uint32 level_id = 1;
  uint32 card_id = 3;
}


message IrodoriChessEquipCardRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8884;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 card_id = 9;
  uint32 level_id = 2;
  bool is_hard_map = 8;
  int32 retcode = 1;
}


message IrodoriChessLeftMonsterNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5331;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 left_monsters = 4;
}

import "IrodoriChessMapData.proto";

message IrodoriChessLevelData {
  IrodoriChessMapData Unk3300_GCIGNCGOBML = 6;
  uint32 level_id = 14;
  IrodoriChessMapData Unk3300_BGINEMHBNAD = 10;
  uint32 open_time = 8;
}

import "IrodoriChessEntranceDetailInfo.proto";

message IrodoriChessMapData {
  uint32 map_id = 7;
  uint32 best_score = 4;
  repeated uint32 equiped_card_list = 15;
  IrodoriChessEntranceDetailInfo entrance_detail_info = 2;
}


message IrodoriChessMonsterInfo {
  uint32 grant_points = 7;
  uint32 monster_id = 13;
  uint32 level = 11;
  repeated uint32 affix_list = 10;
}

import "IrodoriChessEntranceDetailInfo.proto";

message IrodoriChessMysteryInfo {
  IrodoriChessEntranceDetailInfo entrance_detail_info = 3;
  repeated uint32 exit_point_id_list = 14;
  repeated uint32 entrance_point_id_list = 11;
}


message IrodoriChessPlayerInfo {
  uint32 settle_score = 11;
  uint32 uid = 10;
  uint32 building_points = 8;
}

import "IrodoriChessPlayerInfo.proto";

message IrodoriChessPlayerInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5312;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  IrodoriChessPlayerInfo player_info = 10;
}


message IrodoriChessUnequipCardReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8409;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 level_id = 1;
  uint32 card_id = 3;
  bool is_hard_map = 2;
}


message IrodoriChessUnequipCardRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8537;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 card_id = 10;
  int32 retcode = 2;
  uint32 level_id = 12;
  bool is_hard_map = 6;
}

import "CustomGadgetTreeInfo.proto";

message IrodoriEditFlowerCombinationReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8835;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 entity_id = 1;
  CustomGadgetTreeInfo combination_info = 12;
}


message IrodoriEditFlowerCombinationRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8454;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 2;
  bool Unk3300_IAPLHBKJLBF = 8;
  bool Unk3300_DBBGPOMDKPK = 9;
}


message IrodoriFillPoetryReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8926;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 line_id = 6;
  uint32 theme_id = 5;
}

import "IrodoriPoetryThemeData.proto";

message IrodoriFillPoetryRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8076;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  IrodoriPoetryThemeData theme_data = 8;
  int32 retcode = 2;
}

import "ItemParam.proto";

message IrodoriFlowerData {
  repeated uint32 finished_theme_list = 10;
  repeated ItemParam used_flower_list = 8;
}


message IrodoriMasterGalleryCgEndNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8050;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 level_id = 11;
  uint32 gallery_id = 3;
}

import "GalleryStopReason.proto";

message IrodoriMasterGallerySettleInfo {
  GalleryStopReason reason = 10;
  uint32 difficult = 2;
  uint32 finish_time = 4;
  uint32 level_id = 1;
  bool is_finish = 3;
}

import "IrodoriMasterGallerySettleInfo.proto";

message IrodoriMasterGallerySettleNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8792;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  IrodoriMasterGallerySettleInfo settle_info = 9;
  uint32 gallery_id = 11;
}


message IrodoriMasterLevelDetailInfo {
  bool is_finish = 10;
  uint32 difficulty = 11;
  bool is_have_try = 15;
  uint32 min_finish_time = 12;
}

import "IrodoriMasterLevelDetailInfo.proto";

message IrodoriMasterLevelInfo {
  repeated IrodoriMasterLevelDetailInfo detail_info = 1;
  uint32 level_id = 7;
}


message IrodoriMasterStartGalleryReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8243;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 difficulty = 15;
  uint32 level_id = 7;
}


message IrodoriMasterStartGalleryRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8495;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 4;
}

import "IrodoriPoetryThemeData.proto";

message IrodoriPoetryData {
  repeated IrodoriPoetryThemeData theme_data_list = 2;
  uint32 cur_theme_id = 12;
}


message IrodoriPoetryThemeData {
  uint32 Unk3300_HFMKPNOBPDK = 14;
  repeated uint32 Unk3300_CNNMEHOGGLL = 10;
  uint32 progress = 11;
  uint32 theme_id = 12;
  uint32 max_progress = 7;
  repeated uint32 Unk3300_HODJKKDBJDJ = 15;
  uint32 Unk3300_NJHMNLIAGIK = 6;
}


message IrodoriScanEntityReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8931;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 entity_id = 2;
}

import "IrodoriPoetryThemeData.proto";

message IrodoriScanEntityRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8840;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  IrodoriPoetryThemeData theme_data = 1;
  int32 retcode = 12;
  bool is_get_inspiration = 13;
}

import "IslandPartyStageData.proto";

message IslandPartyDetailInfo {
  repeated IslandPartyStageData stage_data_list = 9;
}

import "ExhibitionDisplayInfo.proto";
import "OnlinePlayerInfo.proto";

message IslandPartyGallerySettleInfo {
  repeated ExhibitionDisplayInfo card_list = 1;
  OnlinePlayerInfo player_info = 7;
}


message IslandPartyRaftInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5589;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 Unk3300_HNECEGNMKNK = 4;
  uint32 Unk3300_FBACMOFGPGJ = 1;
  uint32 point_id = 8;
  uint32 coin = 14;
}

import "IslandPartySailStage.proto";

message IslandPartySailInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5544;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  IslandPartySailStage stage = 2;
  uint32 kill_monster_count = 6;
  uint32 coin = 14;
  uint32 progress = 9;
}


enum IslandPartySailStage {
  ISLAND_PARTY_SAIL_STAGE_NONE = 0;
  ISLAND_PARTY_SAIL_STAGE_SAIL = 1;
  ISLAND_PARTY_SAIL_STAGE_BATTLE = 2;
}

import "ExhibitionDisplayInfo.proto";
import "GalleryStopReason.proto";
import "IslandPartyGallerySettleInfo.proto";

message IslandPartySettleNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 24127;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 time_remain = 9;
  bool is_new_record = 3;
  repeated ExhibitionDisplayInfo score_list = 5;
  GalleryStopReason reason = 12;
  repeated IslandPartyGallerySettleInfo settle_info_list = 13;
}


message IslandPartyStageData {
  uint32 best_score = 14;
  uint32 stage_id = 3;
  bool is_open = 9;
}

import "Equip.proto";
import "Furniture.proto";
import "Material.proto";

message Item {
  uint32 item_id = 1;
  uint64 guid = 2;
  oneof detail {
    Material material = 5;
    Equip equip = 6;
    Furniture furniture = 7;
  }
}

import "ItemHint.proto";
import "Vector.proto";

message ItemAddHintNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 700;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  bool Unk3300_FLIKEBJINCL = 5;
  bool Unk3300_NIJLGEHNBNC = 4;
  repeated ItemHint item_list = 11;
  repeated ItemHint overflow_transformed_item_list = 1;
  bool Unk3300_KIOMJNHFMDE = 6;
  uint32 reason = 14;
  Vector position = 12;
  uint32 quest_id = 3;
}


message ItemCdGroupTimeNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 680;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  map<uint32, uint64> item_cd_map = 7;
}

import "ItemParam.proto";

message ItemGivingReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 185;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  enum ItemGivingType {
    ITEM_GIVING_TYPE_QUEST = 0;
    ITEM_GIVING_TYPE_GADGET = 1;
  }

  uint32 giving_id = 6;
  ItemGivingType item_giving_type = 8;
  repeated ItemParam item_param_list = 12;
  map<uint64, uint32> item_guid_count_map = 11;
}


message ItemGivingRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 108;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 giving_group_id = 15;
  int32 retcode = 5;
  uint32 giving_id = 12;
}


message ItemHint {
  bool is_new = 9;
  uint64 guid = 10;
  uint32 count = 15;
  uint32 item_id = 3;
}


message ItemParam {
  uint32 item_id = 1;
  uint32 count = 2;
}


message ItemRenameAvatarReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1688;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 rename_id = 11;
  string avatar_name = 4;
}


message ItemRenameAvatarRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1700;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 14;
  uint32 cd_time = 5;
  uint32 rename_id = 8;
}


message JigsawPictureData {
  uint32 Unk3300_DFGHKDBENED = 10;
  uint32 Unk3300_FIKPLGJIBGP = 5;
  bool is_finished = 7;
  bool is_open = 14;
}


message JoinHomeWorldFailNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4859;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 6;
  uint32 target_uid = 2;
}


message JoinPlayerFailNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 258;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 4;
}


message JoinPlayerSceneReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 297;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 target_uid = 8;
}


message JoinPlayerSceneRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 202;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 15;
}


message KeepAliveNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 79;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }
}


enum LanguageType {
  LANGUAGE_TYPE_NONE = 0;
  LANGUAGE_TYPE_EN = 1;
  LANGUAGE_TYPE_SC = 2;
  LANGUAGE_TYPE_TC = 3;
  LANGUAGE_TYPE_FR = 4;
  LANGUAGE_TYPE_DE = 5;
  LANGUAGE_TYPE_ES = 6;
  LANGUAGE_TYPE_PT = 7;
  LANGUAGE_TYPE_RU = 8;
  LANGUAGE_TYPE_JP = 9;
  LANGUAGE_TYPE_KR = 10;
  LANGUAGE_TYPE_TH = 11;
  LANGUAGE_TYPE_VN = 12;
  LANGUAGE_TYPE_ID = 13;
  LANGUAGE_TYPE_TR = 14;
  LANGUAGE_TYPE_IT = 15;
}

import "ClientInputType.proto";
import "LanternProjectionLevelInfo.proto";

message LanternProjectionInfo {
  repeated ClientInputType Unk3300_FAIAIJGCBJG = 5;
  repeated uint32 open_stage_list = 15;
  repeated LanternProjectionLevelInfo level_list = 13;
  repeated ClientInputType Unk3300_EBHHFKLDOFB = 10;
}


message LanternProjectionLevelInfo {
  bool is_finished = 7;
  bool is_can_start = 14;
  uint32 id = 10;
  bool is_show_tips = 15;
  uint32 min_finish_time = 5;
}

import "LanternProjectionInfo.proto";
import "LanternRiteFireworksInfo.proto";
import "SalvageStageInfo.proto";

message LanternRiteActivityDetailInfo {
  repeated SalvageStageInfo stage_info_list = 5;
  LanternRiteFireworksInfo fireworks_info = 15;
  bool Unk3300_PDFJNCDGKGH = 11;
  LanternProjectionInfo projection_info = 3;
  bool Unk3300_DKBJLCIMBAL = 8;
  bool is_content_closed = 14;
}


message LanternRiteDoFireworksReformReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8517;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 stage_id = 15;
  uint32 challenge_id = 13;
  uint32 factor_id = 9;
  uint32 skill_id = 4;
}

import "LanternRiteFireworksReformFactorInfo.proto";

message LanternRiteDoFireworksReformRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8171;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated LanternRiteFireworksReformFactorInfo factor_info_list = 6;
  int32 retcode = 4;
  uint32 Unk3300_BJHGCFANMBI = 12;
  uint32 Unk3300_OMHPIGGDCBO = 10;
  uint32 challenge_id = 9;
  uint32 Unk3300_LKOFBPDKEGG = 8;
  bool is_lucky = 1;
  uint32 Unk3300_LKKBPAJOCML = 14;
  uint32 stage_id = 15;
}


message LanternRiteEndFireworksReformReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8936;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 stage_id = 1;
  uint32 challenge_id = 15;
}


message LanternRiteEndFireworksReformRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8414;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  bool Unk3300_CGJNBGAKFAD = 11;
  bool Unk3300_FPEFIADFBNI = 1;
  int32 retcode = 9;
  uint32 stage_id = 13;
  uint32 final_score = 15;
  bool Unk3300_ALMNEGCIILA = 6;
  bool is_new_record = 10;
  uint32 challenge_id = 4;
  bool is_full_score = 7;
}


message LanternRiteFireworksChallengeInfo {
  uint32 best_score = 2;
  bool is_full_score = 3;
  uint32 challenge_id = 12;
}

import "LanternRiteFireworksStageInfo.proto";

message LanternRiteFireworksInfo {
  repeated LanternRiteFireworksStageInfo stage_info_list = 2;
}


message LanternRiteFireworksReformFactorInfo {
  uint32 factor_value = 12;
  uint32 factor_id = 15;
}


message LanternRiteFireworksReformSkillInfo {
  bool is_unlock = 9;
  uint32 skill_id = 1;
  uint32 Unk3300_IEPBAPJHLEI = 15;
  uint32 Unk3300_EDPPFFFLFGG = 10;
}

import "LanternRiteFireworksChallengeInfo.proto";

message LanternRiteFireworksStageInfo {
  uint32 stage_id = 14;
  bool is_open = 9;
  repeated LanternRiteFireworksChallengeInfo challenge_info_list = 11;
}


message LanternRiteStartFireworksReformReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8200;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 challenge_id = 2;
  uint32 stage_id = 1;
}

import "LanternRiteFireworksReformFactorInfo.proto";
import "LanternRiteFireworksReformSkillInfo.proto";

message LanternRiteStartFireworksReformRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8652;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 stage_id = 6;
  uint32 challenge_id = 4;
  uint32 Unk3300_BJHGCFANMBI = 14;
  uint32 Unk3300_LKOFBPDKEGG = 12;
  repeated LanternRiteFireworksReformFactorInfo factor_info_list = 13;
  int32 retcode = 2;
  uint32 Unk3300_OMHPIGGDCBO = 11;
  repeated LanternRiteFireworksReformSkillInfo skill_info_list = 15;
  uint32 Unk3300_LKKBPAJOCML = 5;
}


message LanternRiteTakeSkinRewardReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8398;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}


message LanternRiteTakeSkinRewardRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8104;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 10;
}


message LastPacketPrintNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 94;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}

import "FireworksLaunchSchemeData.proto";

message LaunchFireworksReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5977;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  FireworksLaunchSchemeData scheme_data = 8;
}


message LaunchFireworksRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5936;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 6;
}


message LeaveSceneReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 230;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}


message LeaveSceneRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 256;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 1;
}


message LeaveWorldNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3247;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }
}


enum LeaveWorldReason {
  LEAVE_WORLD_REASON_NONE = 0;
  LEAVE_WORLD_REASON_LOGOUT = 1;
  LEAVE_WORLD_REASON_BACK_MY_WORLD = 2;
  LEAVE_WORLD_REASON_KICK_BY_OWNER = 3;
}


message LevelTagDataNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3468;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated uint32 level_tag_id_list = 15;
}


message LevelupCityReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 223;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 scene_id = 9;
  uint32 item_num = 13;
  uint32 area_id = 7;
}

import "CityInfo.proto";

message LevelupCityRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 287;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 7;
  CityInfo city_info = 14;
  uint32 scene_id = 11;
  uint32 area_id = 9;
}

import "PlayerDieType.proto";
import "ServerBuff.proto";

message LifeStateChangeNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1230;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 move_reliable_seq = 7;
  uint32 entity_id = 8;
  uint32 life_state = 10;
  repeated ServerBuff server_buff_list = 15;
  uint32 source_entity_id = 11;
  PlayerDieType die_type = 4;
  string attack_tag = 13;
}


message LikeCustomDungeonReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 6203;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  bool is_cancel_like = 2;
  uint64 dungeon_guid = 3;
}


message LikeCustomDungeonRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 6233;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 9;
}


message LiveEndNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 810;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 live_id = 12;
}


message LiveStartNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 872;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 live_id = 7;
}


message LoadActivityTerrainNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2089;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 activity_id = 5;
}


message LockedPersonallineData {
  enum LockReason {
    LOCK_REASON_LEVEL = 0;
    LOCK_REASON_QUEST = 1;
  }

  LockReason lock_reason = 13;
  uint32 personal_line_id = 3;
  oneof param {
    uint32 chapter_id = 4;
    uint32 level = 15;
  }
}


enum LoginRewardConfigType {
  LOGIN_REWARD_CONFIG_TYPE_IMMEDIDATE = 0;
  LOGIN_REWARD_CONFIG_TYPE_FIRST = 1;
}


message LuaEnvironmentEffectNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3083;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 type = 8;
  repeated int32 int_param_list = 10;
  string effect_alias = 3;
  repeated float float_param_list = 12;
}


message LuaSetOptionNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 323;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  enum LuaOptionType {
    LUA_OPTION_TYPE_NONE = 0;
    LUA_OPTION_TYPE_PLAYER_INPUT = 1;
  }

  string lua_set_param = 1;
  LuaOptionType option_type = 7;
}


enum LuaShellNotifyType {
  LUA_SHELL_NOTIFY_TYPE_LUASHELL_NOTIFY = 0;
  LUA_SHELL_NOTIFY_TYPE_LUASHELL_HIDE = 1;
}


enum LuaShellType {
  LUA_SHELL_TYPE_LUASHELL_NONE = 0;
  LUA_SHELL_TYPE_LUASHELL_NORMAL = 1;
  LUA_SHELL_TYPE_LUASHELL_SECURITY = 2;
  LUA_SHELL_TYPE_LUASHELL_SHELL_CODE = 3;
}


message LuminanceStoneChallengeActivityDetailInfo {
  bool is_content_closed = 1;
  uint32 current_stage_id = 2;
  bool is_final_gallery_complete = 7;
  uint32 best_score = 6;
}

import "GalleryStopReason.proto";

message LuminanceStoneChallengeGallerySettleInfo {
  uint32 final_score = 12;
  uint32 clean_mud_count = 8;
  GalleryStopReason reason = 15;
  uint32 gallery_id = 11;
  uint32 kill_special_monster_count = 4;
  uint32 kill_monster_count = 1;
}

import "LuminanceStoneChallengeGallerySettleInfo.proto";

message LuminanceStoneChallengeSettleInfo {
  bool is_new_record = 6;
  LuminanceStoneChallengeGallerySettleInfo settle_info = 10;
}

import "LuminanceStoneChallengeSettleInfo.proto";

message LuminanceStoneChallengeSettleNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8784;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 gallery_id = 3;
  LuminanceStoneChallengeSettleInfo settle_info = 5;
}


message LunaRiteAreaFinishNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8382;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 area_id = 14;
}

import "LunaRiteHintStatusType.proto";

message LunaRiteAreaInfo {
  repeated uint32 sacrifice_reward_list = 11;
  uint32 area_id = 15;
  uint32 challenge_index = 1;
  LunaRiteHintStatusType hint_status = 7;
  repeated uint32 sacrifice_list = 14;
}

import "LunaRiteAreaInfo.proto";
import "LunaRiteHintPoint.proto";

message LunaRiteDetailInfo {
  repeated LunaRiteHintPoint hint_point = 4;
  repeated LunaRiteAreaInfo area_info_list = 7;
}


message LunaRiteGroupBundleRegisterNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8455;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 group_link_bundle_id = 7;
}

import "LunaRiteHintPointType.proto";
import "Vector.proto";

message LunaRiteHintPoint {
  uint32 index = 8;
  Vector pos = 3;
  uint32 area_id = 2;
  LunaRiteHintPointType type = 15;
}


message LunaRiteHintPointRemoveNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8763;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated uint32 hint_point_index = 12;
}


message LunaRiteHintPointReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8811;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 area_id = 11;
}

import "LunaRiteHintPoint.proto";
import "LunaRiteHintStatusType.proto";

message LunaRiteHintPointRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8394;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 area_id = 9;
  repeated LunaRiteHintPoint hint_point = 11;
  LunaRiteHintStatusType hint_status = 5;
  int32 retcode = 6;
}


enum LunaRiteHintPointType {
  LUNA_RITE_HINT_POINT_TYPE_NONE = 0;
  LUNA_RITE_HINT_POINT_TYPE_RUNE = 1;
  LUNA_RITE_HINT_POINT_TYPE_CHEST = 2;
}


enum LunaRiteHintStatusType {
  LUNA_RITE_HINT_STATUS_TYPE_DEFAULT = 0;
  LUNA_RITE_HINT_STATUS_TYPE_NO_COUNT = 1;
  LUNA_RITE_HINT_STATUS_TYPE_FINISH = 2;
}


message LunaRiteSacrificeReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8717;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 index = 2;
  uint32 area_id = 14;
}


message LunaRiteSacrificeRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8215;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint32 sacrifice_list = 11;
  int32 retcode = 12;
  uint32 index = 3;
  uint32 area_id = 14;
}


message LunaRiteTakeSacrificeRewardReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8213;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 index = 4;
  uint32 area_id = 2;
}


message LunaRiteTakeSacrificeRewardRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8895;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 area_id = 14;
  int32 retcode = 1;
  uint32 sacrifice_reward_index = 6;
  repeated uint32 sacrifice_reward_list = 9;
  uint32 index = 4;
}


message LunchBoxData {
  map<uint32, uint32> slot_material_map = 4;
}

import "MailData.proto";

message MailChangeNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1430;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint32 del_mail_id_list = 15;
  repeated MailData mail_list = 2;
}


enum MailCollectState {
  MAIL_COLLECT_STATE_COLLECTIBLE_UNKNOWN = 0;
  MAIL_COLLECT_STATE_NOT_COLLECTIBLE = 1;
  MAIL_COLLECT_STATE_COLLECTIBLE_UNCOLLECTED = 2;
  MAIL_COLLECT_STATE_COLLECTIBLE_COLLECTED = 3;
}

import "MailCollectState.proto";
import "MailItem.proto";
import "MailTextContent.proto";

message MailData {
  uint32 mail_id = 1;
  MailTextContent mail_text_content = 4;
  repeated MailItem item_list = 7;
  uint32 send_time = 8;
  uint32 expire_time = 9;
  uint32 importance = 10;
  bool is_read = 11;
  bool is_attachment_got = 12;
  uint32 config_id = 13;
  repeated string argument_list = 14;
  MailCollectState collect_state = 15;
}

import "EquipParam.proto";
import "MaterialDeleteInfo.proto";

message MailItem {
  EquipParam equip_param = 1;
  MaterialDeleteInfo delete_info = 2;
}


message MailTextContent {
  string title = 1;
  string content = 2;
  string sender = 3;
}


message MainCoop {
  enum Status {
    STATUS_INVALID = 0;
    STATUS_RUNNING = 1;
    STATUS_FINISHED = 2;
  }

  Status status = 6;
  map<uint32, int32> normal_var_map = 5;
  map<uint32, int32> temp_var_map = 7;
  uint32 self_confidence = 9;
  uint32 id = 1;
  repeated uint32 save_point_id_list = 10;
  map<uint32, uint32> seen_ending_map = 13;
}


message MainCoopFailNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1956;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  string textmap_id = 7;
  uint32 chapter_id = 14;
}

import "MainCoop.proto";

message MainCoopUpdateNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1991;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated MainCoop main_coop_list = 10;
}

import "MapAreaInfo.proto";

message MapAreaChangeNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3485;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated MapAreaInfo map_area_info_list = 6;
}


message MapAreaInfo {
  uint32 map_area_id = 1;
  bool is_open = 2;
}

import "CellInfo.proto";

message MapInfo {
  int32 minx = 1;
  int32 maxx = 2;
  int32 minz = 3;
  int32 maxz = 4;
  repeated CellInfo cells = 5;
}


enum MapMarkFromType {
  MAP_MARK_FROM_TYPE_NONE = 0;
  MAP_MARK_FROM_TYPE_MONSTER = 1;
  MAP_MARK_FROM_TYPE_QUEST = 2;
}

import "MapMarkFromType.proto";
import "MapMarkPointType.proto";
import "Vector.proto";

message MapMarkPoint {
  uint32 scene_id = 1;
  string name = 2;
  Vector pos = 3;
  MapMarkPointType point_type = 4;
  uint32 monster_id = 5;
  MapMarkFromType from_type = 6;
  uint32 quest_id = 7;
}


enum MapMarkPointType {
  MAP_MARK_POINT_TYPE_NPC = 0;
  MAP_MARK_POINT_TYPE_QUEST = 1;
  MAP_MARK_POINT_TYPE_SPECIAL = 2;
  MAP_MARK_POINT_TYPE_MINE = 3;
  MAP_MARK_POINT_TYPE_COLLECTION = 4;
  MAP_MARK_POINT_TYPE_MONSTER = 5;
  MAP_MARK_POINT_TYPE_FISH_POOL = 6;
}

import "MapMarkTipsType.proto";

message MapMarkTipsInfo {
  MapMarkTipsType tips_type = 1;
  repeated uint32 point_id_list = 2;
}


enum MapMarkTipsType {
  MAP_MARK_TIPS_TYPE_DUNGEON_ELEMENT_TRIAL = 0;
}

import "Vector.proto";

message MarkEntityInMinMapNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 293;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  Vector position = 4;
  uint32 entity_id = 3;
  uint32 monster_id = 14;
}

import "MapMarkPoint.proto";

message MarkMapReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3282;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  enum Operation {
    OPERATION_ADD = 0;
    OPERATION_MOD = 1;
    OPERATION_DEL = 2;
    OPERATION_GET = 3;
  }

  Operation op = 3;
  MapMarkPoint old = 6;
  MapMarkPoint mark = 13;
}

import "MapMarkPoint.proto";

message MarkMapRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3346;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated MapMarkPoint mark_list = 2;
  int32 retcode = 13;
}


message MarkNewNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1239;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint32 id_list = 7;
  uint32 mark_new_type = 3;
}


message MarkTargetInvestigationMonsterNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1921;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 monster_id = 10;
  uint32 scene_id = 7;
  uint32 group_id = 15;
  uint32 investigation_monster_id = 3;
}

import "Vector.proto";

message MassiveBoxInfo {
  int32 id = 1;
  uint32 config_id = 2;
  Vector center = 3;
  Vector extents = 4;
  Vector up = 5;
  Vector forward = 6;
  Vector right = 7;
}

import "ShapeBox.proto";
import "ShapeSphere.proto";

message MassiveEntityElementOpBatchNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 363;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 attacker_id = 8;
  float attack_element_durability = 4;
  int32 Unk3300_PNANGDNNFCH = 2;
  int32 entity_type = 10;
  int32 Unk3300_KNLDJPEMCKP = 7;
  uint32 op_idx = 11;
  uint32 user_id = 1;
  oneof check_shape {
    ShapeSphere shape_sphere = 14;
    ShapeBox shape_box = 13;
  }
}


message MassiveEntityState {
  uint32 entity_type = 1;
  int64 obj_id = 2;
  uint32 element_state = 3;
}

import "MassiveEntityState.proto";

message MassiveEntityStateChangedNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 349;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated MassiveEntityState massive_entity_state_list = 14;
}

import "Vector.proto";

message MassiveGrassInfo {
  uint32 id = 1;
  Vector center = 2;
  Vector size = 3;
}


message MassivePropParam {
  int32 type = 1;
  repeated uint32 reaction_info_list = 2;
  repeated float param_list = 3;
  uint32 sync_flag = 4;
}

import "MassivePropParam.proto";

message MassivePropSyncInfo {
  int64 id = 1;
  repeated MassivePropParam prop_list = 2;
}


message MassiveWaterInfo {
  int64 id = 1;
}

import "OnlinePlayerInfo.proto";

message MatchPlayerInfo {
  bool is_agreed = 4;
  OnlinePlayerInfo player_info = 15;
}


enum MatchReason {
  MATCH_REASON_NONE = 0;
  MATCH_REASON_FINISH = 1;
  MATCH_REASON_PLAYER_CANCEL = 2;
  MATCH_REASON_TIMEOUT = 3;
  MATCH_REASON_PLAYER_CONFIRM = 4;
  MATCH_REASON_FAILED = 5;
  MATCH_REASON_SYSTEM_ERROR = 6;
  MATCH_REASON_INTERRUPTED = 7;
  MATCH_REASON_MP_UNAVAILABLE = 8;
  MATCH_REASON_CONFIRM_TIMEOUT = 9;
}


enum MatchType {
  MATCH_TYPE_NONE = 0;
  MATCH_TYPE_DUNGEON = 1;
  MATCH_TYPE_MP_PLAY = 2;
  MATCH_TYPE_MECHANICUS = 3;
  MATCH_TYPE_GENERAL = 4;
  MATCH_TYPE_GCG = 5;
}

import "MaterialDeleteInfo.proto";

message Material {
  uint32 count = 1;
  MaterialDeleteInfo delete_info = 2;
}


message MaterialDeleteInfo {
  message CountDownDelete {
    map<uint32, uint32> delete_time_num_map = 1;
    uint32 config_count_down_time = 2;
  }

  message DateTimeDelete {
    uint32 delete_time = 1;
  }

  message DelayWeekCountDownDelete {
    map<uint32, uint32> delete_time_num_map = 1;
    uint32 config_delay_week = 2;
    uint32 config_count_down_time = 3;
  }

  bool has_delete_config = 1;
  oneof delete_info {
    CountDownDelete count_down_delete = 2;
    DateTimeDelete date_delete = 3;
    DelayWeekCountDownDelete delay_week_count_down_delete = 4;
  }
}

import "MaterialDeleteReturnType.proto";

message MaterialDeleteReturnNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 698;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  MaterialDeleteReturnType type = 7;
  map<uint32, uint32> Unk3300_OFOKFKBALJD = 12;
  map<uint32, uint32> Unk3300_LAIHDKJAHAF = 8;
}


enum MaterialDeleteReturnType {
  MATERIAL_DELETE_RETURN_TYPE_BAG = 0;
  MATERIAL_DELETE_RETURN_TYPE_SEED = 1;
}


message MaterialDeleteUpdateNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 604;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }
}


message MaterialInfo {
  uint64 guid = 1;
  uint32 count = 13;
}


enum MathExpressionType {
  MATH_EXPRESSION_TYPE_EXPR_NONE = 0;
  MATH_EXPRESSION_TYPE_EXPR_LEVEL = 1;
  MATH_EXPRESSION_TYPE_EXPR_REGISTER_TIME = 2;
  MATH_EXPRESSION_TYPE_EXPR_LAST_LOGIN_TIME = 3;
  MATH_EXPRESSION_TYPE_EXPR_TOTAL_LOGIN_DAYS = 4;
  MATH_EXPRESSION_TYPE_EXPR_PLATFORM = 5;
}


message MathQuaternion {
  float x = 1;
  float y = 2;
  float z = 3;
  float w = 4;
}


message McoinExchangeHcoinReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 623;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 hcoin = 1;
  uint32 mcoin_cost = 3;
}


message McoinExchangeHcoinRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 687;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 mcoin_cost = 12;
  int32 retcode = 10;
  uint32 hcoin = 1;
}


message MechanicusCandidateTeamCreateReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3925;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 difficult_level = 2;
}


message MechanicusCandidateTeamCreateRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3942;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 difficult_level = 11;
  uint32 dungeon_id = 5;
  int32 retcode = 10;
}


message MechanicusCloseNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3943;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 mechanicus_id = 9;
}


message MechanicusCoinNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3919;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 coin = 8;
  uint32 mechanicus_id = 5;
}

import "Uint32Pair.proto";

message MechanicusInfo {
  uint32 mechanicus_id = 1;
  uint32 punish_over_time = 11;
  bool is_finish_teach_dungeon = 7;
  repeated uint32 Unk3300_KJLGFEPIENG = 6;
  repeated uint32 Unk3300_EEBEOCMAIKN = 9;
  uint32 coin = 10;
  repeated Uint32Pair gear_level_pair_list = 13;
}


message MechanicusLevelupGearReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3978;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 mechanicus_id = 14;
  uint32 gear_id = 13;
}


message MechanicusLevelupGearRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3957;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 8;
  uint32 gear_id = 9;
  uint32 mechanicus_id = 4;
  uint32 after_gear_level = 12;
}


message MechanicusOpenNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4000;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 mechanicus_id = 13;
}


message MechanicusSequenceOpenNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3956;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 mechanicus_id = 12;
  uint32 sequence_id = 9;
}


message MechanicusUnlockGearReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3961;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 gear_id = 6;
  uint32 mechanicus_id = 10;
}


message MechanicusUnlockGearRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3947;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 gear_id = 1;
  uint32 mechanicus_id = 7;
  int32 retcode = 10;
}


message MeetNpcReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 561;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 npc_id = 15;
}


message MeetNpcRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 547;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 13;
  uint32 npc_first_met_id = 7;
}


message MetNpcIdListNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 543;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint32 npc_first_met_id_list = 4;
}

import "MichiaeMatsuriChallengePositionInfo.proto";
import "MichiaeMatsuriChestPositionInfo.proto";
import "MichiaeMatsuriStage.proto";

message MichiaeMatsuriActivityDetailInfo {
  uint32 gain_crystal_exp = 11;
  repeated MichiaeMatsuriStage stage_list = 14;
  repeated uint32 unlocked_crystal_skill_list = 5;
  repeated MichiaeMatsuriChallengePositionInfo challenge_pos_list = 3;
  repeated MichiaeMatsuriChestPositionInfo chest_pos_list = 12;
}

import "Vector.proto";

message MichiaeMatsuriChallengePositionInfo {
  uint32 gadget_id = 7;
  Vector pos = 4;
  uint32 group_id = 11;
}

import "Vector.proto";

message MichiaeMatsuriChestPositionInfo {
  Vector pos = 10;
  uint32 group_id = 8;
  uint32 config_id = 5;
}


message MichiaeMatsuriDarkPressureLevelUpdateNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8136;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 dark_pressure_level = 9;
}


message MichiaeMatsuriGainCrystalExpUpdateNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8318;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 activity_id = 13;
  uint32 gain_crystal_exp = 3;
}


message MichiaeMatsuriInteractStatueReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8008;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 statue_entity_id = 9;
}


message MichiaeMatsuriInteractStatueRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8150;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 3;
}


message MichiaeMatsuriRemoveChallengeMarkNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8581;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 group_id = 10;
  uint32 gadget_id = 13;
}


message MichiaeMatsuriRemoveChestMarkNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8203;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 group_id = 5;
  uint32 config_id = 6;
}


message MichiaeMatsuriStage {
  uint32 stage_id = 4;
  bool is_open = 2;
  uint32 open_time = 1;
}


message MichiaeMatsuriStartBossChallengeReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8650;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 difficulty = 4;
  uint32 gadget_entity_id = 6;
}


message MichiaeMatsuriStartBossChallengeRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8953;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 12;
}


message MichiaeMatsuriStartDarkChallengeReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8166;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 worktop_entity_id = 15;
}


message MichiaeMatsuriStartDarkChallengeRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8379;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 12;
}


message MichiaeMatsuriUnlockCrystalSkillReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8632;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 crystal_skill_id = 10;
}


message MichiaeMatsuriUnlockCrystalSkillRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8874;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 crystal_skill_id = 8;
  int32 retcode = 10;
}


message MiracleRingDataNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5222;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  bool is_gadget_created = 15;
  uint32 gadget_entity_id = 7;
  uint32 miracle_ring_cd = 9;
  uint32 last_deliver_item_time = 8;
  uint32 last_take_reward_time = 12;
}

import "InterOpType.proto";
import "ItemParam.proto";

message MiracleRingDeliverItemReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5244;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated ItemParam item_param_list = 3;
  uint32 gadget_entity_id = 6;
  uint32 gadget_id = 8;
  repeated uint64 food_weapon_guid_list = 13;
  InterOpType op_type = 15;
}

import "InterOpType.proto";
import "InteractType.proto";

message MiracleRingDeliverItemRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5217;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 gadget_id = 2;
  InterOpType op_type = 6;
  uint32 gadget_entity_id = 13;
  int32 retcode = 15;
  InteractType interact_type = 12;
}


message MiracleRingDestroyNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5212;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 entity_id = 8;
}


message MiracleRingDropResultNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5231;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 last_take_reward_time = 15;
  int32 drop_result = 8;
}


message MiracleRingTakeRewardReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5235;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 gadget_entity_id = 14;
  uint32 gadget_id = 9;
}


message MiracleRingTakeRewardRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5227;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 10;
}

import "MistTrialLevelData.proto";

message MistTrialActivityDetailInfo {
  repeated MistTrialLevelData trial_level_data_list = 1;
}

import "AvatarType.proto";

message MistTrialBestAvatar {
  uint32 avatar_id = 4;
  uint32 costume_id = 12;
  AvatarType avatar_type = 6;
}


message MistTrialDungeonFailNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8320;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 dungeon_id = 13;
}


message MistTrialFloorLevelNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 988;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 dungeon_scene_id = 6;
  uint32 floor_level = 7;
}


message MistTrialGetChallengeMissionReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8048;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 trial_id = 12;
}

import "MistTrialMissionInfo.proto";

message MistTrialGetChallengeMissionRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8193;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 trial_id = 6;
  repeated MistTrialMissionInfo mission_info_list = 3;
  int32 retcode = 7;
}


message MistTrialGetDungeonExhibitionDataReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8983;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 trial_id = 6;
}


message MistTrialGetDungeonExhibitionDataRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8903;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 trial_id = 10;
  int32 retcode = 2;
}

import "MistTrialBestAvatar.proto";

message MistTrialLevelData {
  uint32 open_time = 10;
  repeated MistTrialBestAvatar best_avatar_list = 3;
  uint32 level_id = 14;
  uint32 first_pass_time = 1;
  MistTrialBestAvatar best_hit_avatar = 11;
  bool is_open = 9;
}


message MistTrialMissionInfo {
  uint32 param = 8;
  uint32 watcher_list_id = 5;
}


message MistTrialSelectAvatarAndEnterDungeonReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8226;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  message SelectAvatarIndex {}

  repeated SelectAvatarIndex select_avatar_index_list = 11;
  repeated uint32 select_trial_avatar_id_list = 1;
  uint32 enter_point_id = 8;
  uint32 trial_id = 5;
}


message MistTrialSelectAvatarAndEnterDungeonRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8658;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 trial_id = 2;
  int32 retcode = 7;
}

import "MistTrialBestAvatar.proto";

message MistTrialSettleNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8116;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  map<uint32, uint32> Unk3300_KFKHAACDJDJ = 5;
  map<uint32, uint32> Unk3300_GMPEELLANLI = 2;
  uint32 dungeon_scene_id = 12;
  uint32 first_pass_time = 8;
  MistTrialBestAvatar best_hit_avatar = 3;
  repeated MistTrialBestAvatar best_avatar_list = 9;
}


enum ModifierAction {
  MODIFIER_ACTION_ADDED = 0;
  MODIFIER_ACTION_REMOVED = 1;
}


message ModifierDurability {
  float reduce_ratio = 1;
  float remaining_durability = 2;
}

import "AbilityString.proto";

message ModifierProperty {
  AbilityString key = 7;
  float value = 5;
}


message MonsterAIConfigHashNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3050;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  int32 hash_value = 7;
  uint32 entity_id = 14;
  uint32 job_id = 11;
}


message MonsterAlertChangeNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 303;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated uint32 monster_entity_list = 5;
  uint32 is_alert = 12;
  uint32 avatar_entity_id = 15;
}


enum MonsterBornType {
  MONSTER_BORN_TYPE_NONE = 0;
  MONSTER_BORN_TYPE_DEFAULT = 1;
  MONSTER_BORN_TYPE_RANDOM = 2;
}


message MonsterForceAlertNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 333;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 monster_entity_id = 1;
}


enum MonsterGuestBanDrop {
  MONSTER_GUEST_BAN_DROP_NONE = 0;
  MONSTER_GUEST_BAN_DROP_DIE_EXP = 1;
  MONSTER_GUEST_BAN_DROP_DIE_LUA = 2;
  MONSTER_GUEST_BAN_DROP_DIE_EXCEL = 4;
  MONSTER_GUEST_BAN_DROP_DIE_ACTIVITY = 8;
  MONSTER_GUEST_BAN_DROP_HP = 16;
  MONSTER_GUEST_BAN_DROP_SUBFIELD = 32;
}

import "MonsterRoute.proto";

message MonsterPointArrayRouteUpdateNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3384;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 entity_id = 5;
  MonsterRoute monster_route = 11;
}

import "RoutePoint.proto";

message MonsterRoute {
  repeated RoutePoint route_points = 1;
  uint32 speed_level = 2;
  uint32 route_type = 3;
  float arrive_range = 4;
}


message MonsterSummonTagNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1379;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 monster_entity_id = 8;
  map<uint32, uint32> summon_tag_map = 4;
}

import "MoonfinTrialLevelInfo.proto";

message MoonfinTrialActivityDetailInfo {
  uint32 special_fish_count = 13;
  map<uint32, MoonfinTrialLevelInfo> level_info_map = 5;
}


message MoonfinTrialLevelInfo {
  uint32 best_record = 15;
  uint32 open_time = 13;
}

import "MotionState.proto";
import "Vector.proto";

message MotionInfo {
  Vector pos = 1;
  Vector rot = 2;
  Vector speed = 3;
  MotionState state = 4;
  repeated Vector params = 5;
  Vector ref_pos = 6;
  uint32 ref_id = 7;
  uint32 scene_time = 8;
  uint64 interval_velocity = 9;
}


enum MotionState {
  MOTION_STATE_NONE = 0;
  MOTION_STATE_RESET = 1;
  MOTION_STATE_STANDBY = 2;
  MOTION_STATE_STANDBY_MOVE = 3;
  MOTION_STATE_WALK = 4;
  MOTION_STATE_RUN = 5;
  MOTION_STATE_DASH = 6;
  MOTION_STATE_CLIMB = 7;
  MOTION_STATE_CLIMB_JUMP = 8;
  MOTION_STATE_STANDBY_TO_CLIMB = 9;
  MOTION_STATE_FIGHT = 10;
  MOTION_STATE_JUMP = 11;
  MOTION_STATE_DROP = 12;
  MOTION_STATE_FLY = 13;
  MOTION_STATE_SWIM_MOVE = 14;
  MOTION_STATE_SWIM_IDLE = 15;
  MOTION_STATE_SWIM_DASH = 16;
  MOTION_STATE_SWIM_JUMP = 17;
  MOTION_STATE_SLIP = 18;
  MOTION_STATE_GO_UPSTAIRS = 19;
  MOTION_STATE_FALL_ON_GROUND = 20;
  MOTION_STATE_JUMP_UP_WALL_FOR_STANDBY = 21;
  MOTION_STATE_JUMP_OFF_WALL = 22;
  MOTION_STATE_POWERED_FLY = 23;
  MOTION_STATE_LADDER_IDLE = 24;
  MOTION_STATE_LADDER_MOVE = 25;
  MOTION_STATE_LADDER_SLIP = 26;
  MOTION_STATE_STANDBY_TO_LADDER = 27;
  MOTION_STATE_LADDER_TO_STANDBY = 28;
  MOTION_STATE_DANGER_STANDBY = 29;
  MOTION_STATE_DANGER_STANDBY_MOVE = 30;
  MOTION_STATE_DANGER_WALK = 31;
  MOTION_STATE_DANGER_RUN = 32;
  MOTION_STATE_DANGER_DASH = 33;
  MOTION_STATE_CROUCH_IDLE = 34;
  MOTION_STATE_CROUCH_MOVE = 35;
  MOTION_STATE_CROUCH_ROLL = 36;
  MOTION_STATE_NOTIFY = 37;
  MOTION_STATE_LAND_SPEED = 38;
  MOTION_STATE_MOVE_FAIL_ACK = 39;
  MOTION_STATE_WATERFALL = 40;
  MOTION_STATE_DASH_BEFORE_SHAKE = 41;
  MOTION_STATE_SIT_IDLE = 42;
  MOTION_STATE_FORCE_SET_POS = 43;
  MOTION_STATE_QUEST_FORCE_DRAG = 44;
  MOTION_STATE_FOLLOW_ROUTE = 45;
  MOTION_STATE_SKIFF_BOARDING = 46;
  MOTION_STATE_SKIFF_NORMAL = 47;
  MOTION_STATE_SKIFF_DASH = 48;
  MOTION_STATE_SKIFF_POWERED_DASH = 49;
  MOTION_STATE_DESTROY_VEHICLE = 50;
  MOTION_STATE_FLY_IDLE = 51;
  MOTION_STATE_FLY_SLOW = 52;
  MOTION_STATE_FLY_FAST = 53;
  MOTION_STATE_AIM_MOVE = 54;
  MOTION_STATE_AIR_COMPENSATION = 55;
  MOTION_STATE_NUM = 56;
}


enum MovingPlatformType {
  MOVING_PLATFORM_TYPE_NONE = 0;
  MOVING_PLATFORM_TYPE_USE_CONFIG = 1;
  MOVING_PLATFORM_TYPE_ABILITY = 2;
  MOVING_PLATFORM_TYPE_ROUTE = 3;
}


message MpBlockNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1806;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 end_time = 12;
}

import "AbilitySyncStateInfo.proto";

message MPLevelEntityInfo {
  AbilitySyncStateInfo ability_info = 15;
  uint32 entity_id = 10;
  uint32 authority_peer_id = 5;
}


message MpPlayGuestReplyInviteReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1837;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 mp_play_id = 13;
  bool is_agree = 12;
}


message MpPlayGuestReplyInviteRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1804;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 mp_play_id = 7;
  int32 retcode = 2;
}


message MpPlayGuestReplyNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1810;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  bool is_agree = 4;
  uint32 uid = 11;
  uint32 mp_play_id = 2;
}


message MpPlayInviteResultNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1839;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  bool all_agree = 14;
  uint32 mp_play_id = 2;
}


message MpPlayOwnerCheckReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1802;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 mp_play_id = 13;
  bool is_skip_match = 7;
}


message MpPlayOwnerCheckRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1843;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 wrong_uid = 4;
  uint32 mp_play_id = 9;
  bool is_skip_match = 15;
  int32 retcode = 6;
}


message MpPlayOwnerInviteNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1821;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 mp_play_id = 11;
  bool is_remain_reward = 4;
  uint32 cd = 7;
}


message MpPlayOwnerStartInviteReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1809;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  bool is_skip_match = 9;
  uint32 mp_play_id = 10;
}


message MpPlayOwnerStartInviteRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1830;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  bool is_skip_match = 14;
  int32 retcode = 8;
  uint32 mp_play_id = 4;
}


message MpPlayPrepareInterruptNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1850;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 mp_play_id = 1;
}


message MpPlayPrepareNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1801;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 mp_play_id = 3;
  uint32 prepare_end_time = 13;
}


message MpPlayRewardInfo {
  uint32 resin = 1;
  repeated uint32 remain_uid_list = 2;
  repeated uint32 qualify_uid_list = 3;
}


enum MpPlayType {
  MP_PLAY_TYPE_NONE = 0;
  MP_PLAY_TYPE_DUNGEON = 1;
  MP_PLAY_TYPE_CRUCIBLE = 2;
}


enum MpSettingType {
  MP_SETTING_TYPE_NO_ENTER = 0;
  MP_SETTING_TYPE_ENTER_FREELY = 1;
  MP_SETTING_TYPE_ENTER_AFTER_APPLY = 2;
}


message MsgParam {
  oneof param {
    uint32 int_param = 13;
    float flt_param = 14;
    string str_param = 4;
  }
}


message MultistagePlayEndNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5345;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 group_id = 4;
  uint32 play_index = 15;
}


message MultistagePlayFinishStageReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5330;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 group_id = 12;
  uint32 play_index = 7;
}


message MultistagePlayFinishStageRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5325;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 9;
  uint32 group_id = 2;
  uint32 play_index = 3;
}

import "BrickBreakerStageInfo.proto";
import "CharAmusementInfo.proto";
import "CoinCollectStageInfo.proto";
import "HideAndSeekStageInfo.proto";
import "InBattleChessInfo.proto";
import "InBattleFleurFairInfo.proto";
import "InBattleIrodoriChessInfo.proto";
import "InBattleMechanicusInfo.proto";

message MultistagePlayInfo {
  uint32 play_index = 13;
  uint32 duration = 2;
  uint32 stage_type = 5;
  uint32 group_id = 1;
  uint32 stage_index = 10;
  uint32 begin_time = 9;
  uint32 play_type = 15;
  oneof detail {
    InBattleMechanicusInfo mechanicus_info = 1303;
    InBattleFleurFairInfo fleur_fair_info = 1502;
    HideAndSeekStageInfo hide_and_seek_info = 1725;
    InBattleChessInfo chess_info = 1756;
    InBattleIrodoriChessInfo irodori_chess_info = 1835;
    CharAmusementInfo char_amusement_info = 1015;
    BrickBreakerStageInfo brick_breaker_info = 547;
    CoinCollectStageInfo coin_collect_info = 1263;
  }
}

import "MultistagePlayInfo.proto";

message MultistagePlayInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5379;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  MultistagePlayInfo info = 5;
}

import "InBattleChessSettleInfo.proto";
import "InBattleIrodoriChessSettleInfo.proto";
import "InBattleMechanicusSettleInfo.proto";

message MultistagePlaySettleNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5360;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 group_id = 3;
  uint32 play_index = 9;
  oneof detail {
    InBattleMechanicusSettleInfo mechanicus_settle_info = 649;
    InBattleChessSettleInfo chess_settle_info = 512;
    InBattleIrodoriChessSettleInfo irodori_chess_settle_info = 520;
  }
}


message MultistagePlayStageEndNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5392;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 group_id = 3;
  uint32 play_index = 1;
}


message MultistageSettleWatcherInfo {
  bool is_inverse = 3;
  uint32 cur_progress = 6;
  uint32 watcher_id = 5;
  uint32 total_progress = 11;
}

import "MuqadasPotionLevelData.proto";

message MuqadasPotionActivityDetailInfo {
  repeated MuqadasPotionLevelData muqadas_potion_level_data_list = 5;
}


message MuqadasPotionActivityEnterDungeonReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 22772;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 level_id = 4;
}


message MuqadasPotionActivityEnterDungeonRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 22650;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 level_id = 14;
  int32 retcode = 15;
}


message MuqadasPotionCaptureWeaknessReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 24162;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 level_id = 7;
  uint32 capture_weakness_count = 10;
}


message MuqadasPotionCaptureWeaknessRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 21366;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 7;
}


message MuqadasPotionDungeonSettleNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 22734;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  bool is_success = 1;
  bool is_new_record = 5;
  uint32 level_id = 8;
  uint32 capture_weakness_count = 3;
  uint32 final_score = 9;
}


message MuqadasPotionLevelData {
  bool is_open = 1;
  uint32 level_id = 2;
  uint32 max_score = 9;
}


message MuqadasPotionRestartDungeonReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 20087;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}


message MuqadasPotionRestartDungeonRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 20780;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 1;
}

import "MusicGameRecord.proto";
import "UgcMusicBriefInfo.proto";

message MusicGameActivityDetailInfo {
  repeated UgcMusicBriefInfo Unk3300_AAGCDCOIPJM = 2;
  repeated UgcMusicBriefInfo Unk3300_OKHAACGHMAP = 12;
  map<uint32, MusicGameRecord> music_game_record_map = 9;
}


message MusicGameRecord {
  bool is_unlock = 3;
  uint32 max_combo = 14;
  uint32 max_score = 7;
}


message MusicGameSettleReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8998;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated uint32 Unk3300_MLLDAPCIDDO = 14;
  repeated uint32 Unk3300_HHBCEPNLCLL = 1007;
  bool Unk3300_DMLNKOLOAAH = 1984;
  uint32 Unk3300_EBOJMGOCPLE = 82;
  uint32 max_combo = 10;
  bool is_save_score = 7;
  float speed = 790;
  uint32 Unk3300_MDHEJNFHBBI = 15;
  uint32 score = 8;
  bool Unk3300_BHIGAMNDFML = 291;
  uint32 correct_hit = 11;
  uint32 Unk3300_HEPJNCAOEMP = 1;
  uint32 combo = 4;
  uint32 Unk3300_IPODKENCAOK = 304;
  uint64 ugc_guid = 3;
  uint32 Unk3300_AHAGHAHGPLD = 12;
  uint32 music_basic_id = 5;
  uint32 Unk3300_GJMIIDIOOMM = 1951;
}


message MusicGameSettleRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8360;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 12;
  uint64 ugc_guid = 7;
  bool is_new_record = 8;
  bool is_unlock_next_level = 10;
  uint32 music_basic_id = 1;
}


message MusicGameStartReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8820;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 music_basic_id = 11;
  bool is_save_score = 12;
  uint64 ugc_guid = 9;
}


message MusicGameStartRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8216;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 12;
  uint32 music_basic_id = 13;
  uint64 ugc_guid = 5;
}

import "PbNavMeshStatsInfo.proto";

message NavMeshStatsNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2323;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated PbNavMeshStatsInfo infos = 3;
}


message NicknameAuditConfigNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 171;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 submit_limit = 3;
  bool is_open = 8;
}

import "ContentAuditAuxiliaryField.proto";
import "ContentAuditField.proto";

message NicknameSignatureAuditData {
  string aid = 1;
  string entity_id = 2;
  string lang = 3;
  string queue_key = 4;
  string region = 5;
  uint32 uid = 6;
  repeated ContentAuditField audit_field_list = 7;
  repeated ContentAuditAuxiliaryField aux_field_list = 8;
}


message NightCrowGadgetInfo {
  repeated uint32 argument_list = 1;
}


message NightCrowGadgetObservationMatchReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 895;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 gadget_entity_id = 7;
  uint32 target_gadget_state = 1;
}


message NightCrowGadgetObservationMatchRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 864;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 15;
}


message NormalUidOpNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5742;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 param_index = 2;
  repeated uint32 param_uid_list = 1;
  uint32 duration = 8;
  repeated uint32 param_list = 11;
}

import "Vector.proto";

message NpcPositionInfo {
  uint32 npc_id = 1;
  Vector pos = 2;
}


message NpcTalkReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 579;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 entity_id = 14;
  uint32 npc_entity_id = 11;
  uint32 talk_id = 12;
}


message NpcTalkRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 530;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 11;
  uint32 cur_talk_id = 12;
  uint32 npc_entity_id = 4;
  uint32 entity_id = 2;
}


enum NpcTalkState {
  NPC_TALK_STATE_NONE = 0;
  NPC_TALK_STATE_AUTO = 1;
  NPC_TALK_STATE_MANUAL = 2;
}


message NpcTalkStateNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 450;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  bool is_ban = 2;
}

import "MathQuaternion.proto";
import "Vector.proto";
import "Vector3Int.proto";

message ObstacleInfo {
  enum ShapeType {
    SHAPE_TYPE_OBSTACLE_SHAPE_CAPSULE = 0;
    SHAPE_TYPE_OBSTACLE_SHAPE_BOX = 1;
  }

  MathQuaternion rotation = 11;
  ShapeType shape = 2;
  Vector3Int extents = 4;
  Vector center = 7;
  int32 obstacle_id = 10;
}

import "ObstacleInfo.proto";

message ObstacleModifyNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2356;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated int32 remove_obstacle_ids = 7;
  repeated ObstacleInfo add_obstacles = 15;
  uint32 scene_id = 12;
}


message OfferingInfo {
  uint32 offering_id = 1;
}


message OfferingInteractReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2920;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 offering_id = 9;
}

import "PlayerOfferingData.proto";

message OfferingInteractRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2906;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 1;
  PlayerOfferingData offering_data = 4;
}


message OfficialCustomDungeon {
  uint32 dungeon_id = 4;
  uint32 win_times = 13;
}

import "Vector.proto";

message OneoffGatherPointDetectorData {
  uint32 hint_radius = 4;
  uint32 config_id = 3;
  bool is_hint_valid = 11;
  Vector hint_center_pos = 12;
  bool is_all_collected = 10;
  uint32 group_id = 1;
  uint32 material_id = 9;
}

import "OneoffGatherPointDetectorData.proto";

message OneoffGatherPointDetectorDataNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4293;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated OneoffGatherPointDetectorData oneoff_gather_point_detector_data_list = 2;
}

import "MpSettingType.proto";
import "ProfilePicture.proto";

message OnlinePlayerInfo {
  uint32 uid = 1;
  string nickname = 2;
  uint32 player_level = 3;
  uint32 avatar_id = 4;
  MpSettingType mp_setting_type = 5;
  uint32 cur_player_num_in_world = 6;
  uint32 world_level = 7;
  string online_id = 8;
  uint32 name_card_id = 9;
  repeated uint32 blacklist_uid_list = 10;
  string signature = 11;
  ProfilePicture profile_picture = 12;
  string psn_id = 13;
}

import "OpActivityInfo.proto";

message OpActivityDataNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5156;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated OpActivityInfo op_activity_info_list = 4;
}

import "BonusOpActivityInfo.proto";

message OpActivityInfo {
  uint32 activity_id = 15;
  uint32 schedule_id = 14;
  uint32 end_time = 4;
  uint32 begin_time = 13;
  bool is_has_change = 7;
  oneof detail {
    BonusOpActivityInfo bonus_info = 6;
  }
}

import "OpActivityTagBriefInfo.proto";

message OpActivityStateNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2579;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint32 finished_bonus_activity_id_list = 6;
  repeated OpActivityTagBriefInfo opened_op_activity_info_list = 8;
}


message OpActivityTagBriefInfo {
  bool has_reward = 14;
  uint32 op_activity_type = 2;
  uint32 config_id = 13;
}


enum OpActivityType {
  OP_ACTIVITY_TYPE_NONE = 0;
  OP_ACTIVITY_TYPE_SIGN_IN = 1;
  OP_ACTIVITY_TYPE_BONUS = 2;
  OP_ACTIVITY_TYPE_TRAVEL_BUSINESS = 3;
  OP_ACTIVITY_TYPE_CRUCIBLE = 4;
}

import "OpActivityInfo.proto";

message OpActivityUpdateNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5119;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  OpActivityInfo op_activity_info = 9;
}


message OpenBlossomCircleCampGuideNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2761;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 refresh_id = 8;
  repeated uint32 circle_camp_id_list = 6;
}


message OpenStateChangeNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 117;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  map<uint32, uint32> open_state_map = 3;
}


message OpenStateUpdateNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 107;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  map<uint32, uint32> open_state_map = 12;
}


message OrderDisplayNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4131;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 order_id = 5;
}

import "ItemParam.proto";

message OrderFinishNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4122;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 order_id = 8;
  string product_id = 5;
  uint32 card_product_remain_days = 6;
  repeated ItemParam item_list = 4;
  uint32 add_mcoin = 14;
}

import "CustomDungeonAbstract.proto";
import "CustomDungeonSetting.proto";
import "CustomDungeonSocial.proto";
import "SocialDetail.proto";

message OtherCustomDungeonBrief {
  bool is_adventure_dungeon = 12;
  uint32 battle_min_cost_time = 10;
  repeated uint32 tag_list = 13;
  bool is_stored = 8;
  uint32 dungeon_id = 15;
  bool is_psn_platform = 1;
  uint64 dungeon_guid = 7;
  CustomDungeonSetting setting = 2;
  CustomDungeonSocial social = 14;
  CustomDungeonAbstract abstract = 4;
  SocialDetail creator_detail = 11;
}


message OtherPlayerEnterHomeNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4749;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  enum Reason {
    REASON_INVALID = 0;
    REASON_ENTER = 1;
    REASON_LEAVE = 2;
  }

  string nickname = 5;
  Reason reason = 10;
}


message OutStuckCustomDungeonReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 6213;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}


message OutStuckCustomDungeonRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 6238;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  int32 retcode = 10;
}


message PacketHead {
  uint32 packet_id = 1;
  uint32 rpc_id = 2;
  uint32 client_sequence_id = 3;
  uint32 enet_channel_id = 4;
  uint32 enet_is_reliable = 5;
  uint64 sent_ms = 6;
  uint32 user_id = 11;
  uint32 user_ip = 12;
  uint32 user_session_id = 13;
  uint64 recv_time_ms = 21;
  uint32 rpc_begin_time_ms = 22;
  map<uint32, uint32> ext_map = 23;
  uint32 sender_app_id = 24;
  uint32 source_service = 31;
  uint32 target_service = 32;
  map<uint32, uint32> service_app_id_map = 33;
  bool is_set_game_thread = 34;
  uint32 game_thread_index = 35;
}


message ParamList {
  repeated uint32 param_list = 1;
}

import "ChildQuest.proto";
import "InferencePageInfo.proto";
import "ParentQuestRandomInfo.proto";

message ParentQuest {
  repeated InferencePageInfo inference_page_list = 5;
  repeated int32 quest_var = 7;
  uint64 video_key = 11;
  uint32 parent_quest_state = 15;
  ParentQuestRandomInfo random_info = 9;
  uint32 parent_quest_id = 3;
  bool is_random = 12;
  repeated ChildQuest child_quest_list = 8;
  bool is_finished = 1;
  map<uint32, uint32> time_var_map = 2;
  uint32 quest_var_seq = 14;
}

import "InferencePageInfo.proto";

message ParentQuestInferenceDataNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 493;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 parent_quest_id = 8;
  repeated InferencePageInfo inference_page_list = 14;
}


message ParentQuestRandomInfo {
  repeated uint32 factor_list = 1;
  uint32 entrance_id = 8;
  uint32 template_id = 15;
}

import "Vector.proto";

message ParkourLevelInfo {
  Vector pos = 2;
  bool is_open = 7;
  uint32 best_record = 14;
  uint32 open_time = 4;
}

import "ObstacleInfo.proto";

message PathfindingEnterSceneReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2400;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 scene_id = 10;
  uint32 Unk3300_MGGFOILELKH = 12;
  uint32 Unk3300_JHLKDOHPIFB = 2;
  repeated uint32 activity_id = 13;
  uint32 version = 11;
  bool is_editor = 8;
  repeated ObstacleInfo obstacles = 5;
}


message PathfindingEnterSceneRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2343;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 7;
}


message PathfindingPingNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2319;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}


message PBNavMeshPoly {
  enum EdgeType {
    EDGE_TYPE_INNER = 0;
    EDGE_TYPE_TILE_BOUND = 1;
    EDGE_TYPE_TILE_BOUND_UNCONNECT = 2;
    EDGE_TYPE_TILE_BOUND_OVERIDE = 3;
  }

  int32 area = 14;
  repeated int32 vects = 13;
  repeated EdgeType edge_types = 5;
}


message PbNavMeshStatsInfo {
  int32 Unk3300_MOKPJBIPHNI = 8;
  int32 Unk3300_IMLHLJAOBLF = 3;
  int32 Unk3300_DHJKKJLKDHB = 15;
  int32 Unk3300_EEONKADBJME = 13;
}

import "PBNavMeshPoly.proto";
import "Vector.proto";

message PBNavMeshTile {
  repeated Vector vecs = 12;
  repeated PBNavMeshPoly polys = 13;
}

import "Vector.proto";

message PerformOperationNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1176;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  enum OperateType {
    OPERATE_TYPE_NONE = 0;
    OPERATE_TYPE_EFFECT = 1;
  }

  OperateType operate_type = 13;
  uint32 index = 7;
  Vector pos = 9;
  uint32 entity_id = 5;
  Vector rot = 4;
}


message PersistentDungeonSwitchAvatarReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1624;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint64 cur_avatar_guid = 14;
  repeated uint64 avatar_team_guid_list = 2;
}


message PersistentDungeonSwitchAvatarRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1677;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 4;
  repeated uint64 avatar_team_guid_list = 9;
  uint64 cur_avatar_guid = 15;
}


message PersonalLineAllDataReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 434;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}

import "LockedPersonallineData.proto";

message PersonalLineAllDataRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 495;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 cur_finished_daily_task_count = 12;
  repeated LockedPersonallineData locked_personal_line_list = 10;
  int32 retcode = 2;
  repeated uint32 can_be_unlocked_personal_line_list = 1;
  repeated uint32 ongoing_personal_line_list = 6;
  uint32 legendary_key_count = 5;
}


message PersonalLineNewUnlockNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 411;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint32 personal_line_id_list = 6;
}


message PersonalSceneJumpReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 252;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 point_id = 14;
}

import "Vector.proto";

message PersonalSceneJumpRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 274;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 dest_scene_id = 3;
  Vector dest_pos = 8;
  int32 retcode = 7;
}


message PhotoActivityClientViewReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 9000;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 pos_id = 13;
}


message PhotoActivityClientViewRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8963;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 13;
  uint32 pos_id = 2;
}

import "PhotoPosData.proto";

message PhotoActivityDetailInfo {
  bool is_content_closed = 5;
  repeated PhotoPosData photo_pos_data_list = 14;
}


message PhotoActivityFinishReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8395;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 pos_id = 8;
  uint32 check_root_id = 11;
  bool is_succ = 15;
}


message PhotoActivityFinishRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8847;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 3;
  uint32 pos_id = 9;
}

import "GalleryStopReason.proto";

message PhotoGallerySettleInfo {
  GalleryStopReason reason = 13;
}

import "Vector.proto";

message PhotoPosData {
  uint32 open_time = 10;
  uint32 pos_id = 9;
  Vector center = 7;
  bool is_view = 13;
  bool is_open = 3;
}


message PingReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 100;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 client_time = 6;
  double total_tick_time = 9;
  float ue_time = 2;
  uint32 seq = 12;
  bytes sc_data = 3;
}


message PingRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 43;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 7;
  uint32 client_time = 10;
  uint32 seq = 15;
}

import "Vector.proto";

message PlaceInfo {
  Vector pos = 1;
  Vector rot = 2;
}


message PlantFlowerAcceptAllGiveFlowerReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8240;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 schedule_id = 14;
}

import "PlantFlowerAcceptFlowerResultInfo.proto";

message PlantFlowerAcceptAllGiveFlowerRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8313;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 schedule_id = 12;
  int32 retcode = 6;
  repeated PlantFlowerAcceptFlowerResultInfo accept_flower_result_info_list = 13;
}


message PlantFlowerAcceptFlowerResultInfo {
  uint32 uid = 9;
  map<uint32, uint32> Unk3300_PALEJEDIAJP = 6;
  map<uint32, uint32> Unk3300_ILAADDCOPKE = 7;
}


message PlantFlowerAcceptGiveFlowerReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8300;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 uid = 13;
  uint32 schedule_id = 12;
}

import "PlantFlowerAcceptFlowerResultInfo.proto";

message PlantFlowerAcceptGiveFlowerRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8554;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  PlantFlowerAcceptFlowerResultInfo accept_flower_result_info = 3;
  uint32 schedule_id = 6;
  int32 retcode = 9;
}


message PlantFlowerActivityDetailInfo {
  uint32 day_index = 1;
  uint32 today_seed_reward_id = 15;
  bool is_content_closed = 3;
  map<uint32, uint32> Unk3300_EPMKDFOBLFK = 9;
  map<uint32, uint32> Unk3300_ELAIBMDIBFJ = 5;
  bool is_today_has_awarded = 8;
}

import "CustomGadgetTreeInfo.proto";

message PlantFlowerEditFlowerCombinationReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8396;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 entity_id = 3;
  CustomGadgetTreeInfo flower_combination_info = 8;
  uint32 schedule_id = 12;
}


message PlantFlowerEditFlowerCombinationRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8684;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 schedule_id = 7;
  int32 retcode = 8;
}

import "ProfilePicture.proto";

message PlantFlowerFriendFlowerWishData {
  uint32 uid = 5;
  map<uint32, uint32> flower_num_map = 11;
  ProfilePicture profile_picture = 8;
  string nickname = 15;
}


message PlantFlowerGetCanGiveFriendFlowerReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8545;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 schedule_id = 14;
}


message PlantFlowerGetCanGiveFriendFlowerRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8273;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  map<uint32, uint32> flower_num_map = 5;
  int32 retcode = 3;
  uint32 schedule_id = 13;
}


message PlantFlowerGetFriendFlowerWishListReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8132;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 schedule_id = 10;
}

import "PlantFlowerFriendFlowerWishData.proto";

message PlantFlowerGetFriendFlowerWishListRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8682;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 schedule_id = 14;
  int32 retcode = 7;
  repeated PlantFlowerFriendFlowerWishData friend_flower_wish_list = 13;
}


message PlantFlowerGetRecvFlowerListReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8662;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 schedule_id = 6;
}

import "PlantFlowerRecvFlowerData.proto";

message PlantFlowerGetRecvFlowerListRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8229;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated PlantFlowerRecvFlowerData recv_flower_list = 15;
  int32 retcode = 11;
  uint32 schedule_id = 4;
}


message PlantFlowerGetSeedInfoReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8674;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 schedule_id = 14;
}


message PlantFlowerGetSeedInfoRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8912;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 5;
  uint32 seed_reward_id = 8;
  uint32 schedule_id = 13;
}


message PlantFlowerGiveFriendFlowerReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8930;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 schedule_id = 6;
  uint32 uid = 3;
  map<uint32, uint32> flower_num_map = 13;
}


message PlantFlowerGiveFriendFlowerRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8559;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint32 limit_flower_list = 12;
  uint32 schedule_id = 10;
  int32 retcode = 14;
}


message PlantFlowerHaveRecvFlowerNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8101;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 schedule_id = 11;
}

import "ProfilePicture.proto";

message PlantFlowerRecvFlowerData {
  string nickname = 14;
  uint32 uid = 2;
  ProfilePicture profile_picture = 12;
  map<uint32, uint32> flower_num_map = 11;
}


message PlantFlowerSetFlowerWishReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8420;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 schedule_id = 4;
  map<uint32, uint32> flower_num_map = 3;
}


message PlantFlowerSetFlowerWishRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8324;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 schedule_id = 5;
  int32 retcode = 12;
}


message PlantFlowerTakeSeedRewardReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8611;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 schedule_id = 2;
}


message PlantFlowerTakeSeedRewardRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8685;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 schedule_id = 11;
  int32 retcode = 6;
}


enum PlatformCategory {
  PLATFORM_CATEGORY_NONE = 0;
  PLATFORM_CATEGORY_PCM = 1;
  PLATFORM_CATEGORY_PSN = 2;
}

import "PlatformInfo.proto";

message PlatformChangeRouteNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 288;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 scene_time = 13;
  PlatformInfo platform = 14;
  uint32 entity_id = 8;
}

import "MathQuaternion.proto";
import "MovingPlatformType.proto";
import "Route.proto";
import "Vector.proto";

message PlatformInfo {
  uint32 route_id = 1;
  int32 start_index = 2;
  uint32 start_route_time = 3;
  uint32 start_scene_time = 4;
  Vector start_pos = 7;
  bool is_started = 8;
  MathQuaternion start_rot = 9;
  uint32 stop_scene_time = 10;
  Vector pos_offset = 11;
  MathQuaternion rot_offset = 12;
  MovingPlatformType moving_platform_type = 13;
  bool is_active = 14;
  Route route = 15;
  uint32 point_id = 16;
}

import "PlatformInfo.proto";

message PlatformStartRouteNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 208;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 entity_id = 12;
  uint32 scene_time = 7;
  PlatformInfo platform = 2;
}

import "PlatformInfo.proto";

message PlatformStopRouteNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 209;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  PlatformInfo platform = 7;
  uint32 scene_time = 10;
  uint32 entity_id = 6;
}


enum PlatformType {
  PLATFORM_TYPE_EDITOR = 0;
  PLATFORM_TYPE_IOS = 1;
  PLATFORM_TYPE_ANDROID = 2;
  PLATFORM_TYPE_PC = 3;
  PLATFORM_TYPE_PS4 = 4;
  PLATFORM_TYPE_SERVER = 5;
  PLATFORM_TYPE_CLOUD_ANDROID = 6;
  PLATFORM_TYPE_CLOUD_IOS = 7;
  PLATFORM_TYPE_PS5 = 8;
  PLATFORM_TYPE_CLOUD_WEB = 9;
  PLATFORM_TYPE_CLOUD_TV = 10;
  PLATFORM_TYPE_CLOUD_MAC = 11;
  PLATFORM_TYPE_CLOUD_PC = 12;
  PLATFORM_TYPE_CLOUD_THIRD_PARTY_MOBILE = 13;
  PLATFORM_TYPE_CLOUD_THIRD_PARTY_PC = 14;
}


message PlayerAllowEnterMpAfterAgreeMatchNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4184;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 target_uid = 11;
}

import "OnlinePlayerInfo.proto";

message PlayerApplyEnterHomeNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4486;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 src_app_id = 8;
  OnlinePlayerInfo src_player_info = 10;
}


message PlayerApplyEnterHomeResultNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4793;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  enum Reason {
    REASON_PLAYER_JUDGE = 0;
    REASON_PLAYER_ENTER_OPTION_REFUSE = 1;
    REASON_PLAYER_ENTER_OPTION_DIRECT = 2;
    REASON_SYSTEM_JUDGE = 3;
    REASON_HOST_IN_MATCH = 4;
    REASON_PS_PLAYER_NOT_ACCEPT_OTHERS = 5;
    REASON_OPEN_STATE_NOT_OPEN = 6;
    REASON_HOST_IN_EDIT_MODE = 7;
    REASON_PRIOR_CHECK = 8;
  }

  uint32 target_uid = 9;
  string target_nickname = 2;
  bool is_agreed = 13;
  Reason reason = 5;
}


message PlayerApplyEnterHomeResultReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4646;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 apply_uid = 9;
  bool is_agreed = 2;
}


message PlayerApplyEnterHomeResultRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4542;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 apply_uid = 3;
  bool is_agreed = 6;
  uint32 param = 4;
  int32 retcode = 14;
}

import "MatchType.proto";
import "OnlinePlayerInfo.proto";

message PlayerApplyEnterMpAfterMatchAgreedNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4168;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 matchserver_id = 3;
  OnlinePlayerInfo src_player_info = 7;
  MatchType match_type = 5;
}

import "OnlinePlayerInfo.proto";

message PlayerApplyEnterMpNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1842;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  OnlinePlayerInfo src_player_info = 12;
  uint32 src_thread_index = 9;
  uint32 src_app_id = 13;
}


message PlayerApplyEnterMpReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1841;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 target_uid = 2;
}


message PlayerApplyEnterMpResultNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1835;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  enum Reason {
    REASON_PLAYER_JUDGE = 0;
    REASON_SCENE_CANNOT_ENTER = 1;
    REASON_PLAYER_CANNOT_ENTER_MP = 2;
    REASON_SYSTEM_JUDGE = 3;
    REASON_ALLOW_ENTER_PLAYER_FULL = 4;
    REASON_WORLD_LEVEL_LOWER_THAN_HOST = 5;
    REASON_HOST_IN_MATCH = 6;
    REASON_PLAYER_IN_BLACKLIST = 7;
    REASON_PS_PLAYER_NOT_ACCEPT_OTHERS = 8;
    REASON_HOST_IS_BLOCKED = 9;
    REASON_OTHER_DATA_VERSION_NOT_LATEST = 10;
    REASON_DATA_VERSION_NOT_LATEST = 11;
    REASON_PLAYER_NOT_IN_PLAYER_WORLD = 12;
    REASON_MAX_PLAYER = 13;
  }

  Reason reason = 10;
  string target_nickname = 5;
  bool is_agreed = 2;
  uint32 target_uid = 4;
}


message PlayerApplyEnterMpResultReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1827;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 apply_uid = 7;
  bool is_agreed = 12;
}


message PlayerApplyEnterMpResultRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1831;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 apply_uid = 8;
  uint32 param = 9;
  bool is_agreed = 13;
  int32 retcode = 15;
}


message PlayerApplyEnterMpRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1822;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 target_uid = 5;
  int32 retcode = 9;
  uint32 param = 14;
}

import "MatchType.proto";

message PlayerCancelMatchReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4185;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  MatchType match_type = 1;
}

import "MatchType.proto";

message PlayerCancelMatchRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4177;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 5;
  MatchType match_type = 10;
}


message PlayerChatCDNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3450;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 over_time = 14;
}

import "ChatInfo.proto";

message PlayerChatNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3265;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  ChatInfo chat_info = 11;
  uint32 channel_id = 13;
}

import "ChatInfo.proto";

message PlayerChatReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3305;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 channel_id = 3;
  ChatInfo chat_info = 9;
}


message PlayerChatRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3087;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 chat_forbidden_endtime = 8;
  int32 retcode = 12;
}


message PlayerCompoundMaterialBoostReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 159;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  bool is_boost_all = 13;
  uint32 Unk3300_PPDDLODBIKG = 8;
  uint32 Unk3300_BGHFBCLHCIG = 5;
  uint32 Unk3300_FEGPHHFLFLM = 11;
}

import "CompoundBoostTakeStatusType.proto";
import "CompoundQueueData.proto";
import "ItemParam.proto";

message PlayerCompoundMaterialBoostRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 129;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated CompoundQueueData compound_queue_data_list = 10;
  CompoundBoostTakeStatusType take_status = 4;
  repeated ItemParam take_item_list = 3;
  int32 retcode = 13;
}


message PlayerCompoundMaterialReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 146;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 compound_id = 4;
  uint32 count = 3;
}

import "CompoundQueueData.proto";

message PlayerCompoundMaterialRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 175;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  CompoundQueueData compound_queue_data = 9;
  int32 retcode = 5;
}

import "MatchType.proto";

message PlayerConfirmMatchReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4167;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  MatchType match_type = 3;
  bool is_agreed = 14;
}

import "MatchType.proto";

message PlayerConfirmMatchRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4162;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  bool is_agreed = 10;
  MatchType match_type = 1;
  int32 retcode = 11;
  uint32 match_id = 5;
}


message PlayerCookArgsReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 109;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 recipe_id = 13;
  uint32 assist_avatar = 15;
}


message PlayerCookArgsRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 188;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 6;
  float qte_range_ratio = 3;
}


message PlayerCookReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 105;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 recipe_id = 1;
  uint32 qte_quality = 5;
  uint32 cook_count = 7;
  uint32 assist_avatar = 12;
}

import "CookRecipeData.proto";
import "ItemParam.proto";

message PlayerCookRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 194;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 4;
  CookRecipeData recipe_data = 12;
  repeated ItemParam item_list = 5;
  uint32 qte_quality = 1;
  repeated ItemParam extra_item_list = 3;
  uint32 cook_count = 11;
}

import "CustomDungeonBattleRecordMuipData.proto";

message PlayerCustomDungeonMuipData {
  uint32 uid = 1;
  repeated uint64 publish_dungeon_list = 2;
  repeated uint64 store_dungeon_list = 3;
  repeated CustomDungeonBattleRecordMuipData battle_record_list = 4;
}

import "PropValue.proto";

message PlayerDataNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 147;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  bool is_first_login_today = 12;
  string nick_name = 9;
  uint64 server_time = 1;
  map<uint32, PropValue> prop_map = 4;
  uint32 region_id = 2;
}


message PlayerDeathZoneNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 6272;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 cur_death_zone_id = 11;
}


enum PlayerDieOption {
  PLAYER_DIE_OPTION_OPT_NONE = 0;
  PLAYER_DIE_OPTION_OPT_REPLAY = 1;
  PLAYER_DIE_OPTION_OPT_CANCEL = 2;
  PLAYER_DIE_OPTION_OPT_REVIVE = 3;
}


enum PlayerDieType {
  PLAYER_DIE_TYPE_NONE = 0;
  PLAYER_DIE_TYPE_KILL_BY_MONSTER = 1;
  PLAYER_DIE_TYPE_KILL_BY_GEAR = 2;
  PLAYER_DIE_TYPE_FALL = 3;
  PLAYER_DIE_TYPE_DRAWN = 4;
  PLAYER_DIE_TYPE_ABYSS = 5;
  PLAYER_DIE_TYPE_GM = 6;
  PLAYER_DIE_TYPE_CLIMATE_COLD = 7;
  PLAYER_DIE_TYPE_STORM_LIGHTING = 8;
}

import "DungeonEnterPosInfo.proto";

message PlayerEnterDungeonReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 956;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 dungeon_id = 4;
  DungeonEnterPosInfo enter_pos_info = 9;
  uint32 point_id = 1;
}


message PlayerEnterDungeonRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 919;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 5;
  uint32 point_id = 6;
  uint32 dungeon_id = 1;
}

import "AvatarEnterSceneInfo.proto";
import "MPLevelEntityInfo.proto";
import "TeamEnterSceneInfo.proto";

message PlayerEnterSceneInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 241;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  TeamEnterSceneInfo team_enter_info = 6;
  repeated AvatarEnterSceneInfo avatar_enter_info = 10;
  uint32 cur_avatar_entity_id = 4;
  MPLevelEntityInfo mp_level_entity_info = 15;
  uint32 enter_scene_token = 1;
}

import "EnterType.proto";
import "Vector.proto";

message PlayerEnterSceneNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 279;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 world_type = 1224;
  bool is_skip_ui = 32;
  uint32 world_level = 4;
  Vector pos = 1;
  bool is_first_login_enter_scene = 3;
  uint32 prev_scene_id = 13;
  uint32 enter_scene_token = 6;
  uint32 dungeon_id = 2;
  uint32 scene_id = 11;
  EnterType type = 12;
  repeated uint32 scene_tag_id_list = 5;
  uint64 scene_begin_time = 9;
  uint32 enter_reason = 287;
  uint32 target_uid = 8;
  Vector prev_pos = 10;
  string scene_transaction = 370;
}

import "CylinderRegionSize.proto";
import "PolygonRegionSize.proto";
import "Vector.proto";

message PlayerEyePointStateNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3079;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  Vector eye_point_pos = 12;
  bool Unk3300_KFOHOBLMMLB = 9;
  uint32 Unk3300_GNFJIOEGHOE = 1;
  uint32 Unk3300_BIHEKNFDDDI = 8;
  int32 fix_lod_level = 11;
  bool Unk3300_NIPFCFCBFAE = 14;
  uint32 Unk3300_JGEMKKJAHKA = 13;
  uint32 Unk3300_EOPFNBBBGPK = 6;
  oneof region_size {
    float sphere_radius = 1413;
    Vector cubic_size = 1362;
    CylinderRegionSize cylinder_size = 1250;
    PolygonRegionSize polygon_size = 608;
  }
}


message PlayerFishingDataNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5821;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 last_fish_rod_id = 8;
}


message PlayerForceExitReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 126;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}


message PlayerForceExitRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 177;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 10;
}


message PlayerGameTimeByLuaNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 186;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 game_time = 12;
  uint32 uid = 8;
  uint32 sim_speed = 14;
}


message PlayerGameTimeNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 127;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 uid = 15;
  bool is_home = 10;
  uint32 game_time = 4;
}


message PlayerGCGMatchConfirmNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4171;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  bool is_agree = 6;
  uint32 match_id = 14;
  uint32 uid = 5;
}

import "MatchReason.proto";

message PlayerGCGMatchDismissNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4180;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint32 uid_list = 11;
  MatchReason reason = 7;
  uint32 match_id = 4;
}


message PlayerGeneralMatchConfirmNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4195;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 match_id = 2;
  uint32 uid = 6;
  bool is_agree = 13;
}

import "MatchReason.proto";

message PlayerGeneralMatchDismissNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4158;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  MatchReason reason = 11;
  repeated uint32 uid_list = 10;
  uint32 match_id = 3;
}


message PlayerGetForceQuitBanInfoReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4152;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}


message PlayerGetForceQuitBanInfoRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4193;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 match_id = 13;
  uint32 expire_time = 2;
  int32 retcode = 4;
}

import "FriendEnterHomeOption.proto";

message PlayerHomeCompInfo {
  FriendEnterHomeOption friend_enter_home_option = 13;
  repeated uint32 seen_module_id_list = 5;
  repeated uint32 unlocked_module_id_list = 2;
  repeated uint32 levelup_reward_got_level_list = 11;
}

import "PlayerHomeCompInfo.proto";

message PlayerHomeCompInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4818;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  PlayerHomeCompInfo comp_info = 2;
}


message PlayerInjectFixNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 165;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 id = 11;
  bytes inject_fix = 12;
}

import "Investigation.proto";
import "InvestigationTarget.proto";

message PlayerInvestigationAllInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1916;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated Investigation investigation_list = 11;
  repeated InvestigationTarget investigation_target_list = 5;
}

import "Investigation.proto";

message PlayerInvestigationNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1915;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated Investigation investigation_list = 12;
}

import "InvestigationTarget.proto";

message PlayerInvestigationTargetNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1902;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated InvestigationTarget investigation_target_list = 10;
}


message PlayerLevelRewardUpdateNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 104;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint32 level_list = 9;
}

import "Vector.proto";

message PlayerLocationInfo {
  uint32 uid = 7;
  Vector rot = 13;
  Vector pos = 3;
}

import "AdjustTrackingInfo.proto";
import "TrackingIOInfo.proto";

message PlayerLoginReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 156;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  string device_uuid = 5;
  uint32 target_uid = 10;
  bytes extra_bin_data = 2046;
  string platform = 4;
  string checksum = 1334;
  uint32 channel_id = 1565;
  string client_verison_hash = 2040;
  uint32 language_type = 11;
  uint32 client_data_version = 847;
  uint32 account_type = 7;
  string security_library_md5 = 868;
  string online_id = 577;
  uint32 Unk3300_PMGFBMJNNCL = 82;
  string device_name = 12;
  string birthday = 875;
  uint32 tag = 525;
  string account_uid = 14;
  string device_info = 15;
  uint32 sub_channel_id = 1458;
  bool is_editor = 1;
  string token = 8;
  uint32 reg_platform = 424;
  string checksum_client_version = 581;
  uint32 Unk3300_OOBHAIIIPHH = 85;
  uint32 Unk3300_NDLANBEIGEG = 1320;
  string country_code = 104;
  uint32 Unk3300_PIPLDEAPMMN = 1790;
  TrackingIOInfo tracking_io_info = 1713;
  bool is_transfer = 624;
  string security_library_version = 828;
  string client_version = 2;
  bool is_guest = 13;
  string system_version = 6;
  uint32 target_home_owner_uid = 899;
  string psn_id = 1146;
  bytes security_cmd_reply = 874;
  uint32 Unk3300_OFFHPAFIFGD = 1028;
  uint64 login_rand = 9;
  AdjustTrackingInfo adjust_tracking_info = 64;
  bytes environment_error_code = 256;
  uint32 platform_type = 3;
  string cps = 1983;
}

import "BlockInfo.proto";
import "FeatureBlockInfo.proto";
import "ResVersionConfig.proto";
import "ShortAbilityHashPair.proto";

message PlayerLoginRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 119;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint64 login_rand = 9;
  bytes player_data = 2;
  string client_silence_md5 = 16;
  double total_tick_time = 530;
  bool is_use_ability_hash = 5;
  bool is_audit = 930;
  string birthday = 1387;
  bool Unk3300_HGFNECIJDLN = 13;
  string client_silence_version_suffix = 908;
  string client_version_suffix = 1845;
  string next_resource_url = 1324;
  bool Unk3300_EJKCNNDFAAI = 196;
  repeated ShortAbilityHashPair short_ability_hash_map = 1373;
  bool is_data_need_relogin = 1119;
  ResVersionConfig res_version_config = 808;
  uint32 client_silence_data_version = 1;
  uint32 target_uid = 15;
  string register_cps = 99;
  bool is_sc_open = 1522;
  bool Unk3300_IIHDKKNJPGD = 8;
  uint32 player_data_version = 14;
  bytes sc_info = 1888;
  string country_code = 360;
  ResVersionConfig next_res_version_config = 1688;
  bool Unk3300_IADLIIMGDMC = 17;
  map<uint32, BlockInfo> block_info_map = 2018;
  bool is_transfer = 295;
  uint32 target_home_owner_uid = 446;
  string game_biz = 4;
  map<string, int32> ability_hash_map = 3;
  int32 ability_hash_code = 12;
  uint32 client_data_version = 10;
  string client_md5 = 1299;
  int32 retcode = 7;
  repeated FeatureBlockInfo feature_block_info_list = 138;
}


message PlayerLogoutNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 161;
  //   ENET_CHANNEL_ID = 0;
  // }

  int32 retcode = 12;
}


message PlayerLogoutReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 200;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  enum Reason {
    REASON_DISCONNECT = 0;
    REASON_CLIENT_REQ = 1;
    REASON_TIMEOUT = 2;
    REASON_ADMIN_REQ = 3;
    REASON_SERVER_CLOSE = 4;
    REASON_GM_CLEAR = 5;
    REASON_PLAYER_TRANSFER = 6;
    REASON_CLIENT_CHECKSUM_INVALID = 7;
  }

  Reason reason = 9;
}


message PlayerLogoutRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 143;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 9;
}

import "LuaShellType.proto";

message PlayerLuaShellNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 166;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 id = 8;
  LuaShellType shell_type = 1;
  bytes lua_shell = 4;
  uint32 use_type = 2;
}

import "MatchType.proto";

message PlayerMatchAgreedResultNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4165;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  enum Reason {
    REASON_SUCC = 0;
    REASON_TARGET_SCENE_CANNOT_ENTER = 1;
    REASON_SELF_MP_UNAVAILABLE = 2;
    REASON_OTHER_DATA_VERSION_NOT_LATEST = 3;
    REASON_DATA_VERSION_NOT_LATEST = 4;
  }

  MatchType match_type = 12;
  uint32 target_uid = 4;
  Reason reason = 13;
}

import "MatchType.proto";

message PlayerMatchInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4172;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 dungeon_id = 4;
  uint32 Unk3300_BNEIANJBLBL = 5;
  uint32 Unk3300_OCILKHJPJED = 10;
  uint32 host_uid = 12;
  MatchType match_type = 13;
  uint32 mechanicus_difficult_level = 15;
  uint32 mp_play_id = 2;
  uint32 match_id = 7;
  repeated uint32 match_param_list = 11;
}

import "MatchReason.proto";

message PlayerMatchStopNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4181;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  MatchReason reason = 10;
  uint32 host_uid = 8;
}

import "GCGMatchInfo.proto";
import "GeneralMatchInfo.proto";
import "MatchType.proto";

message PlayerMatchSuccNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4194;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  GeneralMatchInfo general_match_info = 7;
  uint32 dungeon_id = 3;
  MatchType match_type = 15;
  uint32 mechanicus_difficult_level = 5;
  uint32 confirm_end_time = 13;
  GCGMatchInfo gcg_match_info = 9;
  uint32 mp_play_id = 11;
  uint32 host_uid = 10;
}

import "ContentAuditInfo.proto";

message PlayerNicknameAuditDataNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 162;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  ContentAuditInfo info = 7;
}


message PlayerNicknameNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 151;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  string nickname = 4;
}


message PlayerOfferingData {
  uint32 level = 8;
  uint32 offering_id = 3;
  bool is_new_max_level = 14;
  bool is_first_interact = 9;
  repeated uint32 taken_level_reward_list = 2;
}

import "PlayerOfferingData.proto";

message PlayerOfferingDataNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2911;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated PlayerOfferingData offering_data_list = 11;
}


message PlayerOfferingReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2915;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 offering_id = 15;
}

import "ItemParam.proto";
import "PlayerOfferingData.proto";

message PlayerOfferingRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2916;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 5;
  repeated ItemParam item_list = 3;
  PlayerOfferingData offering_data = 10;
}


message PlayerPreEnterMpNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1817;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  enum State {
    STATE_INVALID = 0;
    STATE_START = 1;
    STATE_TIMEOUT = 2;
  }

  string nickname = 6;
  uint32 uid = 4;
  State state = 10;
}


message PlayerPropChangeNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 116;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 prop_delta = 4;
  uint32 prop_type = 13;
}

import "PropChangeReason.proto";

message PlayerPropChangeReasonNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1257;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  float old_value = 10;
  float cur_value = 11;
  PropChangeReason reason = 2;
  uint32 prop_type = 5;
}

import "PropValue.proto";

message PlayerPropNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 139;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  map<uint32, PropValue> prop_map = 1;
}


message PlayerQuitDungeonReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1000;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  bool is_quit_immediately = 3;
  uint32 point_id = 8;
}


message PlayerQuitDungeonRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 943;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 point_id = 10;
  int32 retcode = 6;
}


message PlayerQuitFromHomeNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4724;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  enum QuitReason {
    QUIT_REASON_INVALID = 0;
    QUIT_REASON_KICK_BY_HOST = 1;
    QUIT_REASON_BACK_TO_MY_WORLD = 2;
    QUIT_REASON_HOME_BLOCKED = 3;
    QUIT_REASON_HOME_IN_EDIT_MODE = 4;
    QUIT_REASON_BY_MUIP = 5;
    QUIT_REASON_CUR_MODULE_CLOSED = 6;
  }

  QuitReason reason = 11;
}


message PlayerQuitFromMpNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1844;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  enum QuitReason {
    QUIT_REASON_INVALID = 0;
    QUIT_REASON_HOST_NO_OTHER_PLAYER = 1;
    QUIT_REASON_KICK_BY_HOST = 2;
    QUIT_REASON_BACK_TO_MY_WORLD = 3;
    QUIT_REASON_KICK_BY_HOST_LOGOUT = 4;
    QUIT_REASON_KICK_BY_HOST_BLOCK = 5;
    QUIT_REASON_BE_BLOCKED = 6;
    QUIT_REASON_KICK_BY_HOST_ENTER_HOME = 7;
    QUIT_REASON_HOST_SCENE_INVALID = 8;
    QUIT_REASON_KICK_BY_PLAY = 9;
    QUIT_REASON_KICK_BY_ISLAND_PARTY_GALLERY_START_FAILED = 10;
  }

  QuitReason reason = 2;
}

import "ItemParam.proto";

message PlayerRandomCookReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 172;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated ItemParam material_list = 5;
}


message PlayerRandomCookRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 103;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 14;
}

import "ProductPriceTier.proto";

message PlayerRechargeDataNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4127;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated ProductPriceTier product_price_tier_list = 7;
  uint32 card_product_remain_days = 6;
}

import "ReportReasonType.proto";

message PlayerReportReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4022;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  string target_home_module_name = 5;
  uint32 target_uid = 10;
  ReportReasonType reason = 7;
  string content = 11;
  uint32 target_home_module_id = 15;
}


message PlayerReportRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4082;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 cd_time = 8;
  int32 retcode = 7;
  uint32 target_uid = 11;
}

import "PlayerRoutineInfo.proto";

message PlayerRoutineDataNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3542;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated PlayerRoutineInfo routine_info_list = 11;
}


message PlayerRoutineInfo {
  uint32 routine_type = 5;
  uint32 finished_num = 9;
}


message PlayerRTTInfo {
  uint32 rtt = 12;
  uint32 uid = 14;
}


message PlayerSetLanguageReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 111;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 language_type = 5;
}


message PlayerSetLanguageRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 150;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 14;
}


message PlayerSetOnlyMPWithPSPlayerReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1815;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  bool is_only = 10;
}


message PlayerSetOnlyMPWithPSPlayerRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1818;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  bool is_only = 4;
  int32 retcode = 11;
}


message PlayerSetPauseReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 122;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  bool is_paused = 15;
}


message PlayerSetPauseRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 182;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 10;
}

import "ContentAuditInfo.proto";

message PlayerSignatureAuditDataNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4036;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  ContentAuditInfo info = 11;
}


message PlayerSignatureNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4041;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  string signature = 13;
}

import "MatchType.proto";

message PlayerStartMatchReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4192;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 mp_play_id = 12;
  uint32 mechanicus_difficult_level = 15;
  uint32 dungeon_id = 10;
  uint32 match_id = 2;
  MatchType match_type = 8;
  repeated uint32 match_param_list = 3;
}

import "MatchType.proto";

message PlayerStartMatchRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4191;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 dungeon_id = 1;
  uint32 match_id = 12;
  MatchType match_type = 10;
  uint32 punish_end_time = 8;
  uint32 mp_play_id = 11;
  uint32 param = 7;
  uint32 mechanicus_difficult_level = 3;
  int32 retcode = 6;
}

import "Item.proto";
import "StoreType.proto";

message PlayerStoreNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 679;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  StoreType store_type = 1;
  uint32 weight_limit = 14;
  repeated Item item_list = 10;
}


enum PlayerTag {
  PLAYER_TAG_NORMAL = 0;
  PLAYER_TAG_SUB_ACCOUNT = 3;
  PLAYER_TAG_SUB_ACCOUNT_TRANS_TO_NORMAL = 5;
}


message PlayerTimeNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 121;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  bool is_paused = 12;
  uint64 player_time = 11;
  uint64 server_time = 5;
}


message PlayerUidExtInfo {
  uint32 reg_platform = 1;
}

import "WidgetSlotData.proto";

message PlayerWidgetInfo {
  uint32 uid = 6;
  repeated WidgetSlotData slot_list = 4;
}

import "PlayerLocationInfo.proto";

message PlayerWorldLocationInfo {
  PlayerLocationInfo player_loc = 3;
  uint32 scene_id = 11;
}


message PlayerWorldSceneInfo {
  bool is_locked = 3;
  uint32 scene_id = 8;
  repeated uint32 scene_tag_id_list = 11;
}

import "PlayerWorldSceneInfo.proto";

message PlayerWorldSceneInfoListNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3059;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated PlayerWorldSceneInfo info_list = 2;
}


message PlayProduct {
  string product_id = 1;
  string price_tier = 2;
  uint32 schedule_id = 3;
}

import "AbilitySyncStateInfo.proto";

message PlayTeamEntityInfo {
  uint32 entity_id = 1;
  uint32 player_uid = 2;
  uint32 authority_peer_id = 3;
  uint32 gadget_config_id = 5;
  AbilitySyncStateInfo ability_info = 6;
}

import "VectorPlane.proto";

message PolygonRegionSize {
  float height = 3;
  repeated VectorPlane point_list = 9;
}


message PostEnterSceneReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3286;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 enter_scene_token = 3;
}


message PostEnterSceneRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3094;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 9;
  uint32 enter_scene_token = 12;
}

import "PotionStageData.proto";

message PotionActivityDetailInfo {
  repeated PotionStageData stage_list = 4;
}


message PotionAvatarInfo {
  bool is_trial = 15;
  uint64 avatar_id = 1;
}


message PotionDungeonAvatar {
  uint64 avatar_guid = 14;
  bool is_trial = 1;
}


message PotionDungeonResultInfo {
  uint32 left_time = 7;
  uint32 mode_id = 13;
  uint32 stage_id = 1;
  uint32 level_id = 2;
  uint32 final_score = 15;
  uint32 difficulty_level = 8;
}

import "PotionDungeonAvatar.proto";

message PotionEnterDungeonNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8777;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 mode_id = 11;
  uint32 level_id = 3;
  repeated PotionDungeonAvatar dungeon_avatar_list = 1;
  uint32 difficulty_level = 14;
  uint32 stage_id = 10;
}

import "PotionAvatarInfo.proto";

message PotionEnterDungeonReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8945;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 level_id = 6;
  repeated PotionAvatarInfo avatar_info_list = 15;
  uint32 mode_id = 10;
  repeated uint32 buff_id_list = 9;
  uint32 stage_id = 2;
}


message PotionEnterDungeonRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8679;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 9;
}


message PotionLevelData {
  uint32 difficulty_level = 3;
  uint32 mode_id = 7;
  uint32 score = 1;
  uint32 level_id = 9;
}


message PotionResetChallengeReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8331;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 stage_id = 4;
}

import "PotionStageData.proto";

message PotionResetChallengeRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8804;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 7;
  PotionStageData stage_data = 5;
}


message PotionRestartDungeonReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8575;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}


message PotionRestartDungeonRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8492;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 10;
}


message PotionSaveDungeonResultReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8672;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 level_id = 14;
  uint32 stage_id = 7;
}


message PotionSaveDungeonResultRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8579;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 13;
}

import "PotionLevelData.proto";

message PotionStageData {
  repeated uint32 Unk3300_BMEHJHFCPMA = 7;
  repeated uint32 Unk3300_NLMEPPPMCKI = 9;
  uint32 stage_id = 13;
  bool is_open = 8;
  repeated PotionLevelData level_list = 11;
}

import "ChatInfo.proto";

message PrivateChatNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5006;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  ChatInfo chat_info = 9;
}


message PrivateChatReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5029;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 target_uid = 5;
  oneof content {
    string text = 1;
    uint32 icon = 13;
  }
}


message PrivateChatRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4980;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 4;
  uint32 chat_forbidden_endtime = 6;
}


message ProductPriceTier {
  string price_tier = 3;
  string product_id = 14;
}


message ProfilePicture {
  uint32 avatar_id = 1;
  uint32 costume_id = 2;
}

import "ProfilePicture.proto";

message ProfilePictureChangeNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4023;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  ProfilePicture profile_picture = 12;
}


message ProjectorOptionReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 803;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  enum ProjectorOpType {
    PROJECTOR_OP_TYPE_NONE = 0;
    PROJECTOR_OP_TYPE_CREATE = 1;
    PROJECTOR_OP_TYPE_DESTROY = 2;
  }

  uint32 op_type = 2;
  uint32 entity_id = 8;
}


message ProjectorOptionRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 833;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 5;
  uint32 entity_id = 1;
  uint32 op_type = 14;
}


enum PropChangeReason {
  PROP_CHANGE_REASON_NONE = 0;
  PROP_CHANGE_REASON_STATUE_RECOVER = 1;
  PROP_CHANGE_REASON_ENERGY_BALL = 2;
  PROP_CHANGE_REASON_ABILITY = 3;
  PROP_CHANGE_REASON_LEVELUP = 4;
  PROP_CHANGE_REASON_ITEM = 5;
  PROP_CHANGE_REASON_AVATAR_CARD = 6;
  PROP_CHANGE_REASON_CITY_LEVELUP = 7;
  PROP_CHANGE_REASON_AVATAR_UPGRADE = 8;
  PROP_CHANGE_REASON_AVATAR_PROMOTE = 9;
  PROP_CHANGE_REASON_PLAYER_ADD_EXP = 10;
  PROP_CHANGE_REASON_FINISH_QUEST = 11;
  PROP_CHANGE_REASON_GM = 12;
  PROP_CHANGE_REASON_MANUAL_ADJUST_WORLD_LEVEL = 13;
}

import "PropValue.proto";

message PropPair {
  uint32 type = 1;
  PropValue prop_value = 2;
}


message PropValue {
  uint32 type = 1;
  int64 val = 4;
  oneof value {
    int64 ival = 2;
    float fval = 3;
  }
}


enum ProtEntityType {
  PROT_ENTITY_TYPE_NONE = 0;
  PROT_ENTITY_TYPE_AVATAR = 1;
  PROT_ENTITY_TYPE_MONSTER = 2;
  PROT_ENTITY_TYPE_NPC = 3;
  PROT_ENTITY_TYPE_GADGET = 4;
  PROT_ENTITY_TYPE_REGION = 5;
  PROT_ENTITY_TYPE_WEAPON = 6;
  PROT_ENTITY_TYPE_WEATHER = 7;
  PROT_ENTITY_TYPE_SCENE = 8;
  PROT_ENTITY_TYPE_TEAM = 9;
  PROT_ENTITY_TYPE_MASSIVE_ENTITY = 10;
  PROT_ENTITY_TYPE_MP_LEVEL = 11;
  PROT_ENTITY_TYPE_PLAY_TEAM_ENTITY = 12;
  PROT_ENTITY_TYPE_EYE_POINT = 13;
  PROT_ENTITY_TYPE_MAX = 14;
}


message ProudSkillChangeNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1027;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint64 avatar_guid = 13;
  repeated uint32 proud_skill_list = 5;
  uint32 skill_depot_id = 12;
  uint32 entity_id = 3;
}


message ProudSkillExtraLevelNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1025;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint64 avatar_guid = 13;
  uint32 extra_level = 4;
  uint32 talent_type = 8;
  uint32 talent_index = 2;
}


message ProudSkillUpgradeReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1078;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint64 avatar_guid = 13;
  uint32 old_proud_skill_level = 3;
  uint32 proud_skill_id = 2;
}


message ProudSkillUpgradeRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1057;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint64 avatar_guid = 3;
  uint32 proud_skill_id = 15;
  int32 retcode = 13;
}

import "FriendBrief.proto";

message PSNBlackListNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4085;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated FriendBrief psn_blacklist = 13;
}

import "FriendBrief.proto";

message PSNFriendListNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4087;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated FriendBrief psn_friend_list = 1;
}


message PSPlayerApplyEnterMpReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1808;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  string target_psn_id = 9;
}


message PSPlayerApplyEnterMpRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1845;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  string target_psn_id = 3;
  int32 retcode = 5;
  uint32 param = 10;
}


message PublishCustomDungeonReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 6245;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint64 dungeon_guid = 6;
  repeated uint32 tag_list = 9;
}


message PublishCustomDungeonRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 6202;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 13;
}

import "UgcType.proto";

message PublishUgcReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 6312;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint64 ugc_guid = 12;
  UgcType ugc_type = 10;
}

import "UgcType.proto";

message PublishUgcRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 6334;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  UgcType ugc_type = 2;
  uint64 ugc_guid = 12;
  int32 retcode = 10;
}


message PullPrivateChatReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4993;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 from_sequence = 5;
  uint32 target_uid = 12;
  uint32 pull_num = 11;
}

import "ChatInfo.proto";

message PullPrivateChatRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5011;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated ChatInfo chat_info = 6;
  int32 retcode = 1;
}


message PullRecentChatReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4997;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 pull_num = 3;
  uint32 begin_sequence = 15;
}

import "ChatInfo.proto";

message PullRecentChatRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5028;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated ChatInfo chat_info = 13;
  int32 retcode = 11;
}

import "PushTipsData.proto";

message PushTipsAllDataNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2237;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated PushTipsData push_tips_list = 4;
}

import "PushTipsData.proto";

message PushTipsChangeNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2289;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated PushTipsData push_tips_list = 5;
}


message PushTipsData {
  uint32 push_tips_id = 4;
  uint32 state = 7;
}


message PushTipsReadFinishReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2244;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 push_tips_id = 11;
}


message PushTipsReadFinishRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2207;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 push_tips_id = 13;
  int32 retcode = 12;
}


message QueryCodexMonsterBeKilledNumReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4204;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated uint32 codex_id_list = 3;
}


message QueryCodexMonsterBeKilledNumRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4202;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint32 be_killed_num_list = 11;
  repeated uint32 be_captured_num_list = 5;
  int32 retcode = 2;
  repeated uint32 codex_id_list = 10;
}

import "ForceUpdateInfo.proto";
import "RegionInfo.proto";
import "StopServerInfo.proto";

message QueryCurrRegionHttpRsp {
  int32 retcode = 1;
  string msg = 2;
  RegionInfo region_info = 3;
  bytes client_secret_key = 11;
  bytes region_custom_config_encrypted = 12;
  bytes client_region_custom_config_encrypted = 13;
  oneof detail {
    ForceUpdateInfo force_update = 4;
    StopServerInfo stop_server = 5;
  }
}


message QueryFilter {
  int32 area_mask = 4;
  int32 type_id = 3;
}

import "QueryFilter.proto";
import "Vector.proto";
import "Vector3Int.proto";

message QueryPathReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2379;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  enum OptionType {
    OPTION_TYPE_NONE = 0;
    OPTION_TYPE_NORMAL = 1;
    OPTION_TYPE_FIRST_CAN_GO = 2;
  }

  QueryFilter filter = 7;
  int32 query_id = 3;
  repeated Vector destination_pos = 6;
  OptionType query_type = 11;
  Vector3Int Unk3300_LHNGPJFOMIK = 4;
  uint32 scene_id = 2;
  Vector source_pos = 8;
  Vector3Int Unk3300_CLGJBBJDOLN = 5;
}

import "Vector.proto";

message QueryPathRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2330;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  enum PathStatusType {
    PATH_STATUS_TYPE_FAIL = 0;
    PATH_STATUS_TYPE_SUCC = 1;
    PATH_STATUS_TYPE_PARTIAL = 2;
  }

  PathStatusType query_status = 3;
  int32 retcode = 10;
  int32 query_id = 8;
  repeated Vector corners = 1;
}

import "RegionSimpleInfo.proto";

message QueryRegionListHttpRsp {
  int32 retcode = 1;
  repeated RegionSimpleInfo region_list = 2;
  bytes client_secret_key = 5;
  bytes client_custom_config_encrypted = 6;
  bool enable_login_pc = 7;
}


message Quest {
  uint32 quest_id = 1;
  uint32 state = 2;
  uint32 start_time = 4;
  bool is_random = 5;
  uint32 parent_quest_id = 6;
  uint32 quest_config_id = 7;
  uint32 start_game_time = 8;
  uint32 accept_time = 9;
  repeated uint32 lacked_npc_list = 10;
  repeated uint32 finish_progress_list = 11;
  repeated uint32 fail_progress_list = 12;
  map<uint32, uint32> lacked_npc_map = 13;
  repeated uint32 lacked_place_list = 14;
  map<uint32, uint32> lacked_place_map = 15;
}

import "CreateEntityInfo.proto";

message QuestCreateEntityReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 457;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 parent_quest_id = 14;
  CreateEntityInfo entity = 3;
  uint32 quest_id = 5;
  bool is_rewind = 11;
}

import "CreateEntityInfo.proto";

message QuestCreateEntityRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 427;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  CreateEntityInfo entity = 11;
  uint32 entity_id = 3;
  bool is_rewind = 9;
  uint32 parent_quest_id = 2;
  int32 retcode = 7;
  uint32 quest_id = 1;
}


message QuestDelNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 456;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 quest_id = 8;
}


message QuestDestroyEntityReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 439;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 entity_id = 8;
  uint32 quest_id = 5;
  uint32 scene_id = 6;
}


message QuestDestroyEntityRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 448;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 3;
  uint32 scene_id = 6;
  uint32 entity_id = 8;
  uint32 quest_id = 9;
}


message QuestDestroyNpcReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 437;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 npc_id = 15;
  uint32 parent_quest_id = 2;
}


message QuestDestroyNpcRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 489;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 npc_id = 14;
  uint32 parent_quest_id = 8;
  int32 retcode = 13;
}


message QuestGlobalVar {
  int32 value = 4;
  uint32 key = 9;
}

import "QuestGlobalVar.proto";

message QuestGlobalVarNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 480;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated QuestGlobalVar var_list = 8;
}

import "Quest.proto";

message QuestListNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 479;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated Quest quest_list = 13;
}

import "Quest.proto";

message QuestListUpdateNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 430;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated Quest quest_list = 7;
}


message QuestProgressUpdateNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 490;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 quest_id = 9;
  repeated uint32 finish_progress_list = 12;
  repeated uint32 fail_progress_list = 15;
}


message QuestRenameAvatarReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 487;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  string avatar_name = 11;
  uint32 rename_id = 12;
  bool is_check = 4;
}


message QuestRenameAvatarRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 485;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 11;
  bool is_check = 4;
  uint32 rename_id = 15;
  string avatar_name = 8;
}


message QuestTransmitReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 446;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 quest_id = 12;
  uint32 point_id = 1;
}


message QuestTransmitRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 475;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 quest_id = 2;
  int32 retcode = 14;
  uint32 point_id = 6;
}


message QuestUpdateQuestTimeVarNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 482;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  map<uint32, uint32> time_var_map = 1;
  uint32 parent_quest_id = 14;
}


message QuestUpdateQuestVarNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 473;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 parent_quest_var_seq = 9;
  repeated int32 quest_var = 3;
  uint32 parent_quest_id = 7;
}

import "QuestVarOp.proto";

message QuestUpdateQuestVarReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 476;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 parent_quest_var_seq = 7;
  repeated QuestVarOp quest_var_op_list = 11;
  uint32 quest_id = 5;
  uint32 parent_quest_id = 2;
}


message QuestUpdateQuestVarRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 416;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 7;
  uint32 parent_quest_var_seq = 1;
  uint32 parent_quest_id = 8;
  uint32 quest_id = 11;
}


message QuestVarOp {
  uint32 index = 9;
  bool is_add = 3;
  int32 value = 8;
}


message QuickOpenActivityReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8302;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 activity_id = 8;
}


message QuickOpenActivityRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8677;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 12;
  uint32 activity_id = 9;
}

import "WidgetCameraInfo.proto";
import "WidgetCreateLocationInfo.proto";
import "WidgetCreatorInfo.proto";
import "WidgetThunderBirdFeatherInfo.proto";

message QuickUseWidgetReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4284;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
  oneof param {
    WidgetCreateLocationInfo location_info = 1872;
    WidgetCameraInfo camera_info = 1835;
    WidgetCreatorInfo creator_info = 72;
    WidgetThunderBirdFeatherInfo thunder_bird_feather_info = 491;
  }
}

import "ClientCollectorData.proto";
import "OneoffGatherPointDetectorData.proto";
import "SkyCrystalDetectorQuickUseResult.proto";

message QuickUseWidgetRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4265;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 material_id = 11;
  int32 retcode = 12;
  oneof param {
    OneoffGatherPointDetectorData detector_data = 14;
    ClientCollectorData client_collector_data = 10;
    SkyCrystalDetectorQuickUseResult sky_crystal_detector_quick_use_result = 172322;
  }
}

import "GalleryStopReason.proto";

message RacingGallerySettleInfo {
  uint32 winner_uid = 10;
  uint32 use_time = 15;
  GalleryStopReason reason = 11;
}


message ReadMailNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1456;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated uint32 mail_id_list = 7;
}


message ReadNicknameAuditReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 132;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}


message ReadNicknameAuditRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 168;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 15;
}


message ReadPrivateChatReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5007;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 target_uid = 15;
}


message ReadPrivateChatRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4977;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 14;
}


message ReadSignatureAuditReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4002;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}


message ReadSignatureAuditRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4012;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 1;
}


message ReceivedTrialAvatarActivityRewardReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2155;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 trial_avatar_index_id = 9;
}


message ReceivedTrialAvatarActivityRewardRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2175;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 activity_id = 6;
  int32 retcode = 8;
  uint32 trial_avatar_index_id = 10;
}

import "PlayProduct.proto";
import "ShopCardProduct.proto";
import "ShopConcertProduct.proto";
import "ShopMcoinProduct.proto";

message RechargeReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4142;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  ShopMcoinProduct mcoin_product = 10;
  ShopCardProduct card_product = 4;
  PlayProduct play_product = 3;
  ShopConcertProduct concert_product = 11;
}


message RechargeRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4141;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  string product_id = 10;
  bool is_show_minors_hint = 1;
  int32 retcode = 9;
}


enum RecordUsage {
  RECORD_USAGE_UGC_RECORD_USAGE_NONE = 0;
  RECORD_USAGE_UGC_RECORD_USAGE_IMPORT = 1;
  RECORD_USAGE_UGC_RECORD_USAGE_PLAY = 2;
  RECORD_USAGE_UGC_RECORD_USAGE_TRIAL = 3;
  RECORD_USAGE_UGC_RECORD_USAGE_COMPARE = 4;
}


message RedeemLegendaryKeyReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 464;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}


message RedeemLegendaryKeyRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 467;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 6;
  uint32 legendary_key_count = 2;
}


message RedPointData {
  uint32 red_point_type = 1;
  bool is_show = 2;
  uint32 content_id = 3;
}

import "FireworksReformData.proto";

message ReformFireworksReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 6074;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  FireworksReformData fireworks_reform_data = 1;
}


message ReformFireworksRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 6062;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 15;
}


message RefreshBackgroundAvatarReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1765;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}


message RefreshBackgroundAvatarRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1744;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  map<uint64, uint32> hp_full_time_map = 4;
  int32 retcode = 11;
}


message RefreshEntityAuthNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3099;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated uint32 entity_id_list = 4;
}


message RefreshRogueDiaryCardReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8868;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated uint32 refresh_card_list = 9;
}


message RefreshRogueDiaryCardRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8359;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 6;
  repeated uint32 rand_card_list = 14;
}


message RefreshRoguelikeDungeonCardReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8065;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}


message RefreshRoguelikeDungeonCardRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8994;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 14;
  repeated uint32 res_card_list = 2;
}

import "RegionalPlayVar.proto";

message RegionalPlayInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 6292;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 play_type = 3;
  repeated RegionalPlayVar var_list = 13;
  string play_name = 5;
  bool Unk3300_FMEPEBIHNOL = 1;
  bool Unk3300_MBGOJOBNPNG = 14;
}


message RegionalPlayVar {
  uint32 type = 5;
  float Unk3300_FOBMHHNIPPH = 4;
  float Unk3300_PIDHFABKIJN = 3;
  float value = 2;
}

import "ResVersionConfig.proto";

message RegionInfo {
  string gateserver_ip = 1;
  uint32 gateserver_port = 2;
  string pay_callback_url = 3;
  string area_type = 7;
  string resource_url = 8;
  string data_url = 9;
  string feedback_url = 10;
  string bulletin_url = 11;
  string resource_url_bak = 12;
  string data_url_bak = 13;
  uint32 client_data_version = 14;
  string handbook_url = 16;
  uint32 client_silence_data_version = 18;
  string client_data_md5 = 19;
  string client_silence_data_md5 = 20;
  ResVersionConfig res_version_config = 22;
  bytes secret_key = 23;
  string official_community_url = 24;
  string client_version_suffix = 26;
  string client_silence_version_suffix = 27;
  bool use_gateserver_domain_name = 28;
  string gateserver_domain_name = 29;
  string user_center_url = 30;
  string account_bind_url = 31;
  string cdkey_url = 32;
  string privacy_policy_url = 33;
  string next_resource_url = 34;
  ResVersionConfig next_res_version_config = 35;
  string game_biz = 36;
}

import "RegionSearchState.proto";

message RegionSearch {
  RegionSearchState state = 2;
  bool is_entered = 6;
  uint32 progress = 5;
  uint32 region_search_id = 1;
}


message RegionSearchChangeRegionNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5641;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  enum RegionEvent {
    REGION_EVENT_NONE = 0;
    REGION_EVENT_ENTER = 1;
    REGION_EVENT_LEAVE = 2;
  }

  uint32 region_id = 6;
  RegionEvent event = 11;
}

import "RegionSearch.proto";

message RegionSearchInfo {
  bool is_entered = 2;
  repeated RegionSearch region_search_list = 7;
  uint32 id = 9;
}

import "RegionSearchInfo.proto";

message RegionSearchNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5642;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated RegionSearchInfo region_search_list = 3;
  uint32 uid = 14;
}


enum RegionSearchState {
  REGION_SEARCH_STATE_NONE = 0;
  REGION_SEARCH_STATE_UNSTARTED = 1;
  REGION_SEARCH_STATE_STARTED = 2;
  REGION_SEARCH_STATE_WAIT_REWARD = 3;
  REGION_SEARCH_STATE_FINISHED = 4;
}


message RegionSimpleInfo {
  string name = 1;
  string title = 2;
  string type = 3;
  string dispatch_url = 4;
}


enum RegionType {
  REGION_TYPE_PRODUCT = 0;
  REGION_TYPE_EXAM = 1;
  REGION_TYPE_DEV_PUB = 2;
  REGION_TYPE_DEV_PRI = 3;
}


message Reliquary {
  uint32 level = 1;
  uint32 exp = 2;
  uint32 promote_level = 3;
  uint32 main_prop_id = 4;
  repeated uint32 append_prop_id_list = 5;
}


message ReliquaryDecomposeReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 631;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 config_id = 4;
  uint32 target_count = 15;
  repeated uint64 guid_list = 13;
}


message ReliquaryDecomposeRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 601;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated uint64 guid_list = 6;
  int32 retcode = 11;
}


enum ReliquaryFilterKey {
  RELIQUARY_FILTER_KEY_NONE = 0;
  RELIQUARY_FILTER_KEY_LOCK = 1;
  RELIQUARY_FILTER_KEY_LEVEL = 2;
  RELIQUARY_FILTER_KEY_WEARING = 3;
}


enum ReliquaryFilterLevelState {
  RELIQUARY_FILTER_LEVEL_STATE_NONE = 0;
  RELIQUARY_FILTER_LEVEL_STATE_FULL_LEVEL = 1;
  RELIQUARY_FILTER_LEVEL_STATE_NOT_FULL_LEVEL = 2;
}


enum ReliquaryFilterLockState {
  RELIQUARY_FILTER_LOCK_STATE_NONE = 0;
  RELIQUARY_FILTER_LOCK_STATE_LOCK = 1;
  RELIQUARY_FILTER_LOCK_STATE_UNLOCK = 2;
}


message ReliquaryFilterStateNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 669;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  map<uint32, uint32> reliquary_filter_state_map = 10;
}


message ReliquaryFilterStateSaveNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 638;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  map<uint32, uint32> reliquary_filter_state_map = 4;
}


enum ReliquaryFilterWearedState {
  RELIQUARY_FILTER_WEARED_STATE_NONE = 0;
  RELIQUARY_FILTER_WEARED_STATE_HAS_BEEN_WEARED = 1;
  RELIQUARY_FILTER_WEARED_STATE_HAS_NOT_BEEN_WEARED = 2;
}


message ReliquaryPromoteReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 617;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint64 target_guid = 3;
  uint64 item_guid = 2;
}


message ReliquaryPromoteRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 605;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint32 old_append_prop_list = 8;
  uint32 old_promote_level = 9;
  repeated uint32 cur_append_prop_list = 13;
  int32 retcode = 10;
  uint64 target_reliquary_guid = 6;
  uint32 cur_promote_level = 4;
}

import "ItemParam.proto";

message ReliquaryUpgradeReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 644;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated uint64 food_reliquary_guid_list = 3;
  repeated ItemParam item_param_list = 15;
  uint64 target_reliquary_guid = 8;
}


message ReliquaryUpgradeRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 607;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint32 cur_append_prop_list = 13;
  int32 retcode = 11;
  uint64 target_reliquary_guid = 14;
  uint32 cur_level = 2;
  uint32 old_level = 6;
  repeated uint32 old_append_prop_list = 10;
  uint32 power_up_rate = 1;
}

import "PlayerWidgetInfo.proto";

message RemotePlayerWidgetNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5910;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated PlayerWidgetInfo player_widget_info_list = 10;
}


message RemoveBlacklistReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4003;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 target_uid = 4;
}


message RemoveBlacklistRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4033;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 target_uid = 6;
  int32 retcode = 8;
}


message RemoveCustomDungeonReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 6234;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint64 dungeon_guid = 7;
}


message RemoveCustomDungeonRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 6215;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint64 dungeon_guid = 3;
  int32 retcode = 10;
}


message RemoveRandTaskInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 198;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  enum FinishReason {
    FINISH_REASON_DEFAULT = 0;
    FINISH_REASON_CLEAR = 1;
    FINISH_REASON_DISTANCE = 2;
    FINISH_REASON_FINISH = 3;
  }

  uint32 rand_task_id = 10;
  FinishReason reason = 13;
  bool is_succ = 5;
}


message ReplayCustomDungeonReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 6214;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}


message ReplayCustomDungeonRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 6248;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  int32 retcode = 5;
}


message ReportFightAntiCheatNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 388;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 Unk3300_MIFNAAADBBP = 8;
  uint32 Unk3300_ABCKMPPMNCH = 10;
}


enum ReportReasonType {
  REPORT_REASON_TYPE_NONE = 0;
  REPORT_REASON_TYPE_DECEPTIVE_ADS = 1;
  REPORT_REASON_TYPE_ABUSING = 2;
  REPORT_REASON_TYPE_CHEAT = 3;
  REPORT_REASON_TYPE_POLITICAL = 4;
  REPORT_REASON_TYPE_OTHER = 5;
  REPORT_REASON_TYPE_HOME = 6;
}


message ReportTrackingIOInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4144;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  string client_tz = 13;
  string Unk3300_DJHKHEFPCDK = 10;
  string Unk3300_PIBFPDAMJLE = 6;
  string Unk3300_CNPIGDOEJPB = 8;
  string rydevicetype = 3;
}


message RequestLiveInfoReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 805;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 live_id = 13;
}


message RequestLiveInfoRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 894;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 13;
  string Unk3300_BDOGCPKPLOK = 11;
  string Unk3300_DNGGIOIKLHC = 6;
  uint32 live_id = 10;
}

import "RogueDiaryAvatar.proto";

message ReserveRogueDiaryAvatarReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8311;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated RogueDiaryAvatar reserve_avatar_list = 3;
}


message ReserveRogueDiaryAvatarRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8901;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 2;
}


message ResetRogueDiaryPlayReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8125;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 stage_id = 9;
}


message ResetRogueDiaryPlayRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8943;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 5;
}


message ResinCardData {
  uint32 last_daily_reward_time = 10;
  uint32 config_id = 2;
  uint32 expire_time = 13;
  uint32 remain_reward_days = 11;
}

import "ResinCardData.proto";

message ResinCardDataUpdateNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4134;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 today_start_time = 4;
  repeated ResinCardData card_data_list = 14;
}


message ResinChangeNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 611;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 cur_buy_count = 11;
  uint32 next_add_timestamp = 13;
  uint32 cur_value = 10;
}


enum ResinCostType {
  RESIN_COST_TYPE_NONE = 0;
  RESIN_COST_TYPE_NORMAL = 1;
  RESIN_COST_TYPE_CONDENSE = 2;
  RESIN_COST_TYPE_REUNION_PRIVILEGE = 3;
  RESIN_COST_TYPE_OP_ACTIVITY = 4;
  RESIN_COST_TYPE_MATERIAL = 5;
}


message RestartCoinCollectPlaySingleModeReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 21382;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 level_id = 2;
  uint32 multistage_play_index = 3;
}


message RestartCoinCollectPlaySingleModeRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 23294;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 level_id = 10;
  int32 retcode = 6;
}


message RestartEffigyChallengeReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2051;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}


message RestartEffigyChallengeRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2172;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 5;
}


message ResumeRogueDiaryDungeonReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8704;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 stage_id = 15;
}


message ResumeRogueDiaryDungeonRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8332;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 2;
}


message ResVersionConfig {
  uint32 version = 1;
  bool relogin = 2;
  string md5 = 3;
  string release_total_size = 4;
  string version_suffix = 5;
  string branch = 6;
  string next_script_version = 7;
}


enum Retcode {
  RET_SUCC = 0;
  RET_FAIL = -1;
  RET_SVR_ERROR = 1;
  RET_UNKNOWN_ERROR = 2;
  RET_FREQUENT = 3;
  RET_NODE_FORWARD_ERROR = 4;
  RET_NOT_FOUND_CONFIG = 5;
  RET_SYSTEM_BUSY = 6;
  RET_GM_UID_BIND = 7;
  RET_FORBIDDEN = 8;
  RET_STOP_REGISTER = 10;
  RET_STOP_SERVER = 11;
  RET_ACCOUNT_VEIRFY_ERROR = 12;
  RET_ACCOUNT_FREEZE = 13;
  RET_REPEAT_LOGIN = 14;
  RET_CLIENT_VERSION_ERROR = 15;
  RET_TOKEN_ERROR = 16;
  RET_ACCOUNT_NOT_EXIST = 17;
  RET_WAIT_OTHER_LOGIN = 18;
  RET_ANOTHER_LOGIN = 19;
  RET_CLIENT_FORCE_UPDATE = 20;
  RET_BLACK_UID = 21;
  RET_LOGIN_DB_FAIL = 22;
  RET_LOGIN_INIT_FAIL = 23;
  RET_MYSQL_DUPLICATE = 24;
  RET_MAX_PLAYER = 25;
  RET_ANTI_ADDICT = 26;
  RET_PS_PLAYER_WITHOUT_ONLINE_ID = 27;
  RET_ONLINE_ID_NOT_FOUND = 28;
  RET_ONLNE_ID_NOT_MATCH = 29;
  RET_REGISTER_IS_FULL = 30;
  RET_CHECKSUM_INVALID = 31;
  RET_BLACK_REGISTER_IP = 32;
  RET_EXCEED_REGISTER_RATE = 33;
  RET_UNKNOWN_PLATFORM = 34;
  RET_TOKEN_PARAM_ERROR = 35;
  RET_ANTI_OFFLINE_ERROR = 36;
  RET_BLACK_LOGIN_IP = 37;
  RET_GET_TOKEN_SESSION_HAS_UID = 38;
  RET_ENVIRONMENT_ERROR = 39;
  RET_CHECK_CLIENT_VERSION_HASH_FAIL = 40;
  RET_MINOR_REGISTER_FOBIDDEN = 41;
  RET_SECURITY_LIBRARY_ERROR = 42;
  RET_AVATAR_IN_CD = 101;
  RET_AVATAR_NOT_ALIVE = 102;
  RET_AVATAR_NOT_ON_SCENE = 103;
  RET_CAN_NOT_FIND_AVATAR = 104;
  RET_CAN_NOT_DEL_CUR_AVATAR = 105;
  RET_DUPLICATE_AVATAR = 106;
  RET_AVATAR_IS_SAME_ONE = 107;
  RET_AVATAR_LEVEL_LESS_THAN = 108;
  RET_AVATAR_CAN_NOT_CHANGE_ELEMENT = 109;
  RET_AVATAR_BREAK_LEVEL_LESS_THAN = 110;
  RET_AVATAR_ON_MAX_BREAK_LEVEL = 111;
  RET_AVATAR_ID_ALREADY_EXIST = 112;
  RET_AVATAR_NOT_DEAD = 113;
  RET_AVATAR_IS_REVIVING = 114;
  RET_AVATAR_ID_ERROR = 115;
  RET_REPEAT_SET_PLAYER_BORN_DATA = 116;
  RET_PLAYER_LEVEL_LESS_THAN = 117;
  RET_AVATAR_LIMIT_LEVEL_ERROR = 118;
  RET_CUR_AVATAR_NOT_ALIVE = 119;
  RET_CAN_NOT_FIND_TEAM = 120;
  RET_CAN_NOT_FIND_CUR_TEAM = 121;
  RET_AVATAR_NOT_EXIST_IN_TEAM = 122;
  RET_CAN_NOT_REMOVE_CUR_AVATAR_FROM_TEAM = 123;
  RET_CAN_NOT_USE_REVIVE_ITEM_FOR_CUR_AVATAR = 124;
  RET_TEAM_COST_EXCEED_LIMIT = 125;
  RET_TEAM_AVATAR_IN_EXPEDITION = 126;
  RET_TEAM_CAN_NOT_CHOSE_REPLACE_USE = 127;
  RET_AVATAR_IN_COMBAT = 128;
  RET_NICKNAME_UTF8_ERROR = 130;
  RET_NICKNAME_TOO_LONG = 131;
  RET_NICKNAME_WORD_ILLEGAL = 132;
  RET_NICKNAME_TOO_MANY_DIGITS = 133;
  RET_NICKNAME_IS_EMPTY = 134;
  RET_NICKNAME_MONTHLY_LIMIT = 135;
  RET_NICKNAME_NOT_CHANGED = 136;
  RET_PLAYER_NOT_ONLINE = 140;
  RET_OPEN_STATE_NOT_OPEN = 141;
  RET_FEATURE_CLOSED = 142;
  RET_AVATAR_EXPEDITION_AVATAR_DIE = 152;
  RET_AVATAR_EXPEDITION_COUNT_LIMIT = 153;
  RET_AVATAR_EXPEDITION_MAIN_FORBID = 154;
  RET_AVATAR_EXPEDITION_TRIAL_FORBID = 155;
  RET_TEAM_NAME_ILLEGAL = 156;
  RET_IS_NOT_IN_STANDBY = 157;
  RET_IS_IN_DUNGEON = 158;
  RET_IS_IN_LOCK_AVATAR_QUEST = 159;
  RET_IS_USING_TRIAL_AVATAR = 160;
  RET_IS_USING_TEMP_AVATAR = 161;
  RET_NOT_HAS_FLYCLOAK = 162;
  RET_FETTER_REWARD_ALREADY_GOT = 163;
  RET_FETTER_REWARD_LEVEL_NOT_ENOUGH = 164;
  RET_WORLD_LEVEL_ADJUST_MIN_LEVEL = 165;
  RET_WORLD_LEVEL_ADJUST_CD = 166;
  RET_NOT_HAS_COSTUME = 167;
  RET_COSTUME_AVATAR_ERROR = 168;
  RET_FLYCLOAK_PLATFORM_TYPE_ERR = 169;
  RET_IN_TRANSFER = 170;
  RET_IS_IN_LOCK_AVATAR = 171;
  RET_FULL_BACKUP_TEAM = 172;
  RET_BACKUP_TEAM_ID_NOT_VALID = 173;
  RET_BACKUP_TEAM_IS_CUR_TEAM = 174;
  RET_AVATAR_RENAME_IN_CD = 175;
  RET_AVATAR_RENAME_IN_AUDIT = 176;
  RET_AVATAR_RENAME_IN_IP_BLACK_LIST = 177;
  RET_FLOAT_ERROR = 201;
  RET_NPC_NOT_EXIST = 301;
  RET_NPC_TOO_FAR = 302;
  RET_NOT_CURRENT_TALK = 303;
  RET_NPC_CREATE_FAIL = 304;
  RET_NPC_MOVE_FAIL = 305;
  RET_QUEST_NOT_EXIST = 401;
  RET_QUEST_IS_FAIL = 402;
  RET_QUEST_CONTENT_ERROR = 403;
  RET_BARGAIN_NOT_ACTIVATED = 404;
  RET_BARGAIN_FINISHED = 405;
  RET_INFERENCE_ASSOCIATE_WORD_ERROR = 406;
  RET_INFERENCE_SUBMIT_WORD_NO_CONCLUSION = 407;
  RET_POINT_NOT_UNLOCKED = 501;
  RET_POINT_TOO_FAR = 502;
  RET_POINT_ALREAY_UNLOCKED = 503;
  RET_ENTITY_NOT_EXIST = 504;
  RET_ENTER_SCENE_FAIL = 505;
  RET_PLAYER_IS_ENTER_SCENE = 506;
  RET_CITY_MAX_LEVEL = 507;
  RET_AREA_LOCKED = 508;
  RET_JOIN_OTHER_WAIT = 509;
  RET_WEATHER_AREA_NOT_FOUND = 510;
  RET_WEATHER_IS_LOCKED = 511;
  RET_NOT_IN_SELF_SCENE = 512;
  RET_GROUP_NOT_EXIST = 513;
  RET_MARK_NAME_ILLEGAL = 514;
  RET_MARK_ALREADY_EXISTS = 515;
  RET_MARK_OVERFLOW = 516;
  RET_MARK_NOT_EXISTS = 517;
  RET_MARK_UNKNOWN_TYPE = 518;
  RET_MARK_NAME_TOO_LONG = 519;
  RET_DISTANCE_LONG = 520;
  RET_ENTER_SCENE_TOKEN_INVALID = 521;
  RET_NOT_IN_WORLD_SCENE = 522;
  RET_ANY_GALLERY_STARTED = 523;
  RET_GALLERY_NOT_START = 524;
  RET_GALLERY_INTERRUPT_ONLY_ON_SINGLE_MODE = 525;
  RET_GALLERY_CANNOT_INTERRUPT = 526;
  RET_GALLERY_WORLD_NOT_MEET = 527;
  RET_GALLERY_SCENE_NOT_MEET = 528;
  RET_CUR_PLAY_CANNOT_TRANSFER = 529;
  RET_CANT_USE_WIDGET_IN_HOME_SCENE = 530;
  RET_SCENE_GROUP_NOT_MATCH = 531;
  RET_POS_ROT_INVALID = 551;
  RET_MARK_INVALID_SCENE_ID = 552;
  RET_INVALID_SCENE_TO_USE_ANCHOR_POINT = 553;
  RET_ENTER_HOME_SCENE_FAIL = 554;
  RET_CUR_SCENE_IS_NULL = 555;
  RET_GROUP_ID_ERROR = 556;
  RET_GALLERY_INTERRUPT_NOT_OWNER = 557;
  RET_NO_SPRING_IN_AREA = 558;
  RET_AREA_NOT_IN_SCENE = 559;
  RET_INVALID_CITY_ID = 560;
  RET_INVALID_SCENE_ID = 561;
  RET_DEST_SCENE_IS_NOT_ALLOW = 562;
  RET_LEVEL_TAG_SWITCH_IN_CD = 563;
  RET_LEVEL_TAG_ALREADY_EXIST = 564;
  RET_INVALID_AREA_ID = 565;
  RET_ITEM_NOT_EXIST = 601;
  RET_PACK_EXCEED_MAX_WEIGHT = 602;
  RET_ITEM_NOT_DROPABLE = 603;
  RET_ITEM_NOT_USABLE = 604;
  RET_ITEM_INVALID_USE_COUNT = 605;
  RET_ITEM_INVALID_DROP_COUNT = 606;
  RET_ITEM_ALREADY_EXIST = 607;
  RET_ITEM_IN_COOLDOWN = 608;
  RET_ITEM_COUNT_NOT_ENOUGH = 609;
  RET_ITEM_INVALID_TARGET = 610;
  RET_RECIPE_NOT_EXIST = 611;
  RET_RECIPE_LOCKED = 612;
  RET_RECIPE_UNLOCKED = 613;
  RET_COMPOUND_QUEUE_FULL = 614;
  RET_COMPOUND_NOT_FINISH = 615;
  RET_MAIL_ITEM_NOT_GET = 616;
  RET_ITEM_EXCEED_LIMIT = 617;
  RET_AVATAR_CAN_NOT_USE = 618;
  RET_ITEM_NEED_PLAYER_LEVEL = 619;
  RET_RECIPE_NOT_AUTO_QTE = 620;
  RET_COMPOUND_BUSY_QUEUE = 621;
  RET_NEED_MORE_SCOIN = 622;
  RET_SKILL_DEPOT_NOT_FOUND = 623;
  RET_HCOIN_NOT_ENOUGH = 624;
  RET_SCOIN_NOT_ENOUGH = 625;
  RET_HCOIN_EXCEED_LIMIT = 626;
  RET_SCOIN_EXCEED_LIMIT = 627;
  RET_MAIL_EXPIRED = 628;
  RET_REWARD_HAS_TAKEN = 629;
  RET_COMBINE_COUNT_TOO_LARGE = 630;
  RET_GIVING_ITEM_WRONG = 631;
  RET_GIVING_IS_FINISHED = 632;
  RET_GIVING_NOT_ACTIVED = 633;
  RET_FORGE_QUEUE_FULL = 634;
  RET_FORGE_QUEUE_CAPACITY = 635;
  RET_FORGE_QUEUE_NOT_FOUND = 636;
  RET_FORGE_QUEUE_EMPTY = 637;
  RET_NOT_SUPPORT_ITEM = 638;
  RET_ITEM_EMPTY = 639;
  RET_VIRTUAL_EXCEED_LIMIT = 640;
  RET_MATERIAL_EXCEED_LIMIT = 641;
  RET_EQUIP_EXCEED_LIMIT = 642;
  RET_ITEM_SHOULD_HAVE_NO_LEVEL = 643;
  RET_WEAPON_PROMOTE_LEVEL_EXCEED_LIMIT = 644;
  RET_WEAPON_LEVEL_INVALID = 645;
  RET_UNKNOW_ITEM_TYPE = 646;
  RET_ITEM_COUNT_IS_ZERO = 647;
  RET_ITEM_IS_EXPIRED = 648;
  RET_ITEM_EXCEED_OUTPUT_LIMIT = 649;
  RET_EQUIP_LEVEL_HIGHER = 650;
  RET_EQUIP_CAN_NOT_WAKE_OFF_WEAPON = 651;
  RET_EQUIP_HAS_BEEN_WEARED = 652;
  RET_EQUIP_WEARED_CANNOT_DROP = 653;
  RET_AWAKEN_LEVEL_MAX = 654;
  RET_MCOIN_NOT_ENOUGH = 655;
  RET_MCOIN_EXCEED_LIMIT = 656;
  RET_RESIN_NOT_ENOUGH = 660;
  RET_RESIN_EXCEED_LIMIT = 661;
  RET_RESIN_OPENSTATE_OFF = 662;
  RET_RESIN_BOUGHT_COUNT_EXCEEDED = 663;
  RET_RESIN_CARD_DAILY_REWARD_HAS_TAKEN = 664;
  RET_RESIN_CARD_EXPIRED = 665;
  RET_AVATAR_CAN_NOT_COOK = 666;
  RET_ATTACH_AVATAR_CD = 667;
  RET_AUTO_RECOVER_OPENSTATE_OFF = 668;
  RET_AUTO_RECOVER_BOUGHT_COUNT_EXCEEDED = 669;
  RET_RESIN_GAIN_FAILED = 670;
  RET_WIDGET_ORNAMENTS_TYPE_ERROR = 671;
  RET_ALL_TARGET_SATIATION_FULL = 672;
  RET_FORGE_WORLD_LEVEL_NOT_MATCH = 673;
  RET_FORGE_POINT_NOT_ENOUGH = 674;
  RET_WIDGET_ANCHOR_POINT_FULL = 675;
  RET_WIDGET_ANCHOR_POINT_NOT_FOUND = 676;
  RET_ALL_BONFIRE_EXCEED_MAX_COUNT = 677;
  RET_BONFIRE_EXCEED_MAX_COUNT = 678;
  RET_LUNCH_BOX_DATA_ERROR = 679;
  RET_INVALID_QUICK_USE_WIDGET = 680;
  RET_INVALID_REPLACE_RESIN_COUNT = 681;
  RET_PREV_DETECTED_GATHER_NOT_FOUND = 682;
  RET_GOT_ALL_ONEOFF_GAHTER = 683;
  RET_INVALID_WIDGET_MATERIAL_ID = 684;
  RET_WIDGET_DETECTOR_NO_HINT_TO_CLEAR = 685;
  RET_WIDGET_ALREADY_WITHIN_NEARBY_RADIUS = 686;
  RET_WIDGET_CLIENT_COLLECTOR_NEED_POINTS = 687;
  RET_WIDGET_IN_COMBAT = 688;
  RET_WIDGET_NOT_SET_QUICK_USE = 689;
  RET_ALREADY_ATTACH_WIDGET = 690;
  RET_EQUIP_IS_LOCKED = 691;
  RET_FORGE_IS_LOCKED = 692;
  RET_COMBINE_IS_LOCKED = 693;
  RET_FORGE_OUTPUT_STACK_LIMIT = 694;
  RET_ALREADY_DETTACH_WIDGET = 695;
  RET_GADGET_BUILDER_EXCEED_MAX_COUNT = 696;
  RET_REUNION_PRIVILEGE_RESIN_TYPE_IS_NORMAL = 697;
  RET_BONUS_COUNT_EXCEED_DOUBLE_LIMIT = 698;
  RET_RELIQUARY_DECOMPOSE_PARAM_ERROR = 699;
  RET_ITEM_COMBINE_COUNT_NOT_ENOUGH = 700;
  RET_GOODS_NOT_EXIST = 701;
  RET_GOODS_MATERIAL_NOT_ENOUGH = 702;
  RET_GOODS_NOT_IN_TIME = 703;
  RET_GOODS_BUY_NUM_NOT_ENOUGH = 704;
  RET_GOODS_BUY_NUM_ERROR = 705;
  RET_SHOP_NOT_OPEN = 706;
  RET_SHOP_CONTENT_NOT_MATCH = 707;
  RET_SHOP_BATCH_BUY_SHOP_LIMIT = 708;
  RET_SHOP_BATCH_BUY_COUNT_LIMIT = 709;
  RET_CHAT_FORBIDDEN = 798;
  RET_CHAT_CD = 799;
  RET_CHAT_FREQUENTLY = 800;
  RET_GADGET_NOT_EXIST = 801;
  RET_GADGET_NOT_INTERACTIVE = 802;
  RET_GADGET_NOT_GATHERABLE = 803;
  RET_CHEST_IS_LOCKED = 804;
  RET_GADGET_CREATE_FAIL = 805;
  RET_WORKTOP_OPTION_NOT_EXIST = 806;
  RET_GADGET_STATUE_NOT_ACTIVE = 807;
  RET_GADGET_STATUE_OPENED = 808;
  RET_BOSS_CHEST_NO_QUALIFICATION = 809;
  RET_BOSS_CHEST_LIFE_TIME_OVER = 810;
  RET_BOSS_CHEST_WEEK_NUM_LIMIT = 811;
  RET_BOSS_CHEST_GUEST_WORLD_LEVEL = 812;
  RET_BOSS_CHEST_HAS_TAKEN = 813;
  RET_BLOSSOM_CHEST_NO_QUALIFICATION = 814;
  RET_BLOSSOM_CHEST_LIFE_TIME_OVER = 815;
  RET_BLOSSOM_CHEST_HAS_TAKEN = 816;
  RET_BLOSSOM_CHEST_GUEST_WORLD_LEVEL = 817;
  RET_MP_PLAY_REWARD_NO_QUALIFICATION = 818;
  RET_MP_PLAY_REWARD_HAS_TAKEN = 819;
  RET_GENERAL_REWARD_NO_QUALIFICATION = 820;
  RET_GENERAL_REWARD_LIFE_TIME_OVER = 821;
  RET_GENERAL_REWARD_HAS_TAKEN = 822;
  RET_GADGET_NOT_VEHICLE = 823;
  RET_VEHICLE_SLOT_OCCUPIED = 824;
  RET_NOT_IN_VEHICLE = 825;
  RET_CREATE_VEHICLE_IN_CD = 826;
  RET_CREATE_VEHICLE_POS_INVALID = 827;
  RET_VEHICLE_POINT_NOT_UNLOCK = 828;
  RET_GADGET_INTERACT_COND_NOT_MEET = 829;
  RET_GADGET_INTERACT_PARAM_ERROR = 830;
  RET_GADGET_CUSTOM_COMBINATION_INVALID = 831;
  RET_DESHRET_OBELISK_DUPLICATE_INTERACT = 832;
  RET_DESHRET_OBELISK_NO_AVAIL_CHEST = 833;
  RET_ACTIVITY_CLOSE = 860;
  RET_ACTIVITY_ITEM_ERROR = 861;
  RET_ACTIVITY_CONTRIBUTION_NOT_ENOUGH = 862;
  RET_SEA_LAMP_PHASE_NOT_FINISH = 863;
  RET_SEA_LAMP_FLY_NUM_LIMIT = 864;
  RET_SEA_LAMP_FLY_LAMP_WORD_ILLEGAL = 865;
  RET_ACTIVITY_WATCHER_REWARD_TAKEN = 866;
  RET_ACTIVITY_WATCHER_REWARD_NOT_FINISHED = 867;
  RET_SALESMAN_ALREADY_DELIVERED = 868;
  RET_SALESMAN_REWARD_COUNT_NOT_ENOUGH = 869;
  RET_SALESMAN_POSITION_INVALID = 870;
  RET_DELIVER_NOT_FINISH_ALL_QUEST = 871;
  RET_DELIVER_ALREADY_TAKE_DAILY_REWARD = 872;
  RET_ASTER_PROGRESS_EXCEED_LIMIT = 873;
  RET_ASTER_CREDIT_EXCEED_LIMIT = 874;
  RET_ASTER_TOKEN_EXCEED_LIMIT = 875;
  RET_ASTER_CREDIT_NOT_ENOUGH = 876;
  RET_ASTER_TOKEN_NOT_ENOUGH = 877;
  RET_ASTER_SPECIAL_REWARD_HAS_TAKEN = 878;
  RET_FLIGHT_GROUP_ACTIVITY_NOT_STARTED = 879;
  RET_ASTER_MID_PREVIOUS_BATTLE_NOT_FINISHED = 880;
  RET_DRAGON_SPINE_SHIMMERING_ESSENCE_EXCEED_LIMIT = 881;
  RET_DRAGON_SPINE_WARM_ESSENCE_EXCEED_LIMIT = 882;
  RET_DRAGON_SPINE_WONDROUS_ESSENCE_EXCEED_LIMIT = 883;
  RET_DRAGON_SPINE_SHIMMERING_ESSENCE_NOT_ENOUGH = 884;
  RET_DRAGON_SPINE_WARM_ESSENCE_NOT_ENOUGH = 885;
  RET_DRAGON_SPINE_WONDROUS_ESSENCE_NOT_ENOUGH = 886;
  RET_EFFIGY_FIRST_PASS_REWARD_HAS_TAKEN = 891;
  RET_EFFIGY_REWARD_HAS_TAKEN = 892;
  RET_TREASURE_MAP_ADD_TOKEN_EXCEED_LIMIT = 893;
  RET_TREASURE_MAP_TOKEN_NOT_ENOUGHT = 894;
  RET_SEA_LAMP_COIN_EXCEED_LIMIT = 895;
  RET_SEA_LAMP_COIN_NOT_ENOUGH = 896;
  RET_SEA_LAMP_POPULARITY_EXCEED_LIMIT = 897;
  RET_ACTIVITY_AVATAR_REWARD_NOT_OPEN = 898;
  RET_ACTIVITY_AVATAR_REWARD_HAS_TAKEN = 899;
  RET_ARENA_ACTIVITY_ALREADY_STARTED = 900;
  RET_TALENT_ALREAY_UNLOCKED = 901;
  RET_PREV_TALENT_NOT_UNLOCKED = 902;
  RET_BIG_TALENT_POINT_NOT_ENOUGH = 903;
  RET_SMALL_TALENT_POINT_NOT_ENOUGH = 904;
  RET_PROUD_SKILL_ALREADY_GOT = 905;
  RET_PREV_PROUD_SKILL_NOT_GET = 906;
  RET_PROUD_SKILL_MAX_LEVEL = 907;
  RET_CANDIDATE_SKILL_DEPOT_ID_NOT_FIND = 910;
  RET_SKILL_DEPOT_IS_THE_SAME = 911;
  RET_MONSTER_NOT_EXIST = 1001;
  RET_MONSTER_CREATE_FAIL = 1002;
  RET_DUNGEON_ENTER_FAIL = 1101;
  RET_DUNGEON_QUIT_FAIL = 1102;
  RET_DUNGEON_ENTER_EXCEED_DAY_COUNT = 1103;
  RET_DUNGEON_REVIVE_EXCEED_MAX_COUNT = 1104;
  RET_DUNGEON_REVIVE_FAIL = 1105;
  RET_DUNGEON_NOT_SUCCEED = 1106;
  RET_DUNGEON_CAN_NOT_CANCEL = 1107;
  RET_DEST_DUNGEON_SETTLED = 1108;
  RET_DUNGEON_CANDIDATE_TEAM_IS_FULL = 1109;
  RET_DUNGEON_CANDIDATE_TEAM_IS_DISMISS = 1110;
  RET_DUNGEON_CANDIDATE_TEAM_NOT_ALL_READY = 1111;
  RET_DUNGEON_CANDIDATE_TEAM_HAS_REPEAT_AVATAR = 1112;
  RET_DUNGEON_CANDIDATE_NOT_SINGEL_PASS = 1113;
  RET_DUNGEON_REPLAY_NEED_ALL_PLAYER_DIE = 1114;
  RET_DUNGEON_REPLAY_HAS_REVIVE_COUNT = 1115;
  RET_DUNGEON_OTHERS_LEAVE = 1116;
  RET_DUNGEON_ENTER_LEVEL_LIMIT = 1117;
  RET_DUNGEON_CANNOT_ENTER_PLOT_IN_MP = 1118;
  RET_DUNGEON_DROP_SUBFIELD_LIMIT = 1119;
  RET_DUNGEON_BE_INVITE_PLAYER_AVATAR_ALL_DIE = 1120;
  RET_DUNGEON_CANNOT_KICK = 1121;
  RET_DUNGEON_CANDIDATE_TEAM_SOMEONE_LEVEL_LIMIT = 1122;
  RET_DUNGEON_IN_FORCE_QUIT = 1123;
  RET_DUNGEON_GUEST_QUIT_DUNGEON = 1124;
  RET_DUNGEON_TICKET_FAIL = 1125;
  RET_CUR_DUNGEON_SETTLED = 1126;
  RET_MP_NOT_IN_MY_WORLD = 1201;
  RET_MP_IN_MP_MODE = 1202;
  RET_MP_SCENE_IS_FULL = 1203;
  RET_MP_MODE_NOT_AVAILABLE = 1204;
  RET_MP_PLAYER_NOT_ENTERABLE = 1205;
  RET_MP_QUEST_BLOCK_MP = 1206;
  RET_MP_IN_ROOM_SCENE = 1207;
  RET_MP_WORLD_IS_FULL = 1208;
  RET_MP_PLAYER_NOT_ALLOW_ENTER = 1209;
  RET_MP_PLAYER_DISCONNECTED = 1210;
  RET_MP_NOT_IN_MP_MODE = 1211;
  RET_MP_OWNER_NOT_ENTER = 1212;
  RET_MP_ALLOW_ENTER_PLAYER_FULL = 1213;
  RET_MP_TARGET_PLAYER_IN_TRANSFER = 1214;
  RET_MP_TARGET_ENTERING_OTHER = 1215;
  RET_MP_OTHER_ENTERING = 1216;
  RET_MP_ENTER_MAIN_PLAYER_IN_PLOT = 1217;
  RET_MP_NOT_PS_PLAYER = 1218;
  RET_MP_PLAY_NOT_ACTIVE = 1219;
  RET_MP_PLAY_REMAIN_REWARDS = 1220;
  RET_MP_PLAY_NO_REWARD = 1221;
  RET_MP_OPEN_STATE_FAIL = 1223;
  RET_MP_PLAYER_IN_BLACKLIST = 1224;
  RET_MP_REPLY_TIMEOUT = 1225;
  RET_MP_IS_BLOCK = 1226;
  RET_MP_ENTER_MAIN_PLAYER_IN_MP_PLAY = 1227;
  RET_MP_IN_MP_PLAY_BATTLE = 1228;
  RET_MP_GUEST_HAS_REWARD_REMAINED = 1229;
  RET_MP_QUIT_MP_INVALID = 1230;
  RET_MP_OTHER_DATA_VERSION_NOT_LATEST = 1231;
  RET_MP_DATA_VERSION_NOT_LATEST = 1232;
  RET_MP_CUR_WORLD_NOT_ENTERABLE = 1233;
  RET_MP_ANY_GALLERY_STARTED = 1234;
  RET_MP_HAS_ACTIVE_DRAFT = 1235;
  RET_MP_PLAYER_IN_DUNGEON = 1236;
  RET_MP_MATCH_FULL = 1237;
  RET_MP_MATCH_LIMIT = 1238;
  RET_MP_MATCH_IN_PUNISH = 1239;
  RET_MP_IS_IN_MULTISTAGE = 1240;
  RET_MP_MATCH_PLAY_NOT_OPEN = 1241;
  RET_MP_ONLY_MP_WITH_PS_PLAYER = 1242;
  RET_MP_GUEST_LOADING_FIRST_ENTER = 1243;
  RET_MP_SUMMER_TIME_SPRINT_BOAT_ONGOING = 1244;
  RET_MP_BLITZ_RUSH_PARKOUR_CHALLENGE_ONGOING = 1245;
  RET_MP_MUSIC_GAME_ONGOING = 1246;
  RET_MP_IN_MPING_MODE = 1247;
  RET_MP_OWNER_IN_SINGLE_SCENE = 1248;
  RET_MP_IN_SINGLE_SCENE = 1249;
  RET_MP_REPLY_NO_VALID_AVATAR = 1250;
  RET_MP_IS_NOT_IN_TRANSFER_GUARD = 1251;
  RET_MAIL_PARA_ERR = 1301;
  RET_MAIL_MAX_NUM = 1302;
  RET_MAIL_ITEM_NUM_EXCEED = 1303;
  RET_MAIL_TITLE_LEN_EXCEED = 1304;
  RET_MAIL_CONTENT_LEN_EXCEED = 1305;
  RET_MAIL_SENDER_LEN_EXCEED = 1306;
  RET_MAIL_PARSE_PACKET_FAIL = 1307;
  RET_OFFLINE_MSG_MAX_NUM = 1308;
  RET_OFFLINE_MSG_SAME_TICKET = 1309;
  RET_MAIL_EXCEL_MAIL_TYPE_ERROR = 1310;
  RET_MAIL_CANNOT_SEND_MCOIN = 1311;
  RET_MAIL_HCOIN_EXCEED_LIMIT = 1312;
  RET_MAIL_SCOIN_EXCEED_LIMIT = 1313;
  RET_MAIL_MATERIAL_ID_INVALID = 1314;
  RET_MAIL_AVATAR_EXCEED_LIMIT = 1315;
  RET_MAIL_GACHA_TICKET_ETC_EXCEED_LIMIT = 1316;
  RET_MAIL_ITEM_EXCEED_CEHUA_LIMIT = 1317;
  RET_MAIL_SPACE_OR_REST_NUM_NOT_ENOUGH = 1318;
  RET_MAIL_TICKET_IS_EMPTY = 1319;
  RET_MAIL_TRANSACTION_IS_EMPTY = 1320;
  RET_MAIL_DELETE_COLLECTED = 1321;
  RET_DAILY_TASK_NOT_FINISH = 1330;
  RET_DAILY_TAKS_HAS_TAKEN = 1331;
  RET_SOCIAL_OFFLINE_MSG_NUM_EXCEED = 1332;
  RET_DAILY_TASK_FILTER_CITY_NOT_OPEN = 1333;
  RET_GACHA_INAVAILABLE = 1401;
  RET_GACHA_RANDOM_NOT_MATCH = 1402;
  RET_GACHA_SCHEDULE_NOT_MATCH = 1403;
  RET_GACHA_INVALID_TIMES = 1404;
  RET_GACHA_COST_ITEM_NOT_ENOUGH = 1405;
  RET_GACHA_TIMES_LIMIT = 1406;
  RET_GACHA_WISH_SAME_ITEM = 1407;
  RET_GACHA_WISH_INVALID_ITEM = 1408;
  RET_GACHA_MINORS_TIMES_LIMIT = 1409;
  RET_GACHA_GENERAL_TIMES_LIMIT = 1410;
  RET_INVESTIGAITON_NOT_IN_PROGRESS = 1501;
  RET_INVESTIGAITON_UNCOMPLETE = 1502;
  RET_INVESTIGAITON_REWARD_TAKEN = 1503;
  RET_INVESTIGAITON_TARGET_STATE_ERROR = 1504;
  RET_PUSH_TIPS_NOT_FOUND = 1505;
  RET_SIGN_IN_RECORD_NOT_FOUND = 1506;
  RET_ALREADY_HAVE_SIGNED_IN = 1507;
  RET_SIGN_IN_COND_NOT_SATISFIED = 1508;
  RET_BONUS_ACTIVITY_NOT_UNREWARDED = 1509;
  RET_SIGN_IN_REWARDED = 1510;
  RET_TOWER_NOT_OPEN = 1521;
  RET_TOWER_HAVE_DAILY_RECORD = 1522;
  RET_TOWER_NOT_RECORD = 1523;
  RET_TOWER_HAVE_RECORD = 1524;
  RET_TOWER_TEAM_NUM_ERROR = 1525;
  RET_TOWER_FLOOR_NOT_OPEN = 1526;
  RET_TOWER_NO_FLOOR_STAR_RECORD = 1527;
  RET_ALREADY_HAS_TOWER_BUFF = 1528;
  RET_DUPLICATE_ENTER_LEVEL = 1529;
  RET_NOT_IN_TOWER_LEVEL = 1530;
  RET_IN_TOWER_LEVEL = 1531;
  RET_TOWER_PREV_FLOOR_NOT_FINISH = 1532;
  RET_TOWER_STAR_NOT_ENOUGH = 1533;
  RET_BATTLE_PASS_NO_SCHEDULE = 1541;
  RET_BATTLE_PASS_HAS_BUYED = 1542;
  RET_BATTLE_PASS_LEVEL_OVERFLOW = 1543;
  RET_BATTLE_PASS_PRODUCT_EXPIRED = 1544;
  RET_MATCH_HOST_QUIT = 1561;
  RET_MATCH_ALREADY_IN_MATCH = 1562;
  RET_MATCH_NOT_IN_MATCH = 1563;
  RET_MATCH_APPLYING_ENTER_MP = 1564;
  RET_MATCH_INCORRECT_SCENE = 1565;
  RET_WIDGET_TREASURE_SPOT_NOT_FOUND = 1581;
  RET_WIDGET_TREASURE_ENTITY_EXISTS = 1582;
  RET_WIDGET_TREASURE_SPOT_FAR_AWAY = 1583;
  RET_WIDGET_TREASURE_FINISHED_TODAY = 1584;
  RET_WIDGET_QUICK_USE_REQ_PARAM_ERROR = 1585;
  RET_WIDGET_CAMERA_SCAN_ID_ERROR = 1586;
  RET_WIDGET_NOT_ACTIVE = 1587;
  RET_WIDGET_FEATHER_NOT_ACTIVE = 1588;
  RET_WIDGET_FEATHER_GADGET_TOO_FAR_AWAY = 1589;
  RET_WIDGET_CAPTURE_ANIMAL_NOT_EXIST = 1590;
  RET_WIDGET_CAPTURE_ANIMAL_DROP_BAG_LIMIT = 1591;
  RET_WIDGET_CAPTURE_ANIMAL_CAN_NOT_CAPTURE = 1592;
  RET_WIDGET_SKY_CRYSTAL_ALL_COLLECTED = 1593;
  RET_WIDGET_SKY_CRYSTAL_HINT_ALREADY_EXIST = 1594;
  RET_WIDGET_SKY_CRYSTAL_NOT_FOUND = 1595;
  RET_WIDGET_SKY_CRYSTAL_NO_HINT_TO_CLEAR = 1596;
  RET_WIDGET_LIGHT_STONE_ENERGY_NOT_ENOUGH = 1597;
  RET_WIDGET_TOY_CRYSTAL_ENERGY_NOT_ENOUGH = 1598;
  RET_WIDGET_LIGHT_STONE_LEVEL_NOT_ENOUGH = 1599;
  RET_UID_NOT_EXIST = 2001;
  RET_PARSE_BIN_ERROR = 2002;
  RET_ACCOUNT_INFO_NOT_EXIST = 2003;
  RET_ORDER_INFO_NOT_EXIST = 2004;
  RET_SNAPSHOT_INDEX_ERROR = 2005;
  RET_MAIL_HAS_BEEN_SENT = 2006;
  RET_PRODUCT_NOT_EXIST = 2007;
  RET_UNFINISH_ORDER = 2008;
  RET_ID_NOT_EXIST = 2009;
  RET_ORDER_TRADE_EARLY = 2010;
  RET_ORDER_FINISHED = 2011;
  RET_GAMESERVER_VERSION_WRONG = 2012;
  RET_OFFLINE_OP_FULL_LENGTH = 2013;
  RET_CONCERT_PRODUCT_OBTAIN_LIMIT = 2014;
  RET_CONCERT_PRODUCT_TICKET_DUPLICATED = 2015;
  RET_CONCERT_PRODUCT_TICKET_EMPTY = 2016;
  RET_REDIS_MODIFIED = 5001;
  RET_REDIS_UID_NOT_EXIST = 5002;
  RET_PATHFINDING_DATA_NOT_EXIST = 6001;
  RET_PATHFINDING_DESTINATION_NOT_EXIST = 6002;
  RET_PATHFINDING_ERROR_SCENE = 6003;
  RET_PATHFINDING_SCENE_DATA_LOADING = 6004;
  RET_FRIEND_COUNT_EXCEEDED = 7001;
  RET_PLAYER_NOT_EXIST = 7002;
  RET_ALREADY_SENT_ADD_REQUEST = 7003;
  RET_ASK_FRIEND_LIST_FULL = 7004;
  RET_PLAYER_ALREADY_IS_FRIEND = 7005;
  RET_PLAYER_NOT_ASK_FRIEND = 7006;
  RET_TARGET_FRIEND_COUNT_EXCEED = 7007;
  RET_NOT_FRIEND = 7008;
  RET_BIRTHDAY_CANNOT_BE_SET_TWICE = 7009;
  RET_CANNOT_ADD_SELF_FRIEND = 7010;
  RET_SIGNATURE_ILLEGAL = 7011;
  RET_PS_PLAYER_CANNOT_ADD_FRIENDS = 7012;
  RET_PS_PLAYER_CANNOT_REMOVE_FRIENDS = 7013;
  RET_NAME_CARD_NOT_UNLOCKED = 7014;
  RET_ALREADY_IN_BLACKLIST = 7015;
  RET_PS_PALEYRS_CANNOT_ADD_BLACKLIST = 7016;
  RET_PLAYER_BLACKLIST_FULL = 7017;
  RET_PLAYER_NOT_IN_BLACKLIST = 7018;
  RET_BLACKLIST_PLAYER_CANNOT_ADD_FRIEND = 7019;
  RET_IN_TARGET_BLACKLIST = 7020;
  RET_CANNOT_ADD_TARGET_FRIEND = 7021;
  RET_BIRTHDAY_FORMAT_ERROR = 7022;
  RET_ONLINE_ID_NOT_EXISTS = 7023;
  RET_FIRST_SHARE_REWARD_HAS_TAKEN = 7024;
  RET_PS_PLAYER_CANNOT_REMOVE_BLACKLIST = 7025;
  RET_REPORT_CD = 7026;
  RET_REPORT_CONTENT_ILLEGAL = 7027;
  RET_REMARK_WORD_ILLEGAL = 7028;
  RET_REMARK_TOO_LONG = 7029;
  RET_REMARK_UTF8_ERROR = 7030;
  RET_REMARK_IS_EMPTY = 7031;
  RET_ASK_ADD_FRIEND_CD = 7032;
  RET_SHOW_AVATAR_INFO_NOT_EXIST = 7033;
  RET_PLAYER_NOT_SHOW_AVATAR = 7034;
  RET_SOCIAL_UPDATE_SHOW_LIST_REPEAT_ID = 7035;
  RET_PSN_ID_NOT_FOUND = 7036;
  RET_EMOJI_COLLECTION_NUM_EXCEED_LIMIT = 7037;
  RET_REMARK_EMPTY = 7038;
  RET_IN_TARGET_PSN_BLACKLIST = 7039;
  RET_SIGNATURE_NOT_CHANGED = 7040;
  RET_SIGNATURE_MONTHLY_LIMIT = 7041;
  RET_REQ_FRIEND_AVATAR_FREQUENTLY = 7042;
  RET_PSN_GET_PLAYER_SOCIAL_DETAIL_FAIL = 7043;
  RET_OFFERING_NOT_OPEN = 7081;
  RET_OFFERING_LEVEL_LIMIT = 7082;
  RET_OFFERING_LEVEL_NOT_REACH = 7083;
  RET_OFFERING_LEVEL_HAS_TAKEN = 7084;
  RET_CITY_REPUTATION_NOT_OPEN = 7101;
  RET_CITY_REPUTATION_LEVEL_TAKEN = 7102;
  RET_CITY_REPUTATION_LEVEL_NOT_REACH = 7103;
  RET_CITY_REPUTATION_PARENT_QUEST_TAKEN = 7104;
  RET_CITY_REPUTATION_PARENT_QUEST_UNFINISH = 7105;
  RET_CITY_REPUTATION_ACCEPT_REQUEST = 7106;
  RET_CITY_REPUTATION_NOT_ACCEPT_REQUEST = 7107;
  RET_CITY_REPUTATION_ACCEPT_REQUEST_LIMIT = 7108;
  RET_CITY_REPUTATION_ENTRANCE_NOT_OPEN = 7109;
  RET_CITY_REPUTATION_TAKEN_REQUEST_REWARD = 7110;
  RET_CITY_REPUTATION_SWITCH_CLOSE = 7111;
  RET_CITY_REPUTATION_ENTRACE_SWITCH_CLOSE = 7112;
  RET_CITY_REPUTATION_TAKEN_EXPLORE_REWARD = 7113;
  RET_CITY_REPUTATION_EXPLORE_NOT_REACH = 7114;
  RET_MECHANICUS_NOT_OPEN = 7120;
  RET_MECHANICUS_GEAR_UNLOCK = 7121;
  RET_MECHANICUS_GEAR_LOCK = 7122;
  RET_MECHANICUS_GEAR_LEVEL_LIMIT = 7123;
  RET_MECHANICUS_COIN_NOT_ENOUGH = 7124;
  RET_MECHANICUS_NO_SEQUENCE = 7125;
  RET_MECHANICUS_SEQUENCE_LIMIT_LEVEL = 7126;
  RET_MECHANICUS_SEQUENCE_LIMIT_OPEN = 7127;
  RET_MECHANICUS_DIFFICULT_NOT_SUPPORT = 7128;
  RET_MECHANICUS_TICKET_NOT_ENOUGH = 7129;
  RET_MECHANICUS_TEACH_NOT_FINISH = 7130;
  RET_MECHANICUS_TEACH_FINISHED = 7131;
  RET_MECHANICUS_PREV_DIFFICULT_LEVEL_BLOCK = 7132;
  RET_MECHANICUS_PLAYER_LIMIT = 7133;
  RET_MECHANICUS_PUNISH_TIME = 7134;
  RET_MECHANICUS_SWITCH_CLOSE = 7135;
  RET_MECHANICUS_BATTLE_NOT_IN_DUNGEON = 7150;
  RET_MECHANICUS_BATTLE_PLAY_NOT_FOUND = 7151;
  RET_MECHANICUS_BATTLE_DUPLICATE_PICK_CARD = 7152;
  RET_MECHANICUS_BATTLE_PLAYER_NOT_IN_PLAY = 7153;
  RET_MECHANICUS_BATTLE_CARD_NOT_AVAILABLE = 7154;
  RET_MECHANICUS_BATTLE_NOT_IN_CARD_STAGE = 7155;
  RET_MECHANICUS_BATTLE_CARD_IS_WAITING = 7156;
  RET_MECHANICUS_BATTLE_CARD_ALL_CONFIRMED = 7157;
  RET_MECHANICUS_BATTLE_CARD_ALREADY_CONFIRMED = 7158;
  RET_MECHANICUS_BATTLE_CARD_CONFIRMED_BY_OTHER = 7159;
  RET_MECHANICUS_BATTLE_CARD_NOT_ENOUGH_POINTS = 7160;
  RET_MECHANICUS_BATTLE_CARD_ALREADY_SKIPPED = 7161;
  RET_LEGENDARY_KEY_NOT_ENOUGH = 8001;
  RET_LEGENDARY_KEY_EXCEED_LIMIT = 8002;
  RET_DAILY_TASK_NOT_ENOUGH_TO_REDEEM = 8003;
  RET_PERSONAL_LINE_OPEN_STATE_OFF = 8004;
  RET_PERSONAL_LINE_LEVEL_NOT_ENOUGH = 8005;
  RET_PERSONAL_LINE_NOT_OPEN = 8006;
  RET_PERSONAL_LINE_PRE_QUEST_NOT_FINISH = 8007;
  RET_HUNTING_ALREADY_FINISH_OFFER_LIMIT = 8201;
  RET_HUNTING_HAS_UNFINISHED_OFFER = 8202;
  RET_HUNTING_FAILED_OFFER_NOT_CD_READY = 8203;
  RET_HUNTING_NOT_TAKE_OFFER = 8204;
  RET_HUNTING_CANNOT_TAKE_TWICE = 8205;
  RET_RPIVATE_CHAT_INVALID_CONTENT_TYPE = 8901;
  RET_PRIVATE_CHAT_TARGET_IS_NOT_FRIEND = 8902;
  RET_PRIVATE_CHAT_CONTENT_NOT_SUPPORTED = 8903;
  RET_PRIVATE_CHAT_CONTENT_TOO_LONG = 8904;
  RET_PRIVATE_CHAT_PULL_TOO_FAST = 8905;
  RET_PRIVATE_CHAT_REPEAT_READ = 8906;
  RET_PRIVATE_CHAT_READ_NOT_FRIEND = 8907;
  RET_REUNION_FINISHED = 9001;
  RET_REUNION_NOT_ACTIVATED = 9002;
  RET_REUNION_ALREADY_TAKE_FIRST_REWARD = 9003;
  RET_REUNION_SIGN_IN_REWARDED = 9004;
  RET_REUNION_WATCHER_REWARDED = 9005;
  RET_REUNION_WATCHER_NOT_FINISH = 9006;
  RET_REUNION_MISSION_REWARDED = 9007;
  RET_REUNION_MISSION_NOT_FINISH = 9008;
  RET_REUNION_WATCHER_REWARD_NOT_UNLOCKED = 9009;
  RET_BLESSING_CONTENT_CLOSED = 9101;
  RET_BLESSING_NOT_ACTIVE = 9102;
  RET_BLESSING_NOT_TODAY_ENTITY = 9103;
  RET_BLESSING_ENTITY_EXCEED_SCAN_NUM_LIMIT = 9104;
  RET_BLESSING_DAILY_SCAN_NUM_EXCEED_LIMIT = 9105;
  RET_BLESSING_REDEEM_REWARD_NUM_EXCEED_LIMIT = 9106;
  RET_BLESSING_REDEEM_PIC_NUM_NOT_ENOUGH = 9107;
  RET_BLESSING_PIC_NOT_ENOUGH = 9108;
  RET_BLESSING_PIC_HAS_RECEIVED = 9109;
  RET_BLESSING_TARGET_RECV_NUM_EXCEED = 9110;
  RET_FLEUR_FAIR_CREDIT_EXCEED_LIMIT = 9111;
  RET_FLEUR_FAIR_CREDIT_NOT_ENOUGH = 9112;
  RET_FLEUR_FAIR_TOKEN_EXCEED_LIMIT = 9113;
  RET_FLEUR_FAIR_TOKEN_NOT_ENOUGH = 9114;
  RET_FLEUR_FAIR_MINIGAME_NOT_OPEN = 9115;
  RET_FLEUR_FAIR_MUSIC_GAME_DIFFICULTY_NOT_UNLOCK = 9116;
  RET_FLEUR_FAIR_DUNGEON_LOCKED = 9117;
  RET_FLEUR_FAIR_DUNGEON_PUNISH_TIME = 9118;
  RET_FLEUR_FAIR_ONLY_OWNER_CAN_RESTART_MINIGAM = 9119;
  RET_WATER_SPIRIT_COIN_EXCEED_LIMIT = 9120;
  RET_WATER_SPIRIT_COIN_NOT_ENOUGH = 9121;
  RET_REGION_SEARCH_NO_SEARCH = 9122;
  RET_REGION_SEARCH_STATE_ERROR = 9123;
  RET_CHANNELLER_SLAB_LOOP_DUNGEON_STAGE_NOT_OPEN = 9130;
  RET_CHANNELLER_SLAB_LOOP_DUNGEON_NOT_OPEN = 9131;
  RET_CHANNELLER_SLAB_LOOP_DUNGEON_FIRST_PASS_REWARD_HAS_TAKEN = 9132;
  RET_CHANNELLER_SLAB_LOOP_DUNGEON_SCORE_REWARD_HAS_TAKEN = 9133;
  RET_CHANNELLER_SLAB_INVALID_ONE_OFF_DUNGEON = 9134;
  RET_CHANNELLER_SLAB_ONE_OFF_DUNGEON_DONE = 9135;
  RET_CHANNELLER_SLAB_ONE_OFF_DUNGEON_STAGE_NOT_OPEN = 9136;
  RET_CHANNELLER_SLAB_TOKEN_EXCEED_LIMIT = 9137;
  RET_CHANNELLER_SLAB_TOKEN_NOT_ENOUGH = 9138;
  RET_CHANNELLER_SLAB_PLAYER_NOT_IN_ONE_OFF_DUNGEON = 9139;
  RET_MIST_TRIAL_SELECT_CHARACTER_NUM_NOT_ENOUGH = 9150;
  RET_MIST_TRIAL_ALREADY_USING_TRIAL_AVATAR = 9151;
  RET_HIDE_AND_SEEK_PLAY_NOT_OPEN = 9160;
  RET_HIDE_AND_SEEK_PLAY_MAP_NOT_OPEN = 9161;
  RET_HIDE_AND_SEEK_PLAY_MAP_NOT_CHOSEN = 9162;
  RET_SUMMER_TIME_DRAFT_WOORD_EXCEED_LIMIT = 9170;
  RET_SUMMER_TIME_DRAFT_WOORD_NOT_ENOUGH = 9171;
  RET_SUMMER_TIME_MINI_HARPASTUM_EXCEED_LIMIT = 9172;
  RET_SUMMER_TIME_MINI_HARPASTUMNOT_ENOUGH = 9173;
  RET_BOUNCE_CONJURING_COIN_EXCEED_LIMIT = 9180;
  RET_BOUNCE_CONJURING_COIN_NOT_ENOUGH = 9181;
  RET_CHESS_TEACH_MAP_FINISHED = 9183;
  RET_CHESS_TEACH_MAP_UNFINISHED = 9184;
  RET_CHESS_COIN_EXCEED_LIMIT = 9185;
  RET_CHESS_COIN_NOT_ENOUGH = 9186;
  RET_CHESS_IN_PUNISH_TIME = 9187;
  RET_CHESS_PREV_MAP_UNFINISHED = 9188;
  RET_CHESS_MAP_LOCKED = 9189;
  RET_BLITZ_RUSH_NOT_OPEN = 9192;
  RET_BLITZ_RUSH_DUNGEON_NOT_OPEN = 9193;
  RET_BLITZ_RUSH_COIN_A_EXCEED_LIMIT = 9194;
  RET_BLITZ_RUSH_COIN_B_EXCEED_LIMIT = 9195;
  RET_BLITZ_RUSH_COIN_A_NOT_ENOUGH = 9196;
  RET_BLITZ_RUSH_COIN_B_NOT_ENOUGH = 9197;
  RET_MIRACLE_RING_VALUE_NOT_ENOUGH = 9201;
  RET_MIRACLE_RING_CD = 9202;
  RET_MIRACLE_RING_REWARD_NOT_TAKEN = 9203;
  RET_MIRACLE_RING_NOT_DELIVER = 9204;
  RET_MIRACLE_RING_DELIVER_EXCEED = 9205;
  RET_MIRACLE_RING_HAS_CREATED = 9206;
  RET_MIRACLE_RING_HAS_NOT_CREATED = 9207;
  RET_MIRACLE_RING_NOT_YOURS = 9208;
  RET_GADGET_FOUNDATION_UNAUTHORIZED = 9251;
  RET_GADGET_FOUNDATION_SCENE_NOT_FOUND = 9252;
  RET_GADGET_FOUNDATION_NOT_IN_INIT_STATE = 9253;
  RET_GADGET_FOUNDATION_BILDING_POINT_NOT_ENOUGHT = 9254;
  RET_GADGET_FOUNDATION_NOT_IN_BUILT_STATE = 9255;
  RET_GADGET_FOUNDATION_OP_NOT_SUPPORTED = 9256;
  RET_GADGET_FOUNDATION_REQ_PLAYER_NOT_IN_SCENE = 9257;
  RET_GADGET_FOUNDATION_LOCKED_BY_ANOTHER_PLAYER = 9258;
  RET_GADGET_FOUNDATION_NOT_LOCKED = 9259;
  RET_GADGET_FOUNDATION_DUPLICATE_LOCK = 9260;
  RET_GADGET_FOUNDATION_PLAYER_NOT_FOUND = 9261;
  RET_GADGET_FOUNDATION_PLAYER_GEAR_NOT_FOUND = 9262;
  RET_GADGET_FOUNDATION_ROTAION_DISABLED = 9263;
  RET_GADGET_FOUNDATION_REACH_DUNGEON_GEAR_LIMIT = 9264;
  RET_GADGET_FOUNDATION_REACH_SINGLE_GEAR_LIMIT = 9265;
  RET_GADGET_FOUNDATION_ROTATION_ON_GOING = 9266;
  RET_OP_ACTIVITY_BONUS_NOT_FOUND = 9301;
  RET_OP_ACTIVITY_NOT_OPEN = 9302;
  RET_MULTISTAGE_PLAY_PLAYER_NOT_IN_SCENE = 9501;
  RET_MULTISTAGE_PLAY_NOT_FOUND = 9502;
  RET_MULTISTAGE_PLAY_IN_OTHER_STAGE = 9503;
  RET_COOP_CHAPTER_NOT_OPEN = 9601;
  RET_COOP_COND_NOT_MEET = 9602;
  RET_COOP_POINT_LOCKED = 9603;
  RET_COOP_NOT_HAVE_PROGRESS = 9604;
  RET_COOP_REWARD_HAS_TAKEN = 9605;
  RET_DRAFT_HAS_ACTIVE_DRAFT = 9651;
  RET_DRAFT_NOT_IN_MY_WORLD = 9652;
  RET_DRAFT_NOT_SUPPORT_MP = 9653;
  RET_DRAFT_PLAYER_NOT_ENOUGH = 9654;
  RET_DRAFT_INCORRECT_SCENE = 9655;
  RET_DRAFT_OTHER_PLAYER_ENTERING = 9656;
  RET_DRAFT_GUEST_IS_TRANSFERRING = 9657;
  RET_DRAFT_GUEST_NOT_IN_DRAFT_SCENE = 9658;
  RET_DRAFT_INVITE_OVER_TIME = 9659;
  RET_DRAFT_TWICE_CONFIRM_OVER_TIMER = 9660;
  RET_DRAFT_GUEST_NOT_IN_WORLD_SCENE = 9661;
  RET_HOME_UNKOWN = 9701;
  RET_HOME_INVALID_CLIENT_PARAM = 9702;
  RET_HOME_TARGE_PLAYER_HAS_NO_HOME = 9703;
  RET_HOME_NOT_ONLINE = 9704;
  RET_HOME_PLAYER_FULL = 9705;
  RET_HOME_BLOCKED = 9706;
  RET_HOME_ALREADY_IN_TARGET_HOME_WORLD = 9707;
  RET_HOME_IN_EDIT_MODE = 9708;
  RET_HOME_NOT_IN_EDIT_MODE = 9709;
  RET_HOME_HAS_GUEST = 9710;
  RET_HOME_CANT_ENTER_BY_IN_EDIT_MODE = 9711;
  RET_HOME_CLIENT_PARAM_INVALID = 9712;
  RET_HOME_PLAYER_NOT_IN_HOME_WORLD = 9713;
  RET_HOME_PLAYER_NOT_IN_SELF_HOME_WORLD = 9714;
  RET_HOME_NOT_FOUND_IN_MEM = 9715;
  RET_HOME_PLAYER_IN_HOME_ROOM_SCENE = 9716;
  RET_HOME_HOME_REFUSE_GUEST_ENTER = 9717;
  RET_HOME_OWNER_REFUSE_TO_ENTER_HOME = 9718;
  RET_HOME_OWNER_OFFLINE = 9719;
  RET_HOME_FURNITURE_EXCEED_LIMIT = 9720;
  RET_HOME_FURNITURE_COUNT_NOT_ENOUGH = 9721;
  RET_HOME_IN_TRY_ENTER_PROCESS = 9722;
  RET_HOME_ALREADY_IN_TARGET_SCENE = 9723;
  RET_HOME_COIN_EXCEED_LIMIT = 9724;
  RET_HOME_COIN_NOT_ENOUGH = 9725;
  RET_HOME_MODULE_NOT_UNLOCKED = 9726;
  RET_HOME_CUR_MODULE_CLOSED = 9727;
  RET_HOME_FURNITURE_SUITE_NOT_UNLOCKED = 9728;
  RET_HOME_IN_MATCH = 9729;
  RET_HOME_IN_COMBAT = 9730;
  RET_HOME_EDIT_MODE_CD = 9731;
  RET_HOME_UPDATE_FURNITURE_CD = 9732;
  RET_HOME_BLOCK_FURNITURE_LIMIT = 9733;
  RET_HOME_NOT_SUPPORT = 9734;
  RET_HOME_STATE_NOT_OPEN = 9735;
  RET_HOME_TARGET_STATE_NOT_OPEN = 9736;
  RET_HOME_APPLY_ENTER_OTHER_HOME_FAIL = 9737;
  RET_HOME_SAVE_NO_MAIN_HOUSE = 9738;
  RET_HOME_IN_DUNGEON = 9739;
  RET_HOME_ANY_GALLERY_STARTED = 9740;
  RET_HOME_QUEST_BLOCK_HOME = 9741;
  RET_HOME_WAITING_PRIOR_CHECK = 9742;
  RET_HOME_PERSISTENT_CHECK_FAIL = 9743;
  RET_HOME_FIND_ONLINE_HOME_FAIL = 9744;
  RET_HOME_JOIN_SCENE_FAIL = 9745;
  RET_HOME_MAX_PLAYER = 9746;
  RET_HOME_IN_TRANSFER = 9747;
  RET_HOME_ANY_HOME_GALLERY_STARTED = 9748;
  RET_HOME_CAN_NOT_ENTER_IN_AUDIT = 9749;
  RET_FURNITURE_MAKE_INDEX_ERROR = 9750;
  RET_FURNITURE_MAKE_LOCKED = 9751;
  RET_FURNITURE_MAKE_CONFIG_ERROR = 9752;
  RET_FURNITURE_MAKE_SLOT_FULL = 9753;
  RET_FURNITURE_MAKE_ADD_FURNITURE_FAIL = 9754;
  RET_FURNITURE_MAKE_UNFINISH = 9755;
  RET_FURNITURE_MAKE_IS_FINISH = 9756;
  RET_FURNITURE_MAKE_NOT_IN_CORRECT_HOME = 9757;
  RET_FURNITURE_MAKE_NO_COUNT = 9758;
  RET_FURNITURE_MAKE_ACCELERATE_LIMIT = 9759;
  RET_FURNITURE_MAKE_NO_MAKE_DATA = 9760;
  RET_HOME_LIMITED_SHOP_CLOSE = 9761;
  RET_HOME_AVATAR_NOT_SHOW = 9762;
  RET_HOME_EVENT_COND_NOT_SATISFIED = 9763;
  RET_HOME_INVALID_ARRANGE_ANIMAL_PARAM = 9764;
  RET_HOME_INVALID_ARRANGE_NPC_PARAM = 9765;
  RET_HOME_INVALID_ARRANGE_SUITE_PARAM = 9766;
  RET_HOME_INVALID_ARRANGE_MAIN_HOUSE_PARAM = 9767;
  RET_HOME_AVATAR_STATE_NOT_OPEN = 9768;
  RET_HOME_PLANT_FIELD_NOT_EMPTY = 9769;
  RET_HOME_PLANT_FIELD_EMPTY = 9770;
  RET_HOME_PLANT_FIELD_TYPE_ERROR = 9771;
  RET_HOME_PLANT_TIME_NOT_ENOUGH = 9772;
  RET_HOME_PLANT_SUB_FIELD_NUM_NOT_ENOUGH = 9773;
  RET_HOME_PLANT_FIELD_PARAM_ERROR = 9774;
  RET_HOME_FURNITURE_GUID_ERROR = 9775;
  RET_HOME_FURNITURE_ARRANGE_LIMIT = 9776;
  RET_HOME_FISH_FARMING_LIMIT = 9777;
  RET_HOME_FISH_COUNT_NOT_ENOUGH = 9778;
  RET_HOME_FURNITURE_COST_LIMIT = 9779;
  RET_HOME_CUSTOM_FURNITURE_INVALID = 9780;
  RET_HOME_INVALID_ARRANGE_GROUP_PARAM = 9781;
  RET_HOME_FURNITURE_ARRANGE_GROUP_LIMIT = 9782;
  RET_HOME_PICTURE_FRAME_COOP_CG_GENDER_ERROR = 9783;
  RET_HOME_PICTURE_FRAME_COOP_CG_NOT_UNLOCK = 9784;
  RET_HOME_FURNITURE_CANNOT_ARRANGE = 9785;
  RET_HOME_FURNITURE_IN_DUPLICATE_SUITE = 9786;
  RET_HOME_FURNITURE_CUSTOM_SUITE_TOO_SMALL = 9787;
  RET_HOME_FURNITURE_CUSTOM_SUITE_TOO_BIG = 9788;
  RET_HOME_FURNITURE_SUITE_EXCEED_LIMIT = 9789;
  RET_HOME_FURNITURE_CUSTOM_SUITE_EXCEED_LIMIT = 9790;
  RET_HOME_FURNITURE_CUSTOM_SUITE_INVALID_SURFACE_TYPE = 9791;
  RET_HOME_BGM_ID_NOT_FOUND = 9792;
  RET_HOME_BGM_NOT_UNLOCKED = 9793;
  RET_HOME_BGM_FURNITURE_NOT_FOUND = 9794;
  RET_HOME_BGM_NOT_SUPPORT_BY_CUR_SCENE = 9795;
  RET_HOME_LIMITED_SHOP_GOODS_DISABLE = 9796;
  RET_HOME_WORLD_WOOD_MATERIAL_EMPTY = 9797;
  RET_HOME_WORLD_WOOD_MATERIAL_NOT_FOUND = 9798;
  RET_HOME_WORLD_WOOD_MATERIAL_COUNT_INVALID = 9799;
  RET_HOME_WORLD_WOOD_EXCHANGE_EXCEED_LIMIT = 9800;
  RET_HOME_BLUEPRINT_SEARCH_SELF = 9801;
  RET_HOME_BLUEPRINT_SHARE_CODE_INVALID = 9802;
  RET_HOME_BLUEPRINT_NOT_EXIST = 9803;
  RET_HOME_BLUEPRINT_SLOT_HAS_EXIST_SHARE_CODE = 9804;
  RET_HOME_BLUEPRINT_SLOT_NOT_EXIST_SHARE_CODE = 9805;
  RET_HOME_BLUEPRINT_CAN_NOT_CREATE_IN_AUDIT = 9806;
  RET_HOME_BLOCK_NOT_UNLOCKED = 9807;
  RET_HOME_BLUEPRINT_CREATE_CD = 9808;
  RET_HOME_BLUEPRINT_SET_OPTION_CD = 9809;
  RET_HOME_BLUEPRINT_NOT_ALLOW_FRIEND_COPY = 9810;
  RET_HOME_FURNITURE_POS_UNDER_DIE_Y = 9811;
  RET_HOME_BLUEPRINT_GEN_SHARE_CODE_FAIL = 9812;
  RET_HOME_BLUEPRINT_SEARCH_CD = 9813;
  RET_HOME_BLUEPRINT_PREVIEW_CD = 9814;
  RET_HOME_BLUEPRINT_PREVIEW_SCENE_NOT_MATCH = 9815;
  RET_SUMO_ACTIVITY_STAGE_NOT_OPEN = 10000;
  RET_SUMO_ACTIVITY_SWITCH_TEAM_IN_CD = 10001;
  RET_SUMO_ACTIVITY_TEAM_NUM_INCORRECT = 10002;
  RET_LUNA_RITE_ACTIVITY_AREA_ID_ERROR = 10004;
  RET_LUNA_RITE_ACTIVITY_BATTLE_NOT_FINISH = 10005;
  RET_LUNA_RITE_ACTIVITY_ALREADY_SACRIFICE = 10006;
  RET_LUNA_RITE_ACTIVITY_ALREADY_TAKE_REWARD = 10007;
  RET_LUNA_RITE_ACTIVITY_SACRIFICE_NOT_ENOUGH = 10008;
  RET_LUNA_RITE_ACTIVITY_SEARCHING_COND_NOT_MEET = 10009;
  RET_DIG_GADGET_CONFIG_ID_NOT_MATCH = 10015;
  RET_DIG_FIND_NEAREST_POS_FAIL = 10016;
  RET_MUSIC_GAME_LEVEL_NOT_OPEN = 10021;
  RET_MUSIC_GAME_LEVEL_NOT_UNLOCK = 10022;
  RET_MUSIC_GAME_LEVEL_NOT_STARTED = 10023;
  RET_MUSIC_GAME_LEVEL_CONFIG_NOT_FOUND = 10024;
  RET_MUSIC_GAME_LEVEL_ID_NOT_MATCH = 10025;
  RET_ROGUELIKE_COIN_A_NOT_ENOUGH = 10031;
  RET_ROGUELIKE_COIN_B_NOT_ENOUGH = 10032;
  RET_ROGUELIKE_COIN_C_NOT_ENOUGH = 10033;
  RET_ROGUELIKE_COIN_A_EXCEED_LIMIT = 10034;
  RET_ROGUELIKE_COIN_B_EXCEED_LIMIT = 10035;
  RET_ROGUELIKE_COIN_C_EXCEED_LIMIT = 10036;
  RET_ROGUELIKE_RUNE_COUNT_NOT_ENOUGH = 10037;
  RET_ROGUELIKE_NOT_IN_ROGUE_DUNGEON = 10038;
  RET_ROGUELIKE_CELL_NOT_FOUND = 10039;
  RET_ROGUELIKE_CELL_TYPE_INCORRECT = 10040;
  RET_ROGUELIKE_CELL_ALREADY_FINISHED = 10041;
  RET_ROGUELIKE_DUNGEON_HAVE_UNFINISHED_PROGRESS = 10042;
  RET_ROGUELIKE_STAGE_NOT_FINISHED = 10043;
  RET_ROGUELIKE_STAGE_FIRST_PASS_REWARD_HAS_TAKEN = 10045;
  RET_ROGUELIKE_ACTIVITY_CONTENT_CLOSED = 10046;
  RET_ROGUELIKE_DUNGEON_PRE_QUEST_NOT_FINISHED = 10047;
  RET_ROGUELIKE_DUNGEON_NOT_OPEN = 10048;
  RET_ROGUELIKE_SPRINT_IS_BANNED = 10049;
  RET_ROGUELIKE_DUNGEON_PRE_STAGE_NOT_FINISHED = 10050;
  RET_ROGUELIKE_ALL_AVATAR_DIE_CANNOT_RESUME = 10051;
  RET_PLANT_FLOWER_ALREADY_TAKE_SEED = 10056;
  RET_PLANT_FLOWER_FRIEND_HAVE_FLOWER_LIMIT = 10057;
  RET_PLANT_FLOWER_CAN_GIVE_FLOWER_NOT_ENOUGH = 10058;
  RET_PLANT_FLOWER_WISH_FLOWER_KINDS_LIMIT = 10059;
  RET_PLANT_FLOWER_HAVE_FLOWER_NOT_ENOUGH = 10060;
  RET_PLANT_FLOWER_FLOWER_COMBINATION_INVALID = 10061;
  RET_HACHI_DUNGEON_NOT_VALID = 10052;
  RET_HACHI_DUNGEON_STAGE_NOT_OPEN = 10053;
  RET_HACHI_DUNGEON_TEAMMATE_NOT_PASS = 10054;
  RET_WINTER_CAMP_COIN_A_NOT_ENOUGH = 10071;
  RET_WINTER_CAMP_COIN_B_NOT_ENOUGH = 10072;
  RET_WINTER_CAMP_COIN_A_EXCEED_LIMIT = 10073;
  RET_WINTER_CAMP_COIN_B_EXCEED_LIMIT = 10074;
  RET_WINTER_CAMP_WISH_ID_INVALID = 10075;
  RET_WINTER_CAMP_NOT_FOUND_RECV_ITEM_DATA = 10076;
  RET_WINTER_CAMP_FRIEND_ITEM_COUNT_OVERFLOW = 10077;
  RET_WINTER_CAMP_SELECT_ITEM_DATA_INVALID = 10078;
  RET_WINTER_CAMP_ITEM_LIST_EMPTY = 10079;
  RET_WINTER_CAMP_REWARD_ALREADY_TAKEN = 10080;
  RET_WINTER_CAMP_STAGE_NOT_FINISH = 10081;
  RET_WINTER_CAMP_GADGET_INVALID = 10082;
  RET_LANTERN_RITE_COIN_A_NOT_ENOUGH = 10090;
  RET_LANTERN_RITE_COIN_B_NOT_ENOUGH = 10091;
  RET_LANTERN_RITE_COIN_C_NOT_ENOUGH = 10092;
  RET_LANTERN_RITE_COIN_A_EXCEED_LIMIT = 10093;
  RET_LANTERN_RITE_COIN_B_EXCEED_LIMIT = 10094;
  RET_LANTERN_RITE_COIN_C_EXCEED_LIMIT = 10095;
  RET_LANTERN_RITE_PROJECTION_CONTENT_CLOSED = 10096;
  RET_LANTERN_RITE_PROJECTION_CAN_NOT_START = 10097;
  RET_LANTERN_RITE_DUNGEON_NOT_OPEN = 10098;
  RET_LANTERN_RITE_HAS_TAKEN_SKIN_REWARD = 10099;
  RET_LANTERN_RITE_NOT_FINISHED_SKIN_WATCHERS = 10100;
  RET_LANTERN_RITE_FIREWORKS_CONTENT_CLOSED = 10101;
  RET_LANTERN_RITE_FIREWORKS_CHALLENGE_NOT_START = 10102;
  RET_LANTERN_RITE_FIREWORKS_REFORM_PARAM_ERROR = 10103;
  RET_LANTERN_RITE_FIREWORKS_REFORM_SKILL_LOCK = 10104;
  RET_LANTERN_RITE_FIREWORKS_REFORM_STAMINA_NOT_ENOUGH = 10105;
  RET_POTION_ACTIVITY_STAGE_NOT_OPEN = 10110;
  RET_POTION_ACTIVITY_LEVEL_HAVE_PASS = 10111;
  RET_POTION_ACTIVITY_TEAM_NUM_INCORRECT = 10112;
  RET_POTION_ACTIVITY_AVATAR_IN_CD = 10113;
  RET_POTION_ACTIVITY_BUFF_IN_CD = 10114;
  RET_IRODORI_POETRY_INVALID_LINE_ID = 10120;
  RET_IRODORI_POETRY_INVALID_THEME_ID = 10121;
  RET_IRODORI_POETRY_NOT_GET_ALL_INSPIRATION = 10122;
  RET_IRODORI_POETRY_INSPIRATION_REACH_LIMIE = 10123;
  RET_IRODORI_POETRY_ENTITY_ALREADY_SCANNED = 10124;
  RET_ACTIVITY_BANNER_ALREADY_CLEARED = 10300;
  RET_IRODORI_CHESS_NOT_OPEN = 10301;
  RET_IRODORI_CHESS_LEVEL_NOT_OPEN = 10302;
  RET_IRODORI_CHESS_MAP_NOT_OPEN = 10303;
  RET_IRODORI_CHESS_MAP_CARD_ALREADY_EQUIPED = 10304;
  RET_IRODORI_CHESS_EQUIP_CARD_EXCEED_LIMIT = 10305;
  RET_IRODORI_CHESS_MAP_CARD_NOT_EQUIPED = 10306;
  RET_IRODORI_CHESS_ENTER_FAIL_CARD_EXCEED_LIMIT = 10307;
  RET_ACTIVITY_FRIEND_HAVE_GIFT_LIMIT = 10310;
  RET_GACHA_ACTIVITY_HAVE_REWARD_LIMIT = 10315;
  RET_GACHA_ACTIVITY_HAVE_ROBOT_LIMIT = 10316;
  RET_SUMMER_TIME_V2_COIN_EXCEED_LIMIT = 10317;
  RET_SUMMER_TIME_V2_COIN_NOT_ENOUGH = 10318;
  RET_SUMMER_TIME_V2_DUNGEON_STAGE_NOT_OPEN = 10319;
  RET_SUMMER_TIME_V2_PREV_DUNGEON_NOT_COMPLETE = 10320;
  RET_ROGUE_DIARY_AVATAR_DEATH = 10350;
  RET_ROGUE_DIARY_AVATAR_TIRED = 10351;
  RET_ROGUE_DIARY_AVATAR_DUPLICATED = 10352;
  RET_ROGUE_DIARY_COIN_NOT_ENOUGH = 10353;
  RET_ROGUE_DIARY_VIRTUAL_COIN_EXCEED_LIMIT = 10354;
  RET_ROGUE_DIARY_VIRTUAL_COIN_NOT_ENOUGH = 10355;
  RET_ROGUE_DIARY_CONTENT_CLOSED = 10366;
  RET_GRAVEN_INNOCENCE_COIN_A_NOT_ENOUGH = 10380;
  RET_GRAVEN_INNOCENCE_COIN_B_NOT_ENOUGH = 10381;
  RET_GRAVEN_INNOCENCE_COIN_A_EXCEED_LIMIT = 10382;
  RET_GRAVEN_INNOCENCE_COIN_B_EXCEED_LIMIT = 10383;
  RET_ISLAND_PARTY_STAGE_NOT_OPEN = 10371;
  RET_WIND_FIELD_STAGE_NOT_OPEN = 10390;
  RET_VINTAGE_CONTENT_CLOSED = 10396;
  RET_VINTAGE_STORE_CONTENT_FINISHED = 10397;
  RET_VINTAGE_STORE_ATTR_TOO_SMALL = 10398;
  RET_VINTAGE_STORE_ATTR_TOO_LARGE = 10399;
  RET_VINTAGE_STORE_CONTENT_INTERRUPT = 10400;
  RET_VINTAGE_VIRTUAL_COIN_NOT_ENOUGH = 10401;
  RET_VINTAGE_STORE_ATTR_LESS_THAN_ZERO = 10402;
  RET_FUNGUS_FIGHTER_CAPTURE_COIN_NOT_ENOUGH = 10406;
  RET_FUNGUS_FIGHTER_TRAINING_COIN_NOT_ENOUGH = 10407;
  RET_FUNGUS_FIGHTER_CAPTURE_COIN_EXCEED_LIMIT = 10408;
  RET_FUNGUS_FIGHTER_TRAINING_COIN_EXCEED_LIMIT = 10409;
  RET_FUNGUS_FIGHTER_CONTENT_CLOSED = 10410;
  RET_FUNGUS_FIGHTER_PLOT_STAGE_NOT_OPEN = 10411;
  RET_FUNGUS_FIGHTER_FUNGUS_ID_CONFIG_NOT_VALID = 10412;
  RET_FUNGUS_FIGHTER_FUNGUS_NOT_CULTIVATED = 10413;
  RET_FUNGUS_FIGHTER_TRAINING_DUNGEON_NOT_OPEN = 10414;
  RET_EFFIGY_CHALLENGE_V2_COIN_NOT_ENOUGH = 10427;
  RET_EFFIGY_CHALLENGE_V2_COIN_EXCEED_LIMIT = 10428;
  RET_CHAR_AMUSEMENT_STAGE_NOT_OPEN = 10436;
  RET_COIN_COLLECT_LEVEL_NOT_OPEN = 10446;
  RET_COIN_COLLECT_NOT_EQUIP_WIDGET = 10447;
  RET_COIN_COLLECT_SCENE_NOT_MATCH = 10448;
  RET_COIN_COLLECT_CANT_ENTER_MP_MODE = 10449;
  RET_COIN_COLLECT_PLAYER_NUM_FAIL = 10450;
  RET_BRICK_BREAKER_PLAYER_NUM_FAIL = 10456;
  RET_BRICK_BREAKER_STAGE_NOT_UNLOCK = 10457;
  RET_BRICK_BREAKER_NORMAL_LEVEL_NOT_FINISH = 10458;
  RET_BRICK_BREAKER_PRE_LEVEL_NOT_FINISH = 10459;
  RET_BRICK_BREAKER_PRE_STAGE_NOT_FINISH = 10460;
  RET_BRICK_BREAKER_WORLD_LEVEL_NOT_UNLOCK = 10461;
  RET_BRICK_BREAKER_DUNGEON_LEVEL_NOT_UNLOCK = 10462;
  RET_BRICK_BREAKER_COIN_NOT_ENOUGH = 10463;
  RET_BRICK_BREAKER_COIN_EXCEED_LIMIT = 10464;
  RET_ACTIVITY_CONTENT_CLOSED = 10901;
  RET_NOT_IN_FISHING = 11001;
  RET_FISH_STATE_ERROR = 11002;
  RET_FISH_BAIT_LIMIT = 11003;
  RET_FISHING_MAX_DISTANCE = 11004;
  RET_FISHING_IN_COMBAT = 11005;
  RET_FISHING_BATTLE_TOO_SHORT = 11006;
  RET_FISH_GONE_AWAY = 11007;
  RET_CAN_NOT_EDIT_OTHER_DUNGEON = 11051;
  RET_CUSTOM_DUNGEON_DISMATCH = 11052;
  RET_NO_CUSTOM_DUNGEON_DATA = 11053;
  RET_BUILD_CUSTOM_DUNGEON_FAIL = 11054;
  RET_CUSTOM_DUNGEON_ROOM_CHECK_FAIL = 11055;
  RET_CUSTOM_DUNGEON_SAVE_MAY_FAIL = 11056;
  RET_NOT_IN_CUSTOM_DUNGEON = 11057;
  RET_CUSTOM_DUNGEON_INTERNAL_FAIL = 11058;
  RET_CUSTOM_DUNGEON_CAN_NOT_TRY = 11059;
  RET_CUSTOM_DUNGEON_NO_START_ROOM = 11060;
  RET_CUSTOM_DUNGEON_NO_ROOM_DATA = 11061;
  RET_CUSTOM_DUNGEON_SAVE_TOO_FREQUENT = 11062;
  RET_CUSTOM_DUNGEON_NOT_SELF_PASS = 11063;
  RET_CUSTOM_DUNGEON_LACK_COIN = 11064;
  RET_CUSTOM_DUNGEON_NO_FINISH_BRICK = 11065;
  RET_CUSTOM_DUNGEON_MULTI_FINISH = 11066;
  RET_CUSTOM_DUNGEON_NOT_PUBLISHED = 11067;
  RET_CUSTOM_DUNGEON_FULL_STORE = 11068;
  RET_CUSTOM_DUNGEON_STORE_REPEAT = 11069;
  RET_CUSTOM_DUNGEON_CAN_NOT_STORE_SELF = 11070;
  RET_CUSTOM_DUNGEON_NOT_SAVE_SUCC = 11071;
  RET_CUSTOM_DUNGEON_CAN_NOT_LIKE_SELF = 11072;
  RET_CUSTOM_DUNGEON_NOT_FOUND = 11073;
  RET_CUSTOM_DUNGEON_INVALID_SETTING = 11074;
  RET_CUSTOM_DUNGEON_NO_FINISH_SETTING = 11075;
  RET_CUSTOM_DUNGEON_SAVE_NOTHING = 11076;
  RET_CUSTOM_DUNGEON_NOT_IN_GROUP = 11077;
  RET_CUSTOM_DUNGEON_NOT_OFFICIAL = 11078;
  RET_CUSTOM_DUNGEON_LIFE_NUM_ERROR = 11079;
  RET_CUSTOM_DUNGEON_NO_OPEN_ROOM = 11080;
  RET_CUSTOM_DUNGEON_BRICK_EXCEED_LIMIT = 11081;
  RET_CUSTOM_DUNGEON_OFFICIAL_NOT_UNLOCK = 11082;
  RET_CAN_NOT_EDIT_OFFICIAL_SETTING = 11083;
  RET_CUSTOM_DUNGEON_BAN_PUBLISH = 11084;
  RET_CUSTOM_DUNGEON_CAN_NOT_REPLAY = 11085;
  RET_CUSTOM_DUNGEON_NOT_OPEN_GROUP = 11086;
  RET_CUSTOM_DUNGEON_MAX_EDIT_NUM = 11087;
  RET_CUSTOM_DUNGEON_CAN_NOT_OUT_STUCK = 11088;
  RET_CUSTOM_DUNGEON_MAX_TAG = 11089;
  RET_CUSTOM_DUNGEON_INVALID_TAG = 11090;
  RET_CUSTOM_DUNGEON_MAX_COST = 11091;
  RET_CUSTOM_DUNGEON_REQUEST_TOO_FREQUENT = 11092;
  RET_CUSTOM_DUNGEON_NOT_OPEN = 11093;
  RET_SHARE_CD_ID_ERROR = 11101;
  RET_SHARE_CD_INDEX_ERROR = 11102;
  RET_SHARE_CD_IN_CD = 11103;
  RET_SHARE_CD_TOKEN_NOT_ENOUGH = 11104;
  RET_UGC_DISMATCH = 11151;
  RET_UGC_DATA_NOT_FOUND = 11152;
  RET_UGC_BRIEF_NOT_FOUND = 11153;
  RET_UGC_DISABLED = 11154;
  RET_UGC_LIMITED = 11155;
  RET_UGC_LOCKED = 11156;
  RET_UGC_NOT_AUTH = 11157;
  RET_UGC_NOT_OPEN = 11158;
  RET_UGC_BAN_PUBLISH = 11159;
  RET_COMPOUND_BOOST_ITEM_NOT_EXIST = 11201;
  RET_COMPOUND_BOOST_TARGET_NOT_EXIST = 11202;
  RET_QUICK_HIT_TREE_EMPTY_TREES = 11211;
  RET_GCG_FIND_GAME_MODE_FAIL = 12000;
  RET_GCG_OPERATION_PARAM_ERROR = 12001;
  RET_GCG_GAME_NOT_RUNNING = 12002;
  RET_GCG_OP_NOT_ALLOW = 12003;
  RET_GCG_OP_NOT_MATCH_PHASE = 12004;
  RET_GCG_SELECT_HAND_CARD_GUID_ERROR = 12005;
  RET_GCG_DICE_INDEX_INVALID = 12006;
  RET_GCG_CHARACTER_GUID_INVALID = 12007;
  RET_GCG_CHARACTER_ALREADY_DIE = 12008;
  RET_GCG_CHARACTER_ALREADY_ON_STAGE = 12009;
  RET_GCG_CHARACTER_FORBIDDEN_ATTACK = 12010;
  RET_GCG_SELECT_DICE_NOT_MATCH = 12011;
  RET_GCG_FIND_SKILL_FAIL = 12012;
  RET_GCG_SKILL_CAN_NOT_ACTIVE_USE = 12013;
  RET_GCG_ENERGY_NOT_ENOUGH = 12014;
  RET_GCG_PLAY_CARD_TARGET_NOT_MATCH = 12015;
  RET_GCG_PLAY_CARD_ZONE_CANNOT_ADD = 12016;
  RET_GCG_REBOOT_SELECT_DICE_INVALID = 12017;
  RET_GCG_REBOOT_SELECT_CARD_INVALID = 12018;
  RET_GCG_PLAY_CARD_CONDITION_CHECK_FAIL = 12019;
  RET_GCG_PLAY_CARD_PARAM_INVALID = 12020;
  RET_GCG_MAX_GAME = 12021;
  RET_GCG_SEND_PACKET_FAIL = 12022;
  RET_GCG_ALREADY_SETTLE = 12023;
  RET_GCG_COIN_EXCEED_LIMIT = 12101;
  RET_GCG_COIN_NOT_ENOUGH = 12102;
  RET_GCG_NOT_IN_SELF_WORLD = 12103;
  RET_GCG_ALREADY_IN_DUEL = 12104;
  RET_GCG_NOT_IN_PLAYER_WORLD = 12105;
  RET_GCG_GALLERY_STARTED = 12106;
  RET_GCG_INVITE_TARGET_IS_SELF = 12107;
  RET_GCG_INVITE_TARGET_NOT_IN_WORLD = 12108;
  RET_GCG_APPLY_INVITE_NOT_ALLOW = 12109;
  RET_GCG_APPLY_INVITE_TIMEOUT = 12110;
  RET_GCG_CUR_DECK_INVALID = 12111;
  RET_GCG_NEED_RESOURCE_COMPLETE = 12112;
  RET_GCG_OPPONENT_PLAYER_IS_SELF = 12113;
  RET_GCG_GAME_ID_INVALID = 12114;
  RET_GCG_MATCH_IN_PUNISH = 12115;
  RET_GCG_SETTLE_STILL_IN_DUEL = 12116;
  RET_GCG_SETTLE_NOT_IN_DUNGEON = 12117;
  RET_GCG_UNSUPPORT_SETTLE_OPTION = 12118;
  RET_GCG_NOT_IN_GCG_DUNGEON = 12119;
  RET_GCG_WORLD_LEVEL_LOCKED = 12120;
  RET_GCG_BOSS_LEVEL_LOCKED = 12121;
  RET_GCG_NOT_IN_TAVERN = 12122;
  RET_GCG_WEEK_NPC_NOT_EXIST = 12123;
  RET_GCG_ENTER_GAME_FREQUENT = 12124;
  RET_GCG_BREAK_LEVEL_QUEST_NOT_UNFINISHED = 12125;
  RET_GCG_GUIDE_LEVEL_ALREADY_FINISHED = 12126;
  RET_GCG_LEVEL_CANNOT_RESTART = 12127;
  RET_GCG_TARGET_CHECK_ENTER_FAIL = 12128;
  RET_GCG_ALREADY_IN_DUNGEON = 12129;
  RET_GCG_BACK_DUEL_NO_GAME = 12130;
  RET_GCG_CONST_LEVEL_LOCKED = 12131;
  RET_GCG_QUEST_ID_ERROR = 12132;
  RET_GCG_QUEST_NEED_UNFINISHED = 12133;
  RET_GCG_IN_MATCH = 12134;
  RET_GCG_DATA_VERSION_NOT_LATEST = 12135;
  RET_GCG_INVITE_TARGET_ENTER_GAME_FREQUENT = 12136;
  RET_GCG_INVITE_TARGET_NEED_RESOURCE_COMPLETE = 12137;
  RET_GCG_INVITE_TARGET_SCENE_IS_NULL = 12138;
  RET_GCG_INVITE_TARGET_IN_TRANSFER = 12139;
  RET_GCG_INVITE_TARGET_DATA_VERSION_NOT_LATEST = 12140;
  RET_GCG_INVITE_TARGET_CUR_DECK_INVALID = 12141;
  RET_GCG_CLIENT_DATA_VERSION_NOT_MATCH = 12142;
  RET_GCG_CLIENT_DATA_VERSOIN_FORBID = 12143;
  RET_GCG_MP_CANT_MATCH = 12144;
  RET_GCG_INVITE_TARGET_STATE_NOT_OPEN = 12145;
  RET_GCG_CREATE_TIME_OUT = 12146;
  RET_GCG_BAN_MATCH = 12147;
  RET_GCG_BAN_INVITE = 12148;
  RET_GCG_TARGET_BAN_INVITE = 12149;
  RET_GCG_INVITE_ALREADY_INVITE = 12150;
  RET_GCG_BACK_DUEL_PS_TO_OTHER = 12153;
  RET_GCG_BACK_DUEL_OTHER_TO_PS = 12154;
  RET_GCG_DS_DECK_LOCKED = 12201;
  RET_GCG_DS_DECK_NAME_INVALID = 12202;
  RET_GCG_DS_DECK_CHAR_CARD_NUM_INVALID = 12204;
  RET_GCG_DS_DECK_CARD_NUM_INVALID = 12205;
  RET_GCG_DS_CARD_NUM_EXCEED_LIMIT = 12206;
  RET_GCG_DS_DECK_INVALID = 12207;
  RET_GCG_DS_CARD_ID_INVALID = 12208;
  RET_GCG_DS_CARD_FACE_ALREADY_UNLOCK = 12209;
  RET_GCG_DS_CARD_FACE_IS_LOCK = 12210;
  RET_GCG_DS_FIELD_LOCK = 12211;
  RET_GCG_DS_FIELD_ALREADY_UNLOCK = 12212;
  RET_GCG_DS_FIELD_ID_INVALID = 12213;
  RET_GCG_DS_CARD_BACK_LOCKED = 12214;
  RET_GCG_DS_CARD_BACK_ALREADY_UNLOCK = 12215;
  RET_GCG_DS_CARD_BACK_ID_INVALID = 12216;
  RET_GCG_DS_CARD_FACE_ID_INVALID = 12217;
  RET_GCG_DS_DECK_NAME_ILLEGAL = 12218;
  RET_GCG_DS_DECK_SAVE_CD = 12219;
  RET_GCG_DS_DECK_CHANGE_NAME_CD = 12220;
  RET_GCG_MATCH_DECK_INVALID = 12221;
  RET_GCG_DS_DECK_ALREADY_UNLOCKED = 12222;
  RET_GCG_DS_AT_LEAST_ONE_DECK = 12223;
  RET_GCG_TC_CHARACTERNOT_MATCH_LEVEL = 12251;
  RET_GCG_TC_MUST_IN_SELF_WORLD = 12252;
  RET_GCG_TC_MUST_IN_TAVERN = 12253;
  RET_GCG_TC_ALREADY_IN_GAME = 12254;
  RET_GCG_TC_ALREADY_IN_MATCH = 12255;
  RET_GCG_TC_UNLOCK_CHARACTER_QUEST_NOT_FINISH = 12256;
  RET_GCG_TC_LEVEL_LOCKED = 12257;
  RET_GCG_TC_NO_INVITE_DATA = 12258;
  RET_GCG_TC_CUR_DECK_INVALID = 12259;
  RET_GCG_TC_COND_QUEST = 12260;
  RET_GCG_LEVEL_REWARD_LEVEL_ERROR = 12301;
  RET_GCG_LEVEL_REWARD_ALREADY_TAKEN = 12302;
  RET_GCG_LEVEL_REWARD_NO_REWARD = 12303;
}


message RetryCurRogueDiaryDungeonReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8696;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}


message RetryCurRogueDiaryDungeonRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8269;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 13;
}

import "ReunionBriefInfo.proto";

message ReunionActivateNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5071;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  bool is_activate = 7;
  ReunionBriefInfo reunion_brief_info = 9;
}

import "ReunionPrivilegeInfo.proto";

message ReunionBriefInfo {
  uint32 first_day_start_time = 1;
  string version = 11;
  uint32 mission_id = 6;
  uint32 finish_time = 2;
  bool Unk3300_OKGAAEDENEI = 13;
  uint32 privilege_id = 5;
  ReunionPrivilegeInfo privilege_info = 10;
  uint32 start_time = 14;
  uint32 first_gift_reward_id = 9;
  bool Unk3300_ODKLPOMKKPD = 8;
  bool Unk3300_MHHLEJIFFIM = 7;
  uint32 sign_in_config_id = 12;
}


message ReunionBriefInfoReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5092;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}

import "ReunionBriefInfo.proto";

message ReunionBriefInfoRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5091;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 2;
  ReunionBriefInfo reunion_brief_info = 13;
  bool is_activate = 15;
}

import "ReunionBriefInfo.proto";

message ReunionDailyRefreshNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5054;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  ReunionBriefInfo reunion_brief_info = 6;
}

import "ReunionWatcherInfo.proto";

message ReunionMissionInfo {
  bool is_taken_reward = 10;
  bool is_finished = 13;
  repeated ReunionWatcherInfo watcher_list = 15;
  repeated ReunionWatcherInfo cur_day_watcher_list = 8;
  uint32 next_refresh_time = 5;
  repeated bool is_taken_reward_list = 4;
  uint32 mission_id = 9;
  uint32 cur_score = 2;
}

import "ReunionPrivilegeInfo.proto";

message ReunionPrivilegeChangeNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5087;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  ReunionPrivilegeInfo privilege_info = 10;
}


message ReunionPrivilegeInfo {
  uint32 Unk3300_GJBEAFPMFAA = 14;
  uint32 privilege_id = 2;
  uint32 Unk3300_ALOLACFGMHI = 1;
}


message ReunionSettleNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5080;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }
}


message ReunionSignInInfo {
  uint32 Unk3300_MNJELIDKMCF = 3;
  repeated uint32 reward_day_list = 12;
  uint32 config_id = 8;
  uint32 Unk3300_NFNOKBNBLGE = 10;
}


message ReunionWatcherInfo {
  uint32 total_progress = 4;
  uint32 reward_unlock_time = 1;
  uint32 watcher_id = 9;
  bool is_taken_reward = 12;
  uint32 cur_progress = 10;
}

import "ItemParam.proto";

message Reward {
  uint32 reward_id = 1;
  repeated ItemParam item_list = 2;
}


message RobotPushPlayerDataNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 99;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  bytes bin = 7;
}

import "RockBoardExploreStageData.proto";

message RockBoardExploreDetailInfo {
  repeated RockBoardExploreStageData stage_data_list = 13;
}


message RockBoardExploreStageData {
  bool is_finish = 8;
  bool is_open = 9;
  uint32 open_time = 12;
  uint32 stage_id = 13;
}


message RogueAvatarInfo {
  bool is_onstage = 2;
  bool is_alive = 8;
  uint32 avatar_id = 5;
}

import "RogueCellState.proto";

message RogueCellInfo {
  uint32 dungeon_id = 1;
  uint32 cell_config_id = 14;
  uint32 cell_id = 2;
  RogueCellState state = 9;
  uint32 cell_type = 13;
}


enum RogueCellState {
  ROGUE_CELL_STATE_NONE = 0;
  ROGUE_CELL_STATE_BATTLE = 1;
  ROGUE_CELL_STATE_SUCCESS = 2;
  ROGUE_CELL_STATE_FINISH = 3;
  ROGUE_CELL_STATE_TAKEN_CHEST = 4;
}

import "RogueCellInfo.proto";

message RogueCellUpdateNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8851;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  RogueCellInfo cell_info = 5;
}

import "RogueDiaryProgress.proto";
import "RogueDiaryStageInfo.proto";

message RogueDiaryActivityDetailInfo {
  bool is_content_closed = 3;
  repeated RogueDiaryStageInfo stage_list = 11;
  bool is_have_progress = 5;
  RogueDiaryProgress cur_progress = 10;
}

import "ActivityDungeonAvatar.proto";
import "RogueDiaryAvatarDisableStatus.proto";

message RogueDiaryAvatar {
  uint32 level = 10;
  repeated RogueDiaryAvatarDisableStatus disable_status_list = 7;
  uint32 tired_round = 2;
  ActivityDungeonAvatar avatar = 14;
}


enum RogueDiaryAvatarDisableStatus {
  ROGUE_DIARY_AVATAR_DISABLE_STATUS_NONE = 0;
  ROGUE_DIARY_AVATAR_DISABLE_STATUS_DEATH = 1;
  ROGUE_DIARY_AVATAR_DISABLE_STATUS_TIRED = 2;
  ROGUE_DIARY_AVATAR_DISABLE_STATUS_DUPLICATED = 3;
}


message RogueDiaryCoinAddNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8525;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 num = 11;
}

import "RogueDiaryRoomInfo.proto";

message RogueDiaryDungeonInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8096;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 stage_id = 12;
  uint32 time = 9;
  repeated uint32 Unk3300_MMBEJGDFCGE = 6;
  uint32 cur_room = 1;
  repeated uint32 Unk3300_DKCFGLAKPJL = 8;
  uint32 dungeon_id = 7;
  repeated RogueDiaryRoomInfo room_list = 5;
  uint32 difficulty = 14;
  uint32 cur_round = 10;
  uint32 coin = 3;
}


message RogueDiaryDungeonRecord {
  uint32 finish_time = 14;
  bool is_finish = 10;
  uint32 difficulty = 5;
  uint32 max_round = 7;
}


message RogueDiaryDungeonSettleNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8726;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  bool is_finish = 14;
  uint32 cur_round = 11;
  uint32 explore_time = 4;
}


message RogueDiaryProgress {
  uint32 difficulty = 10;
  bool is_enter_dungeon = 3;
  uint32 stage_id = 6;
  repeated uint32 optional_card_list = 5;
  uint32 cur_round = 4;
}

import "RogueDiaryAvatar.proto";
import "RogueDiaryRoomInfo.proto";

message RogueDiaryRepairInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8084;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated RogueDiaryAvatar avatar_list = 2;
  repeated RogueDiaryAvatar trial_avatar_list = 10;
  repeated RogueDiaryRoomInfo room_list = 11;
  repeated uint32 select_card_list = 12;
  repeated uint32 chosen_card_list = 5;
  uint32 stage_id = 7;
  repeated RogueDiaryAvatar select_avatar_list = 3;
  repeated uint32 rand_card_list = 13;
}

import "RogueDiaryAvatar.proto";

message RogueDiaryReviveAvatarReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8678;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  RogueDiaryAvatar revive_avatar = 15;
}


message RogueDiaryReviveAvatarRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8061;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 9;
}

import "Uint32Pair.proto";

message RogueDiaryRoomInfo {
  bool is_boss = 6;
  uint32 config_id = 3;
  repeated Uint32Pair monster_list = 4;
}

import "RogueDiaryDungeonRecord.proto";

message RogueDiaryStageInfo {
  uint32 stage_id = 15;
  RogueDiaryDungeonRecord best_record = 9;
  bool is_have_try = 11;
}

import "RogueDiaryAvatar.proto";

message RogueDiaryTiredAvatarNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8660;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 Unk3300_DMEMBBPEIGK = 1;
  uint32 Unk3300_BGEJGLBMFII = 14;
  bool is_need_show = 11;
  repeated RogueDiaryAvatar optional_tired_avatar_list = 5;
}


message RogueDungeonPlayerCellChangeNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8093;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 cell_id = 4;
  uint32 old_cell_id = 7;
}


message RogueEffectRecord {
  uint32 source_id = 9;
  bool is_new = 8;
  uint32 count = 3;
  repeated uint32 extra_param_list = 15;
}


enum RogueEliteCellDifficultyType {
  ROGUE_ELITE_CELL_DIFFICULTY_TYPE_NORMAL = 0;
  ROGUE_ELITE_CELL_DIFFICULTY_TYPE_HARD = 1;
}

import "RogueDiaryAvatar.proto";

message RogueFinishRepairReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8483;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated RogueDiaryAvatar chosen_avatar_list = 14;
  repeated uint32 chosen_card_list = 15;
}


message RogueFinishRepairRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8503;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 8;
}


message RogueHealAvatarsReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8175;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 cell_id = 2;
  uint32 dungeon_id = 15;
}


message RogueHealAvatarsRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8252;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 dungeon_id = 3;
  uint32 cell_id = 8;
  int32 retcode = 9;
}


message RoguelikeCardGachaNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8057;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  bool is_can_refresh = 7;
  repeated uint32 card_list = 15;
}

import "RogueStageInfo.proto";
import "RoguelikeShikigamiRecord.proto";

message RoguelikeDungeonActivityDetailInfo {
  repeated RogueStageInfo stage_list = 14;
  repeated uint32 equipped_rune_list = 9;
  uint32 content_close_time = 11;
  repeated uint32 rune_list = 3;
  repeated RoguelikeShikigamiRecord shikigami_list = 4;
  bool is_content_closed = 5;
}

import "RoguelikeSettleCoinInfo.proto";

message RoguelikeDungeonSettleInfo {
  uint32 stage_id = 9;
  uint32 Unk3300_GMMECMPDJMI = 8;
  uint32 Unk3300_PBELMOJKKHP = 4;
  uint32 cur_level = 14;
  bool Unk3300_AHIEENGKPFA = 10;
  bool Unk3300_BPLKJMIOKHM = 15;
  map<uint32, RoguelikeSettleCoinInfo> finished_challenge_cell_num_map = 6;
}

import "RogueEffectRecord.proto";

message RoguelikeEffectDataNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8544;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated RogueEffectRecord card_list = 3;
  repeated RogueEffectRecord curse_list = 8;
}


message RoguelikeEffectViewReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8605;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated uint32 Unk3300_FKGJGIJHKJI = 10;
  repeated uint32 Unk3300_LMIIAEPBKNB = 15;
}


message RoguelikeEffectViewRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8437;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  int32 retcode = 8;
}


message RoguelikeGadgetInfo {
  uint32 cell_config_id = 1;
  uint32 cell_type = 2;
  uint32 cell_state = 3;
  uint32 cell_id = 4;
}


message RoguelikeGiveUpReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8442;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 stage_id = 3;
}

import "RoguelikeDungeonSettleInfo.proto";

message RoguelikeGiveUpRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8905;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 6;
  uint32 stage_id = 14;
  oneof info {
    RoguelikeDungeonSettleInfo settle_info = 2;
  }
}


message RoguelikeMistClearNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8768;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }
}


message RoguelikeRefreshCardCostUpdateNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8210;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 item_count = 13;
  uint32 item_id = 15;
}


message RoguelikeResourceBonusPropUpdateNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8426;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  float bonus_resource_prop = 5;
}


message RoguelikeRuneRecord {
  uint32 rune_id = 10;
  uint32 Unk3300_JLOLMLFAPHH = 1;
  uint32 Unk3300_IGBOJLPPKON = 11;
}

import "RoguelikeRuneRecord.proto";

message RoguelikeRuneRecordUpdateNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8629;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated RoguelikeRuneRecord rune_record_list = 11;
}


message RoguelikeSelectAvatarAndEnterDungeonReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8988;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 stage_id = 1;
  repeated uint64 onstage_avatar_guid_list = 12;
  repeated uint64 backstage_avatar_guid_list = 4;
}


message RoguelikeSelectAvatarAndEnterDungeonRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8910;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 15;
  uint32 stage_id = 1;
}


message RoguelikeSettleCoinInfo {
  uint32 Unk3300_MFKOIMONCLA = 10;
  uint32 Unk3300_LFEKGBBAMHE = 12;
  uint32 coin_c = 6;
}


message RoguelikeShikigamiRecord {
  uint32 id = 2;
  uint32 level = 10;
}


message RoguelikeTakeStageFirstPassRewardReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8531;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 stage_id = 2;
}


message RoguelikeTakeStageFirstPassRewardRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8182;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 stage_id = 15;
  int32 retcode = 10;
}


message RogueResumeDungeonReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8275;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 stage_id = 9;
}


message RogueResumeDungeonRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8772;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 stage_id = 15;
  int32 retcode = 5;
}

import "RogueAvatarInfo.proto";

message RogueShowAvatarTeamInfo {
  repeated RogueAvatarInfo avatar_list = 13;
}

import "RogueShowAvatarTeamInfo.proto";
import "RoguelikeRuneRecord.proto";

message RogueStageInfo {
  uint32 revise_monster_level = 1966;
  bool is_passed = 11;
  uint32 Unk3300_GGHMFKNHPAJ = 2;
  RogueShowAvatarTeamInfo avatar_team = 8;
  bool is_taken_reward = 9;
  bool is_explored = 14;
  repeated RoguelikeRuneRecord rune_record_list = 5;
  bool is_in_combat = 6;
  uint32 coin_c_num = 3;
  bool is_open = 13;
  uint32 stage_id = 7;
  uint32 max_passed_level = 4;
  uint32 cur_level = 12;
  uint32 Unk3300_OHHBEPOICLI = 1;
  uint32 Unk3300_HPKFHLLCJBM = 275;
}


message RogueSwitchAvatarReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8399;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated uint64 onstage_avatar_guid_list = 8;
  uint32 dungeon_id = 10;
  uint32 cell_id = 11;
  uint64 cur_avatar_guid = 4;
}


message RogueSwitchAvatarRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8445;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint64 backstage_avatar_guid_list = 3;
  uint32 dungeon_id = 15;
  repeated uint64 onstage_avatar_guid_list = 8;
  uint32 cell_id = 1;
  uint64 cur_avatar_guid = 5;
  int32 retcode = 7;
}

import "RoutePoint.proto";

message Route {
  repeated RoutePoint route_points = 1;
  uint32 route_type = 2;
}

import "MathQuaternion.proto";
import "Vector.proto";

message RoutePoint {
  Vector position = 1;
  float arrive_range = 2;
  bool has_reach_event = 3;
  oneof move_params {
    float velocity = 11;
    float time = 12;
  }
  oneof rotate_params {
    Vector rotation = 21;
    MathQuaternion rotation_speed = 22;
    MathQuaternion axis_speed = 23;
  }
}


message RoutePointChangeInfo {
  float target_velocity = 12;
  float wait_time = 14;
  uint32 point_index = 4;
}

import "SalesmanStatusType.proto";

message SalesmanActivityDetailInfo {
  SalesmanStatusType status = 5;
  map<uint32, uint32> selected_reward_id_map = 12;
  uint32 Unk3300_DIJFOCBGIAM = 7;
  bool Unk3300_DJFCEFKGKPI = 2;
  uint32 day_index = 9;
  uint32 Unk3300_LPABHMOPFCE = 6;
  uint32 Unk3300_KNJCBGFKLFD = 10;
  uint32 Unk3300_FOFFAEEBBNP = 3;
  bool Unk3300_JNALBACFNFN = 14;
  uint32 day_reward_id = 11;
}


message SalesmanDeliverItemReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2057;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 schedule_id = 4;
}


message SalesmanDeliverItemRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2151;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 4;
  uint32 schedule_id = 8;
}


enum SalesmanStatusType {
  SALESMAN_STATUS_TYPE_NONE = 0;
  SALESMAN_STATUS_TYPE_UNSTARTED = 1;
  SALESMAN_STATUS_TYPE_STARTED = 2;
  SALESMAN_STATUS_TYPE_DELIVERED = 3;
}


message SalesmanTakeRewardReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2069;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 position = 15;
  uint32 schedule_id = 14;
}


message SalesmanTakeRewardRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2026;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 reward_id = 12;
  int32 retcode = 4;
  uint32 position = 15;
  uint32 schedule_id = 2;
}


message SalesmanTakeSpecialRewardReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2067;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 schedule_id = 11;
}


message SalesmanTakeSpecialRewardRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2044;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 schedule_id = 6;
  int32 retcode = 7;
}


message SalvageBundleChallengeInfo {
  repeated uint32 finished_bundle_list = 11;
}

import "SalvageBundleChallengeInfo.proto";
import "SalvageScoreChallengeInfo.proto";

message SalvageChallengeInfo {
  uint32 challenge_type = 11;
  bool is_unlock = 14;
  oneof challenge_detail {
    SalvageBundleChallengeInfo bundle_info = 2;
    SalvageScoreChallengeInfo score_challenge_info = 9;
    uint32 boss_challenge_id = 12;
  }
}

import "SalvageEscortStopReason.proto";

message SalvageEscortGallerySettleInfo {
  uint32 time_remain = 15;
  SalvageEscortStopReason reason = 11;
}


message SalvageEscortRestartReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8520;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 gallery_id = 1;
}


message SalvageEscortRestartRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8553;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 gallery_id = 7;
  int32 retcode = 8;
}

import "SalvageEscortGallerySettleInfo.proto";

message SalvageEscortSettleInfo {
  SalvageEscortGallerySettleInfo settle_info = 6;
  bool is_new_record = 2;
}

import "SalvageEscortSettleInfo.proto";

message SalvageEscortSettleNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8798;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  SalvageEscortSettleInfo settle_info = 1;
  uint32 gallery_id = 6;
}


enum SalvageEscortStopReason {
  SALVAGE_ESCORT_STOP_REASON_NONE = 0;
  SALVAGE_ESCORT_STOP_REASON_SUCCESS = 1;
  SALVAGE_ESCORT_STOP_REASON_DUMP = 2;
  SALVAGE_ESCORT_STOP_REASON_TIME = 3;
  SALVAGE_ESCORT_STOP_REASON_INTERRUPT = 4;
  SALVAGE_ESCORT_STOP_REASON_LEAVE = 5;
  SALVAGE_ESCORT_STOP_REASON_FULL = 6;
}

import "SalvagePreventStopReason.proto";

message SalvagePreventGallerySettleInfo {
  uint32 monster_count = 2;
  SalvagePreventStopReason reason = 11;
  uint32 final_score = 4;
  uint32 time_remain = 8;
}


message SalvagePreventRestartReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8796;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 gallery_id = 7;
}


message SalvagePreventRestartRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8493;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 7;
  uint32 gallery_id = 6;
}

import "SalvagePreventGallerySettleInfo.proto";

message SalvagePreventSettleInfo {
  SalvagePreventGallerySettleInfo settle_info = 4;
  bool is_new_record = 12;
}

import "SalvagePreventSettleInfo.proto";

message SalvagePreventSettleNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8435;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 gallery_id = 13;
  SalvagePreventSettleInfo settle_info = 11;
}


enum SalvagePreventStopReason {
  SALVAGE_PREVENT_STOP_REASON_NONE = 0;
  SALVAGE_PREVENT_STOP_REASON_SUCCESS = 1;
  SALVAGE_PREVENT_STOP_REASON_ARRIVAL = 2;
  SALVAGE_PREVENT_STOP_REASON_INTERRUPT = 3;
  SALVAGE_PREVENT_STOP_REASON_LEAVE = 4;
  SALVAGE_PREVENT_STOP_REASON_FULL = 5;
  SALVAGE_PREVENT_STOP_REASON_AWAY = 6;
}


message SalvageScoreChallengeInfo {
  uint32 max_score = 8;
  uint32 salvage_challenge_id = 10;
}

import "SalvageChallengeInfo.proto";

message SalvageStageInfo {
  uint32 stage_id = 13;
  repeated SalvageChallengeInfo challenge_info_list = 3;
  bool is_open = 7;
}


message SaveCoopDialogReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1954;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 Unk3300_AMKDDJEPAKM = 10;
  uint32 Unk3300_KMBGNIICNAF = 8;
}


message SaveCoopDialogRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1960;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 5;
  uint32 Unk3300_AMKDDJEPAKM = 15;
  uint32 Unk3300_KMBGNIICNAF = 9;
}

import "CustomDungeonRoom.proto";
import "CustomDungeonSetting.proto";

message SaveCustomDungeonRoomReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 6222;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  CustomDungeonSetting setting = 1;
  CustomDungeonRoom custom_dungeon_room = 4;
  bool is_update_setting = 12;
}

import "CustomDungeonBlock.proto";

message SaveCustomDungeonRoomRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 6235;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 9;
  uint32 room_id = 3;
  repeated CustomDungeonBlock error_block_list = 8;
}


message SaveMainCoopReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1972;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  map<uint32, int32> normal_var_map = 14;
  uint32 self_confidence = 6;
  uint32 id = 13;
  uint32 save_point_id = 2;
  map<uint32, int32> temp_var_map = 12;
}


message SaveMainCoopRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1985;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 id = 11;
  repeated uint32 save_point_id_list = 3;
  int32 retcode = 6;
}

import "UgcMusicBriefInfo.proto";
import "UgcMusicRecord.proto";
import "UgcType.proto";

message SaveUgcReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 6344;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  UgcType ugc_type = 3;
  oneof record {
    UgcMusicRecord music_record = 11;
  }
  oneof brief {
    UgcMusicBriefInfo music_brief_info = 260;
  }
}

import "UgcType.proto";

message SaveUgcRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 6317;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint64 ugc_guid = 9;
  int32 retcode = 8;
  UgcType ugc_type = 2;
}


message SceneAreaUnlockNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 207;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 scene_id = 1;
  repeated uint32 area_list = 5;
}


message SceneAreaWeatherNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 250;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 weather_gadget_id = 6;
  map<uint32, string> weather_value_map = 11;
  uint32 climate_type = 7;
  float trans_duration = 10;
  uint32 weather_area_id = 15;
}


message SceneAudioNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3009;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 source_uid = 6;
  repeated float param2 = 11;
  repeated string param3 = 13;
  int32 type = 15;
  repeated uint32 param1 = 14;
}

import "AvatarExcelInfo.proto";
import "CurVehicleInfo.proto";
import "SceneReliquaryInfo.proto";
import "SceneWeaponInfo.proto";
import "ServerBuff.proto";

message SceneAvatarInfo {
  uint32 uid = 1;
  uint32 avatar_id = 2;
  uint64 guid = 3;
  uint32 peer_id = 4;
  repeated uint32 equip_id_list = 5;
  uint32 skill_depot_id = 6;
  repeated uint32 talent_id_list = 7;
  SceneWeaponInfo weapon = 8;
  repeated SceneReliquaryInfo reliquary_list = 9;
  uint32 core_proud_skill_level = 11;
  repeated uint32 inherent_proud_skill_list = 12;
  map<uint32, uint32> skill_level_map = 13;
  map<uint32, uint32> proud_skill_extra_level_map = 14;
  repeated ServerBuff server_buff_list = 15;
  repeated uint32 team_resonance_list = 16;
  uint32 wearing_flycloak_id = 17;
  uint32 born_time = 18;
  uint32 costume_id = 19;
  CurVehicleInfo cur_vehicle_info = 20;
  AvatarExcelInfo excel_info = 21;
  uint32 anim_hash = 22;
}

import "Vector.proto";

message SceneAvatarStaminaStepReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 257;
  //   ENET_CHANNEL_ID = 1;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  bool use_client_rot = 9;
  Vector rot = 12;
}

import "Vector.proto";

message SceneAvatarStaminaStepRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 227;
  //   ENET_CHANNEL_ID = 1;
  //   ENET_IS_RELIABLE = 1;
  // }

  Vector rot = 1;
  bool use_client_rot = 9;
  int32 retcode = 7;
}

import "CreateEntityInfo.proto";
import "CreateReason.proto";

message SceneCreateEntityReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 294;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  CreateReason reason = 4;
  CreateEntityInfo entity = 8;
  bool is_destroy_when_disconnect = 15;
}

import "CreateEntityInfo.proto";

message SceneCreateEntityRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 272;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 15;
  CreateEntityInfo entity = 4;
  uint32 entity_id = 5;
}


message SceneDataNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3368;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint32 scene_tag_id_list = 3;
  repeated string level_config_name_list = 6;
}


message SceneDestroyEntityReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 203;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 entity_id = 11;
}


message SceneDestroyEntityRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 233;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 entity_id = 15;
  int32 retcode = 5;
}

import "EntityMoveInfo.proto";

message SceneEntitiesMoveCombineNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3452;
  //   ENET_CHANNEL_ID = 1;
  // }

  repeated EntityMoveInfo entity_move_info_list = 14;
}

import "EntityMoveInfo.proto";

message SceneEntitiesMovesReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 292;
  //   ENET_CHANNEL_ID = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated EntityMoveInfo entity_move_info_list = 11;
}

import "EntityMoveFailInfo.proto";

message SceneEntitiesMovesRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 245;
  //   ENET_CHANNEL_ID = 1;
  // }

  repeated EntityMoveFailInfo entity_move_fail_info_list = 10;
}

import "ServantInfo.proto";
import "Vector.proto";

message SceneEntityAiInfo {
  bool is_ai_open = 1;
  Vector born_pos = 2;
  map<uint32, uint32> skill_cd_map = 3;
  ServantInfo servant_info = 4;
  map<uint32, uint32> ai_threat_map = 5;
  map<uint32, uint32> skill_group_cd_map = 6;
  uint32 cur_tactic = 7;
}

import "SceneEntityInfo.proto";
import "VisionType.proto";

message SceneEntityAppearNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 243;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated SceneEntityInfo entity_list = 15;
  VisionType appear_type = 1;
  uint32 param = 7;
}

import "VisionType.proto";

message SceneEntityDisappearNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 261;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 param = 15;
  VisionType disappear_type = 12;
  repeated uint32 entity_list = 13;
}


message SceneEntityDrownReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 217;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 entity_id = 14;
}


message SceneEntityDrownRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 205;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 9;
  uint32 entity_id = 5;
}

import "AnimatorParameterValueInfoPair.proto";
import "EntityAuthorityInfo.proto";
import "EntityClientData.proto";
import "EntityEnvironmentInfo.proto";
import "FightPropPair.proto";
import "MotionInfo.proto";
import "PropPair.proto";
import "ProtEntityType.proto";
import "SceneAvatarInfo.proto";
import "SceneGadgetInfo.proto";
import "SceneMonsterInfo.proto";
import "SceneNpcInfo.proto";
import "ServerBuff.proto";

message SceneEntityInfo {
  ProtEntityType entity_type = 1;
  uint32 entity_id = 2;
  string name = 3;
  MotionInfo motion_info = 4;
  repeated PropPair prop_list = 5;
  repeated FightPropPair fight_prop_list = 6;
  uint32 life_state = 7;
  repeated AnimatorParameterValueInfoPair animator_para_list = 9;
  uint32 last_move_scene_time_ms = 17;
  uint32 last_move_reliable_seq = 18;
  EntityClientData entity_client_data = 19;
  repeated EntityEnvironmentInfo entity_environment_info_list = 20;
  EntityAuthorityInfo entity_authority_info = 21;
  repeated string tag_list = 22;
  repeated ServerBuff server_buff_list = 23;
  oneof entity {
    SceneAvatarInfo avatar = 10;
    SceneMonsterInfo monster = 11;
    SceneNpcInfo npc = 12;
    SceneGadgetInfo gadget = 13;
  }
}

import "MotionInfo.proto";

message SceneEntityMoveNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 239;
  //   ENET_CHANNEL_ID = 1;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 reliable_seq = 3;
  uint32 scene_time = 15;
  uint32 entity_id = 11;
  MotionInfo motion_info = 14;
}

import "MotionInfo.proto";

message SceneEntityMoveReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 247;
  //   ENET_CHANNEL_ID = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 scene_time = 5;
  MotionInfo motion_info = 4;
  uint32 entity_id = 13;
  uint32 reliable_seq = 3;
}

import "MotionInfo.proto";

message SceneEntityMoveRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 278;
  //   ENET_CHANNEL_ID = 1;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 scene_time = 11;
  MotionInfo fail_motion = 8;
  uint32 entity_id = 12;
  int32 retcode = 9;
  uint32 reliable_seq = 15;
}

import "SceneEntityInfo.proto";
import "VisionType.proto";

message SceneEntityUpdateNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3115;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  VisionType appear_type = 11;
  uint32 param = 12;
  repeated SceneEntityInfo entity_list = 10;
}

import "Vector.proto";

message SceneFishInfo {
  uint32 fish_id = 1;
  uint32 fish_pool_entity_id = 2;
  Vector fish_pool_pos = 3;
  uint32 fish_pool_gadget_id = 4;
  uint32 last_shock_time = 5;
}


message SceneForceLockNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 280;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint32 force_id_list = 1;
}


message SceneForceUnlockNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 210;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  bool is_add = 15;
  repeated uint32 force_id_list = 11;
}

import "AbilityGadgetInfo.proto";
import "BlossomChestInfo.proto";
import "BossChestInfo.proto";
import "ClientGadgetInfo.proto";
import "CoinCollectOperatorInfo.proto";
import "CustomGadgetTreeInfo.proto";
import "DeshretObeliskGadgetInfo.proto";
import "EchoShellInfo.proto";
import "FishPoolInfo.proto";
import "FoundationInfo.proto";
import "GadgetBornType.proto";
import "GadgetGeneralRewardInfo.proto";
import "GadgetPlayInfo.proto";
import "GatherGadgetInfo.proto";
import "Item.proto";
import "MpPlayRewardInfo.proto";
import "NightCrowGadgetInfo.proto";
import "OfferingInfo.proto";
import "PlatformInfo.proto";
import "RoguelikeGadgetInfo.proto";
import "ScreenInfo.proto";
import "StatueGadgetInfo.proto";
import "VehicleInfo.proto";
import "WeatherInfo.proto";
import "WorktopInfo.proto";

message SceneGadgetInfo {
  uint32 gadget_id = 1;
  uint32 group_id = 2;
  uint32 config_id = 3;
  uint32 owner_entity_id = 4;
  GadgetBornType born_type = 5;
  uint32 gadget_state = 6;
  uint32 gadget_type = 7;
  bool is_show_cutscene = 8;
  uint32 authority_peer_id = 9;
  bool is_enable_interact = 10;
  uint32 interact_id = 11;
  uint32 mark_flag = 21;
  uint32 prop_owner_entity_id = 22;
  PlatformInfo platform = 23;
  repeated uint32 interact_uid_list = 24;
  uint32 draft_id = 25;
  uint32 gadget_talk_state = 26;
  GadgetPlayInfo play_info = 100;
  oneof content {
    Item trifle_item = 12;
    GatherGadgetInfo gather_gadget = 13;
    WorktopInfo worktop = 14;
    ClientGadgetInfo client_gadget = 15;
    WeatherInfo weather = 17;
    AbilityGadgetInfo ability_gadget = 18;
    StatueGadgetInfo statue_gadget = 19;
    BossChestInfo boss_chest = 20;
    BlossomChestInfo blossom_chest = 41;
    MpPlayRewardInfo mp_play_reward = 42;
    GadgetGeneralRewardInfo general_reward = 43;
    OfferingInfo offering_info = 44;
    FoundationInfo foundation_info = 45;
    VehicleInfo vehicle_info = 46;
    EchoShellInfo shell_info = 47;
    ScreenInfo screen_info = 48;
    FishPoolInfo fish_pool_info = 59;
    CustomGadgetTreeInfo custom_gadget_tree_info = 60;
    RoguelikeGadgetInfo roguelike_gadget_info = 61;
    NightCrowGadgetInfo night_crow_gadget_info = 62;
    DeshretObeliskGadgetInfo deshret_obelisk_gadget_info = 63;
    CoinCollectOperatorInfo coin_collect_operator_info = 64;
  }
}

import "BalloonPlayerInfo.proto";

message SceneGalleryBalloonInfo {
  map<uint32, BalloonPlayerInfo> scene_player_balloon_info_map = 13;
  uint32 end_time = 9;
}


message SceneGalleryBounceConjuringInfo {
  uint32 total_score = 4;
  uint32 total_destroyed_machine_count = 12;
}


message SceneGalleryBrokenFloorInfo {
  uint32 end_time = 10;
  map<uint32, uint32> fall_count_map = 15;
}


message SceneGalleryBulletInfo {
  map<uint32, uint32> hit_count_map = 2;
  uint32 end_time = 13;
}


message SceneGalleryBuoyantCombatInfo {
  uint32 score = 9;
  uint32 kill_special_monster_count = 13;
  uint32 kill_monster_count = 12;
}


message SceneGalleryCharAmusementInfo {
  bool is_success = 13;
  uint32 max_score = 11;
  uint32 cur_score = 9;
  bool is_last_level = 10;
  bool is_finish = 14;
}


message SceneGalleryCoinCollectInfo {
  uint32 Unk3300_DKBJMLJGLIB = 11;
  uint32 Unk3300_CPLDPCMBHOE = 12;
}


message SceneGalleryCrystalLinkInfo {
  uint32 score = 13;
}


message SceneGalleryEffigyChallengeV2Info {
  uint32 Unk3300_MICPCKIOEJA = 1;
  uint32 Unk3300_BMPCKGJAGPE = 8;
  uint32 Unk3300_EOGAPBOFHOP = 2;
  uint32 Unk3300_MBHBNIPEPNJ = 7;
  uint32 Unk3300_AIEEGIBMOFH = 11;
}

import "FallPlayerInfo.proto";

message SceneGalleryFallInfo {
  uint32 end_time = 4;
  map<uint32, FallPlayerInfo> scene_player_fall_info_map = 3;
}


message SceneGalleryFlowerInfo {
  uint32 cur_score = 5;
  uint32 target_score = 14;
  uint32 end_time = 12;
}


message SceneGalleryFungusFighterCaptureInfo {
  bool is_hide_progress = 15;
}


message SceneGalleryFungusFighterTrainingInfo {
  uint32 Unk3300_GMLIPFDMDOG = 15;
  uint32 Unk3300_IOEELCAMDCK = 8;
  uint32 max_monster_count = 10;
  uint32 Unk3300_EDHANEGNMJM = 2;
  uint32 buff_id = 13;
  uint32 Unk3300_HGPGNCMNDJN = 14;
  uint32 Unk3300_EKAMCPNGCGH = 5;
}

import "PlaceInfo.proto";

message SceneGalleryHandballInfo {
  PlaceInfo ball_place_info = 6;
  bool is_have_ball = 11;
}


message SceneGalleryHideAndSeekInfo {
  repeated uint32 Unk3300_LHMHALKDBBN = 10;
  repeated uint32 Unk3300_CNLKMGFFAEC = 7;
}


message SceneGalleryHomeBalloonInfo {
  uint32 score = 11;
}


message SceneGalleryHomeSeekFurnitureInfo {
  uint32 Unk3300_DAEEBIEAOMN = 3;
  uint32 Unk3300_ENKOGPIEHFD = 14;
  map<uint32, uint32> player_score_map = 10;
  uint32 Unk3300_LGEAPLJCJFH = 12;
}

import "GalleryStageType.proto";
import "SceneGalleryBalloonInfo.proto";
import "SceneGalleryBounceConjuringInfo.proto";
import "SceneGalleryBrokenFloorInfo.proto";
import "SceneGalleryBulletInfo.proto";
import "SceneGalleryBuoyantCombatInfo.proto";
import "SceneGalleryCharAmusementInfo.proto";
import "SceneGalleryCoinCollectInfo.proto";
import "SceneGalleryCrystalLinkInfo.proto";
import "SceneGalleryEffigyChallengeV2Info.proto";
import "SceneGalleryFallInfo.proto";
import "SceneGalleryFlowerInfo.proto";
import "SceneGalleryFungusFighterCaptureInfo.proto";
import "SceneGalleryFungusFighterTrainingInfo.proto";
import "SceneGalleryHandballInfo.proto";
import "SceneGalleryHideAndSeekInfo.proto";
import "SceneGalleryHomeBalloonInfo.proto";
import "SceneGalleryHomeSeekFurnitureInfo.proto";
import "SceneGalleryInstableSprayInfo.proto";
import "SceneGalleryIrodoriMasterInfo.proto";
import "SceneGalleryIslandPartyDownHillInfo.proto";
import "SceneGalleryIslandPartyRaftInfo.proto";
import "SceneGalleryIslandPartySailInfo.proto";
import "SceneGalleryLuminanceStoneChallengeInfo.proto";
import "SceneGalleryMuqadasPotionInfo.proto";
import "SceneGalleryProgressInfo.proto";
import "SceneGallerySalvageEscortInfo.proto";
import "SceneGallerySalvagePreventInfo.proto";
import "SceneGallerySummerTimeV2BoatInfo.proto";
import "SceneGallerySumoInfo.proto";
import "SceneGalleryTreasureSeelieInfo.proto";
import "SceneGalleryVintageHuntingInfo.proto";
import "SceneGalleryWindFieldInfo.proto";

message SceneGalleryInfo {
  uint32 pre_start_end_time = 14;
  uint32 owner_uid = 9;
  repeated SceneGalleryProgressInfo progress_info_list = 10;
  uint32 gallery_id = 4;
  uint32 start_time = 3;
  uint32 player_count = 15;
  uint32 end_time = 1;
  GalleryStageType stage = 8;
  oneof info {
    SceneGalleryBalloonInfo balloon_info = 5;
    SceneGalleryFallInfo fall_info = 7;
    SceneGalleryFlowerInfo flower_info = 11;
    SceneGalleryBulletInfo bullet_info = 12;
    SceneGalleryBrokenFloorInfo broken_floor_info = 6;
    SceneGalleryHideAndSeekInfo hide_and_seek_info = 13;
    SceneGalleryBuoyantCombatInfo buoyant_combat_info = 1224;
    SceneGalleryBounceConjuringInfo bounce_conjuring_info = 621;
    SceneGalleryHandballInfo handball_info = 1835;
    SceneGallerySumoInfo sumo_info = 877;
    SceneGallerySalvagePreventInfo salvage_prevent_info = 1477;
    SceneGallerySalvageEscortInfo salvage_escort_info = 732;
    SceneGalleryHomeBalloonInfo home_balloon_info = 1866;
    SceneGalleryCrystalLinkInfo crystal_link_info = 666;
    SceneGalleryIrodoriMasterInfo irodori_master_info = 1679;
    SceneGalleryLuminanceStoneChallengeInfo luminance_stone_challenge_info = 1847;
    SceneGalleryHomeSeekFurnitureInfo home_seek_furniture_info = 540;
    SceneGalleryIslandPartyDownHillInfo island_party_down_hill_info = 2047;
    SceneGallerySummerTimeV2BoatInfo summer_time_v2_boat_info = 1890;
    SceneGalleryIslandPartyRaftInfo island_party_raft_info = 244;
    SceneGalleryIslandPartySailInfo island_party_sail_info = 633;
    SceneGalleryInstableSprayInfo instable_spray_info = 75;
    SceneGalleryMuqadasPotionInfo muqadas_potion_info = 496;
    SceneGalleryTreasureSeelieInfo treasure_seelie_info = 16;
    SceneGalleryVintageHuntingInfo vintage_hunting_info = 1470;
    SceneGalleryWindFieldInfo wind_field_info = 1001;
    SceneGalleryFungusFighterTrainingInfo fungus_fighter_training_info = 861;
    SceneGalleryEffigyChallengeV2Info effigy_challenge_info = 1577;
    SceneGalleryFungusFighterCaptureInfo fungus_fighter_capture_info = 711;
    SceneGalleryCharAmusementInfo char_amusement_info = 152;
    SceneGalleryCoinCollectInfo coin_collect_info = 1243;
  }
}

import "SceneGalleryInfo.proto";

message SceneGalleryInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5525;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  SceneGalleryInfo gallery_info = 11;
}


message SceneGalleryInstableSprayBuffInfo {
  uint64 Unk3300_KKDFLBMKGEF = 3;
  uint32 buff_id = 6;
  uint64 Unk3300_EPHAABKNLHC = 2;
}

import "SceneGalleryInstableSprayBuffInfo.proto";

message SceneGalleryInstableSprayInfo {
  uint32 score = 10;
  repeated SceneGalleryInstableSprayBuffInfo buff_info_list = 4;
}


message SceneGalleryIrodoriMasterInfo {
  bool is_cg_viewed = 12;
  uint32 difficulty = 10;
  uint32 level_id = 7;
}

import "GalleryStartSource.proto";

message SceneGalleryIslandPartyDownHillInfo {
  uint32 max_kill_monster_count = 10;
  GalleryStartSource start_source = 2;
  uint32 total_kill_monster_count = 12;
  uint32 coin = 4;
}

import "GalleryStartSource.proto";

message SceneGalleryIslandPartyRaftInfo {
  uint32 coin = 12;
  uint32 Unk3300_FBACMOFGPGJ = 6;
  uint32 point_id = 10;
  uint32 Unk3300_HHEKIPECDAK = 14;
  GalleryStartSource start_source = 7;
  uint32 Unk3300_HNECEGNMKNK = 13;
}

import "GalleryStartSource.proto";
import "IslandPartySailStage.proto";

message SceneGalleryIslandPartySailInfo {
  uint32 coin = 5;
  uint32 Unk3300_HCJGDHEMBLM = 4;
  uint32 Unk3300_MJHMCAPGBIK = 6;
  uint32 Unk3300_PFCJODGNDCI = 3;
  IslandPartySailStage stage = 14;
  uint32 Unk3300_MJOIIJIBAHF = 10;
  GalleryStartSource start_source = 13;
}


message SceneGalleryLuminanceStoneChallengeInfo {
  uint32 clean_mud_count = 12;
  uint32 kill_special_monster_count = 3;
  uint32 score = 4;
  uint32 kill_monster_count = 8;
}


message SceneGalleryMuqadasPotionInfo {
  uint32 score = 1;
  uint32 Unk3300_NHOLGGAFMPH = 5;
  uint32 Unk3300_LKEICOLMPII = 10;
  uint32 capture_weakness_count = 12;
}


message SceneGalleryProgressInfo {
  string key = 3;
  uint32 ui_form = 12;
  repeated uint32 progress_stage_list = 7;
  uint32 progress = 13;
}


message SceneGallerySalvageEscortInfo {
  uint32 max_monster_count = 4;
  uint32 monster_count = 10;
  uint32 Unk3300_FGDPFNPENNC = 11;
  uint32 Unk3300_HDMPOAJLPED = 9;
}


message SceneGallerySalvagePreventInfo {
  uint32 monster_count = 1;
}


message SceneGallerySummerTimeV2BoatInfo {
  uint32 used_time = 6;
  uint32 param1 = 5;
  uint32 param3 = 12;
  uint32 param2 = 3;
}


message SceneGallerySumoInfo {
  uint32 kill_elite_monster_num = 4;
  uint32 score = 7;
  uint32 kill_normal_monster_num = 12;
}


message SceneGalleryTreasureSeelieInfo {
  uint32 progress = 1;
  uint32 goal = 14;
}

import "VintageHuntingFirstStageInfo.proto";
import "VintageHuntingSecondStageInfo.proto";
import "VintageHuntingThirdStageInfo.proto";

message SceneGalleryVintageHuntingInfo {
  uint32 stage_id = 9;
  oneof info {
    VintageHuntingFirstStageInfo first_stage_info = 5;
    VintageHuntingSecondStageInfo second_stage_info = 14;
    VintageHuntingThirdStageInfo third_stage_info = 8;
  }
}

import "VintageHuntingFirstStageSettleInfo.proto";
import "VintageHuntingSecondStageSettleInfo.proto";
import "VintageHuntingThirdStageSettleInfo.proto";

message SceneGalleryVintageHuntingSettleNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 22325;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  bool has_new_watcher = 3;
  bool is_new_record = 13;
  uint32 Unk3300_EHGDIKOGLKL = 15;
  uint32 Unk3300_KOAKHMLFPGM = 6;
  uint32 stage_id = 9;
  oneof info {
    VintageHuntingFirstStageSettleInfo first_stage_info = 7;
    VintageHuntingSecondStageSettleInfo second_stage_info = 8;
    VintageHuntingThirdStageSettleInfo third_stage_info = 14;
  }
}


message SceneGalleryWindFieldInfo {
  uint32 Unk3300_MMONPDMIEBN = 6;
  uint32 Unk3300_OJHJPBCAONA = 2;
  uint32 Unk3300_NBIBKFKOCFK = 15;
  uint32 Unk3300_EKMHMHJDHIL = 13;
  uint32 Unk3300_GNJKOCLJFNM = 7;
  uint32 Unk3300_GNKCFHMDOHJ = 3;
  uint32 Unk3300_FFODAKMKGEK = 4;
  uint32 Unk3300_GLNHBJJJINK = 14;
}


enum SceneidConstValue {
  SCENEID_CONST_VALUE_NONE = 0;
  SCENEID_CONST_VALUE_MAIN = 3;
  SCENEID_CONST_VALUE_ISLAND = 4;
  SCENEID_CONST_VALUE_ENKANOMIYA = 5;
  SCENEID_CONST_VALUE_MICHIAE_MATSURI = 7;
  SCENEID_CONST_VALUE_28_ISLAND = 9;
}


message SceneInitFinishReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 219;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 enter_scene_token = 7;
}


message SceneInitFinishRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 300;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  int32 retcode = 7;
  uint32 enter_scene_token = 4;
}


message SceneKickPlayerNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 201;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 target_uid = 13;
  uint32 kicker_uid = 12;
}


message SceneKickPlayerReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 212;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 target_uid = 5;
}


message SceneKickPlayerRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 231;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 8;
  uint32 target_uid = 11;
}

import "FishtankFishInfo.proto";
import "MonsterBornType.proto";
import "MonsterRoute.proto";
import "SceneFishInfo.proto";
import "SceneWeaponInfo.proto";

message SceneMonsterInfo {
  uint32 monster_id = 1;
  uint32 group_id = 2;
  uint32 config_id = 3;
  repeated SceneWeaponInfo weapon_list = 4;
  uint32 authority_peer_id = 5;
  repeated uint32 affix_list = 6;
  bool is_elite = 7;
  uint32 owner_entity_id = 8;
  uint32 summoned_tag = 9;
  map<uint32, uint32> summon_tag_map = 10;
  uint32 pose_id = 11;
  MonsterBornType born_type = 12;
  uint32 block_id = 13;
  uint32 mark_flag = 14;
  uint32 title_id = 15;
  uint32 special_name_id = 16;
  uint32 attack_target_id = 17;
  MonsterRoute monster_route = 18;
  uint32 ai_config_id = 19;
  uint32 level_route_id = 20;
  uint32 init_pose_id = 21;
  bool is_light = 22;
  uint32 kill_num = 23;
  oneof content {
    SceneFishInfo fish_info = 50;
    FishtankFishInfo fishtank_fish_info = 51;
  }
}


message SceneNpcInfo {
  uint32 npc_id = 1;
  uint32 room_id = 2;
  uint32 parent_quest_id = 3;
  uint32 block_id = 4;
}


message ScenePlayBattleInfo {
  uint32 duration = 14;
  uint32 progress = 5;
  uint32 prepare_end_time = 1;
  uint32 play_type = 12;
  repeated uint32 progress_stage_list = 13;
  uint32 state = 7;
  uint32 mode = 6;
  uint32 type = 10;
  uint32 play_id = 11;
  uint32 start_time = 8;
}

import "ScenePlayBattleInfo.proto";

message ScenePlayBattleInfoListNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4375;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated ScenePlayBattleInfo battle_info_list = 14;
}

import "ScenePlayBattleInfo.proto";

message ScenePlayBattleInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4429;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  ScenePlayBattleInfo battle_info = 8;
}


message ScenePlayBattleInterruptNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4389;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 interrupt_state = 8;
  uint32 play_id = 10;
  uint32 play_type = 1;
}

import "ScenePlayBattleSettlePlayerInfo.proto";
import "ScenePlayBattleSettleRewardInfo.proto";

message ScenePlayBattleResultNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4398;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated ScenePlayBattleSettlePlayerInfo settle_player_info_list = 14;
  repeated ScenePlayBattleSettleRewardInfo settle_reward_info_list = 10;
  uint32 cost_time = 6;
  uint32 play_type = 4;
  bool is_win = 15;
  uint32 play_id = 8;
}

import "ExhibitionDisplayInfo.proto";
import "ProfilePicture.proto";

message ScenePlayBattleSettlePlayerInfo {
  uint32 uid = 7;
  repeated ExhibitionDisplayInfo card_list = 4;
  ProfilePicture profile_picture = 8;
  string nickname = 3;
  int64 param = 11;
  uint32 statistic_id = 13;
  string online_id = 5;
  uint32 head_image = 2;
}

import "ItemParam.proto";

message ScenePlayBattleSettleRewardInfo {
  uint32 uid = 7;
  repeated ItemParam reward_item_list = 11;
}


message ScenePlayBattleUidOpNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4449;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 op = 5;
  uint32 param_duration = 10;
  uint32 play_id = 13;
  repeated uint32 param_target_list = 12;
  uint32 entity_id = 2;
  repeated uint32 param_list = 9;
  string param_str = 11;
  uint32 param_index = 15;
  repeated uint32 uid_list = 6;
  uint32 play_type = 14;
}

import "SceneEntityInfo.proto";
import "VisionType.proto";

message ScenePlayerBackgroundAvatarRefreshNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3388;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 param = 7;
  VisionType appear_type = 14;
  repeated SceneEntityInfo entity_list = 12;
}

import "OnlinePlayerInfo.proto";

message ScenePlayerInfo {
  uint32 uid = 2;
  uint32 scene_id = 7;
  uint32 peer_id = 15;
  OnlinePlayerInfo online_player_info = 9;
  bool is_connected = 3;
  string name = 1;
}

import "ScenePlayerInfo.proto";

message ScenePlayerInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 253;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated ScenePlayerInfo player_info_list = 11;
}

import "PlayerLocationInfo.proto";
import "VehicleLocationInfo.proto";

message ScenePlayerLocationNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 248;
  //   ENET_CHANNEL_ID = 1;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 scene_id = 11;
  repeated VehicleLocationInfo vehicle_loc_list = 6;
  repeated PlayerLocationInfo player_loc_list = 4;
}

import "Vector.proto";

message ScenePlayerSoundNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 266;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  enum PlaySoundType {
    PLAY_SOUND_TYPE_NONE = 0;
    PLAY_SOUND_TYPE_START = 1;
    PLAY_SOUND_TYPE_STOP = 2;
  }

  Vector play_pos = 6;
  PlaySoundType play_type = 15;
  string sound_name = 14;
}


message ScenePlayGuestReplyInviteReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4411;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  bool is_agree = 7;
  uint32 play_id = 4;
}


message ScenePlayGuestReplyInviteRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4397;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  bool is_agree = 1;
  int32 retcode = 7;
  uint32 play_id = 15;
}


message ScenePlayGuestReplyNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4428;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 play_id = 4;
  uint32 guest_uid = 5;
  bool is_agree = 2;
}


message ScenePlayInfo {
  bool is_open = 14;
  uint32 entry_id = 10;
  uint32 play_id = 15;
  uint32 play_type = 13;
}

import "ScenePlayInfo.proto";

message ScenePlayInfoListNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4377;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated ScenePlayInfo play_info_list = 15;
}


message ScenePlayInviteResultNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4407;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 play_id = 14;
  bool is_all_agree = 11;
}


message ScenePlayOutofRegionNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4392;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 play_id = 6;
}


message ScenePlayOwnerCheckReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4380;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 play_id = 10;
  bool is_skip_match = 8;
}


message ScenePlayOwnerCheckRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4406;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 wrong_uid = 1;
  repeated uint32 param_list = 6;
  int32 retcode = 7;
  bool is_skip_match = 14;
  uint32 play_id = 4;
}


message ScenePlayOwnerInviteNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4393;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 invite_cd = 12;
  uint32 play_id = 6;
  bool is_remain_reward = 14;
}


message ScenePlayOwnerStartInviteReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4369;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  bool is_skip_match = 4;
  uint32 play_id = 7;
}


message ScenePlayOwnerStartInviteRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4450;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 play_id = 7;
  int32 retcode = 10;
  bool is_skip_match = 15;
}


message ScenePointUnlockNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 276;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint32 hide_point_list = 10;
  repeated uint32 locked_point_list = 5;
  uint32 scene_id = 11;
  repeated uint32 point_list = 6;
  repeated uint32 unhide_point_list = 1;
}


message SceneReliquaryInfo {
  uint32 item_id = 1;
  uint64 guid = 2;
  uint32 level = 3;
  uint32 promote_level = 4;
}

import "RoutePointChangeInfo.proto";

message SceneRouteChangeInfo {
  bool is_forward = 15;
  uint32 type = 11;
  repeated RoutePointChangeInfo point_list = 10;
  uint32 route_id = 12;
}

import "SceneRouteChangeInfo.proto";

message SceneRouteChangeNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 285;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 scene_time = 3;
  repeated SceneRouteChangeInfo route_list = 4;
  uint32 scene_id = 11;
}


enum SceneSurfaceMaterial {
  SCENE_SURFACE_MATERIAL_INVALID = 0;
  SCENE_SURFACE_MATERIAL_GRASS = 1;
  SCENE_SURFACE_MATERIAL_DIRT = 2;
  SCENE_SURFACE_MATERIAL_ROCK = 3;
  SCENE_SURFACE_MATERIAL_SNOW = 4;
  SCENE_SURFACE_MATERIAL_WATER = 5;
  SCENE_SURFACE_MATERIAL_TILE = 6;
  SCENE_SURFACE_MATERIAL_SAND = 7;
}

import "AbilityControlBlock.proto";
import "AbilitySyncStateInfo.proto";
import "AvatarInfo.proto";
import "SceneAvatarInfo.proto";
import "SceneEntityInfo.proto";
import "ServerBuff.proto";

message SceneTeamAvatar {
  SceneAvatarInfo scene_avatar_info = 14;
  AvatarInfo avatar_info = 15;
  uint32 entity_id = 10;
  AbilitySyncStateInfo weapon_ability_info = 6;
  AbilityControlBlock ability_control_block = 2;
  bool is_reconnect = 8;
  AbilitySyncStateInfo avatar_ability_info = 4;
  uint64 weapon_guid = 12;
  uint32 player_uid = 1;
  SceneEntityInfo scene_entity_info = 11;
  uint32 weapon_entity_id = 5;
  uint32 scene_id = 9;
  bool is_on_scene = 625;
  uint64 avatar_guid = 3;
  bool is_player_cur_avatar = 13;
  repeated ServerBuff server_buff_list = 7;
}

import "SceneTeamAvatar.proto";

message SceneTeamUpdateNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1728;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated SceneTeamAvatar scene_team_avatar_list = 11;
  bool is_in_mp = 7;
}


message SceneTimeNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 296;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint64 scene_time = 10;
  uint32 scene_id = 14;
  bool is_paused = 5;
}


message SceneTransToPointReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 216;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 point_id = 9;
  uint32 scene_id = 7;
}


message SceneTransToPointRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 273;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 8;
  uint32 point_id = 4;
  uint32 scene_id = 10;
}

import "AbilitySyncStateInfo.proto";
import "EntityRendererChangedInfo.proto";

message SceneWeaponInfo {
  uint32 entity_id = 1;
  uint32 gadget_id = 2;
  uint32 item_id = 3;
  uint64 guid = 4;
  uint32 level = 5;
  uint32 promote_level = 6;
  AbilitySyncStateInfo ability_info = 7;
  map<uint32, uint32> affix_map = 8;
  EntityRendererChangedInfo renderer_changed_info = 9;
}


message SceneWeatherForecastReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3350;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 weather_area_id = 9;
}


message SceneWeatherForecastRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3064;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint32 forecast_climate_list = 15;
  int32 retcode = 12;
  uint64 next_climate_time = 4;
}


message ScreenInfo {
  uint32 live_id = 1;
  uint32 projector_entity_id = 2;
}


message SeaLampActivityDetailInfo {
  repeated uint32 Unk3300_ODBFFAIIPMB = 2;
  uint32 days = 6;
  uint32 Unk3300_DGMGNJLHFMB = 8;
  uint32 progress = 5;
  repeated uint32 Unk3300_FGHDJJCLNFN = 14;
  uint32 Unk3300_GBCCJMBPBBI = 11;
  uint32 phase_id = 3;
}

import "SeaLampSectionInfo.proto";

message SeaLampActivityInfo {
  uint32 day_index = 14;
  bool is_content_closed = 15;
  repeated SeaLampSectionInfo section_info_list = 1;
  uint32 mechanicus_id = 7;
  uint32 first_day_start_time = 6;
  uint32 sea_lamp_coin = 11;
  uint32 popularity = 2;
  bool Unk3300_JMPCJGJHPIH = 13;
  bool Unk3300_BAJIGNGJALG = 9;
}


message SeaLampCoinNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2188;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 sea_lamp_coin = 8;
}

import "ItemParam.proto";

message SeaLampContributeItemReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2133;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated ItemParam item_list = 11;
  uint32 activity_id = 2;
}


message SeaLampContributeItemRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2116;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 4;
  uint32 Unk3300_AIINHBHNHOI = 11;
  uint32 add_progress = 5;
  uint32 Unk3300_LPHALOGLGAL = 9;
}

import "Vector.proto";

message SeaLampFlyLampNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2114;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  Vector pos = 4;
  uint32 item_id = 3;
  uint32 item_num = 15;
  int32 param = 13;
}

import "Vector.proto";

message SeaLampFlyLampReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2187;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  Vector pos = 5;
  uint32 item_num = 15;
  uint32 item_id = 7;
  int32 param = 14;
}


message SeaLampFlyLampRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2161;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 3;
  uint32 item_num = 9;
  uint32 item_id = 10;
}


message SeaLampPopularityNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2135;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 popularity = 6;
}


message SeaLampSectionInfo {
  uint32 section_id = 8;
}


message SeaLampTakeContributionRewardReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2199;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 config_id = 15;
  uint32 activity_id = 14;
}


message SeaLampTakeContributionRewardRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2003;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 9;
  uint32 config_id = 5;
}


message SeaLampTakePhaseRewardReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2006;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 phase_id = 9;
  uint32 activity_id = 14;
}


message SeaLampTakePhaseRewardRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2105;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 phase_id = 13;
  int32 retcode = 6;
}

import "SealBattleType.proto";

message SealBattleBeginNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 226;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  SealBattleType battle_type = 10;
  uint32 seal_entity_id = 7;
  uint32 seal_max_progress = 13;
  uint32 seal_radius = 5;
}


message SealBattleEndNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 277;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 seal_entity_id = 11;
  bool is_win = 12;
}


message SealBattleProgressNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 265;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 end_time = 5;
  uint32 seal_radius = 1;
  uint32 max_progress = 9;
  uint32 seal_entity_id = 6;
  uint32 progress = 4;
}


enum SealBattleType {
  SEAL_BATTLE_TYPE_KEEP_ALIVE = 0;
  SEAL_BATTLE_TYPE_KILL_MONSTER = 1;
  SEAL_BATTLE_TYPE_ENERGY_CHARGE = 2;
}


message SearchCustomDungeonReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 6201;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  string dungeon_code = 7;
}

import "OtherCustomDungeonBrief.proto";

message SearchCustomDungeonRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 6239;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 2;
  OtherCustomDungeonBrief custom_dungeon_brief = 8;
}


enum SecurityCheckType {
  SECURITY_CHECK_TYPE_NONE = 0;
  SECURITY_CHECK_TYPE_LOGIN = 1;
}


message SeeMonsterReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 206;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 monster_id = 13;
}


message SeeMonsterRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 255;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 12;
}


message SegmentCRCInfo {
  uint32 size = 6;
  string crc = 8;
  uint32 module = 4;
  int32 retcode = 3;
  uint32 offset = 9;
}


enum SegmentCRCModuleType {
  SEGMENT_CRC_MODULE_TYPE_NONE = 0;
  SEGMENT_CRC_MODULE_TYPE_PC_UNITYPLAYER = 1;
  SEGMENT_CRC_MODULE_TYPE_PC_USERASSEMBLY = 2;
  SEGMENT_CRC_MODULE_TYPE_PC_XLUA = 3;
  SEGMENT_CRC_MODULE_TYPE_ANDROID_LIBIL2CPP = 11;
  SEGMENT_CRC_MODULE_TYPE_ANDROID_LIBUNITY = 12;
  SEGMENT_CRC_MODULE_TYPE_ANDROID_LIBXLUA = 13;
  SEGMENT_CRC_MODULE_TYPE_IOS_HK4E = 21;
}


message SegmentInfo {
  uint32 module = 1;
  uint32 size = 7;
  uint32 offset = 11;
}


message SelectAsterMidDifficultyReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2060;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 schedule_id = 4;
  uint32 difficulty_id = 2;
  uint32 gadget_entity_id = 12;
}


message SelectAsterMidDifficultyRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2101;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 schedule_id = 15;
  uint32 gadget_entity_id = 12;
  int32 retcode = 7;
  uint32 difficulty_id = 8;
}


message SelectEffigyChallengeConditionReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2131;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 challenge_id = 6;
  repeated uint32 condition_id_list = 1;
  uint32 difficulty_id = 11;
}


message SelectEffigyChallengeConditionRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2110;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 difficulty_id = 10;
  uint32 challenge_id = 7;
  repeated uint32 condition_id_list = 11;
  int32 retcode = 9;
}


message SelectRoguelikeDungeonCardReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8529;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 card_id = 13;
}


message SelectRoguelikeDungeonCardRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8720;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 card_id = 14;
  int32 retcode = 11;
}


message SelectWorktopOptionReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 900;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 option_id = 7;
  uint32 gadget_entity_id = 5;
}


message SelectWorktopOptionRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 843;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 option_id = 10;
  int32 retcode = 4;
  uint32 gadget_entity_id = 12;
}


message ServantInfo {
  uint32 master_entity_id = 1;
  uint32 born_slot_index = 2;
}

import "AnnounceData.proto";

message ServerAnnounceNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2129;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated AnnounceData announce_data_list = 14;
}


message ServerAnnounceRevokeNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2064;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint32 config_id_list = 9;
}


message ServerBuff {
  uint32 server_buff_uid = 1;
  uint32 server_buff_id = 2;
  uint32 server_buff_type = 3;
  uint32 instanced_modifier_id = 4;
  bool is_modifier_added = 5;
}

import "ServerBuff.proto";

message ServerBuffChangeNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 398;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  enum ServerBuffChangeType {
    SERVER_BUFF_CHANGE_TYPE_ADD_SERVER_BUFF = 0;
    SERVER_BUFF_CHANGE_TYPE_DEL_SERVER_BUFF = 1;
  }

  repeated ServerBuff server_buff_list = 4;
  bool is_creature_buff = 8;
  repeated uint32 entity_id_list = 6;
  ServerBuffChangeType server_buff_change_type = 9;
  repeated uint64 avatar_guid_list = 5;
}


message ServerCombatEndNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1142;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint32 combat_end_type_list = 15;
}


message ServerCondMeetQuestListUpdateNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 410;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint32 add_quest_id_list = 10;
  repeated uint32 del_quest_id_list = 4;
}


message ServerDisconnectClientNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 152;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 data = 4;
}


message ServerGlobalValueChangeNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1199;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 key_hash = 3;
  float value = 15;
  uint32 entity_id = 7;
}


enum ServerLogLevel {
  SERVER_LOG_LEVEL_NONE = 0;
  SERVER_LOG_LEVEL_DEBUG = 1;
  SERVER_LOG_LEVEL_INFO = 2;
  SERVER_LOG_LEVEL_WARNING = 3;
  SERVER_LOG_LEVEL_ERROR = 4;
}

import "ServerLogLevel.proto";
import "ServerLogType.proto";

message ServerLogNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 27;
  //   ENET_CHANNEL_ID = 1;
  //   ENET_IS_RELIABLE = 1;
  // }

  string server_log = 11;
  ServerLogLevel log_level = 5;
  ServerLogType log_type = 9;
}


enum ServerLogType {
  SERVER_LOG_TYPE_NONE = 0;
  SERVER_LOG_TYPE_ABILITY = 1;
  SERVER_LOG_TYPE_LEVEL = 2;
  SERVER_LOG_TYPE_ENTITY = 3;
  SERVER_LOG_TYPE_LUA = 4;
}

import "MassiveBoxInfo.proto";
import "MassiveGrassInfo.proto";
import "MassiveWaterInfo.proto";

message ServerMassiveEntity {
  uint32 entity_type = 1;
  uint32 config_id = 2;
  uint32 runtime_id = 3;
  uint32 authority_peer_id = 4;
  int64 obj_id = 5;
  oneof entity_info {
    MassiveWaterInfo water_info = 6;
    MassiveGrassInfo grass_info = 7;
    MassiveBoxInfo box_info = 8;
  }
}


message ServerMessageNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5741;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 index = 13;
}


message ServerTimeNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 57;
  //   ENET_CHANNEL_ID = 1;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint64 server_time = 13;
}


message ServerTryCancelGeneralMatchNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4159;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 match_id = 12;
}


message ServerUpdateGlobalValueNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1148;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  enum UpdateType {
    UPDATE_TYPE_INVALID = 0;
    UPDATE_TYPE_ADD = 1;
    UPDATE_TYPE_SET = 2;
  }

  uint32 key_hash = 8;
  UpdateType update_type = 9;
  float delta = 6;
  float value = 3;
  uint32 entity_id = 15;
}


enum ServiceType {
  SERVICE_TYPE_NONE = 0;
  SERVICE_TYPE_CLIENT = 1;
  SERVICE_TYPE_GATE = 2;
  SERVICE_TYPE_GAME = 3;
  SERVICE_TYPE_NODE = 4;
  SERVICE_TYPE_DB = 5;
  SERVICE_TYPE_SNS = 6;
  SERVICE_TYPE_DISPATCH = 7;
  SERVICE_TYPE_MUIP = 8;
  SERVICE_TYPE_OFFLINE_MSG = 9;
  SERVICE_TYPE_MAIL = 10;
  SERVICE_TYPE_MP = 11;
  SERVICE_TYPE_HTTPPROXY = 12;
  SERVICE_TYPE_ACTIVITY = 13;
  SERVICE_TYPE_PATHFINDING = 14;
  SERVICE_TYPE_SOCIAL = 15;
  SERVICE_TYPE_OA = 16;
  SERVICE_TYPE_MATCH = 17;
  SERVICE_TYPE_OFFLINE_OP = 18;
  SERVICE_TYPE_TOTHEMOON = 19;
  SERVICE_TYPE_GCG = 20;
}


message SetBattlePassViewedReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2608;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 schedule_id = 9;
}


message SetBattlePassViewedRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2645;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 schedule_id = 13;
  int32 retcode = 6;
}

import "ChatEmojiCollectionData.proto";

message SetChatEmojiCollectionReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4052;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  ChatEmojiCollectionData chat_emoji_collection_data = 13;
}


message SetChatEmojiCollectionRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4074;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 15;
}


message SetCodexPushtipsReadReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4209;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 codex_id = 8;
  uint32 type_id = 3;
}


message SetCodexPushtipsReadRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4205;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 9;
  uint32 type_id = 4;
  uint32 codex_id = 14;
}


message SetCoopChapterViewedReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1989;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 chapter_id = 6;
}


message SetCoopChapterViewedRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2000;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 chapter_id = 9;
  int32 retcode = 3;
}


message SetCurExpeditionChallengeIdReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2028;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 id = 11;
}


message SetCurExpeditionChallengeIdRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2005;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 id = 13;
  int32 retcode = 1;
}

import "EntityClientData.proto";

message SetEntityClientDataNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3318;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 entity_id = 15;
  EntityClientData entity_client_data = 5;
}


message SetEquipLockStateReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 609;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint64 target_equip_guid = 10;
  bool is_locked = 5;
}


message SetEquipLockStateRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 688;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint64 target_equip_guid = 1;
  bool is_locked = 3;
  int32 retcode = 12;
}

import "FriendEnterHomeOption.proto";

message SetFriendEnterHomeOptionReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4853;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  FriendEnterHomeOption option = 8;
}


message SetFriendEnterHomeOptionRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4526;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 11;
}


message SetFriendRemarkNameReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4011;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 uid = 14;
  string remark_name = 10;
}


message SetFriendRemarkNameRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4050;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  string remark_name = 13;
  bool is_clear_remark = 12;
  uint32 uid = 1;
  int32 retcode = 7;
}


message SetH5ActivityRedDotTimestampReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5685;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 client_red_dot_timestamp = 2;
}


message SetH5ActivityRedDotTimestampRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5677;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 1;
}


message SetIsAutoUnlockSpecificEquipReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 602;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  bool is_auto_unlock_specific_equip = 8;
}


message SetIsAutoUnlockSpecificEquipRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 612;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 13;
}


message SetLimitOptimizationNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8066;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  bool is_active = 10;
}


message SetNameCardReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4044;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 name_card_id = 11;
}


message SetNameCardRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4007;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 name_card_id = 9;
  int32 retcode = 4;
}


message SetOpenStateReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 189;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 key = 10;
  uint32 value = 12;
}


message SetOpenStateRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 144;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 4;
  uint32 value = 5;
  uint32 key = 12;
}

import "Birthday.proto";

message SetPlayerBirthdayReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4048;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  Birthday birthday = 8;
}

import "Birthday.proto";

message SetPlayerBirthdayRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4099;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  Birthday birthday = 1;
  int32 retcode = 4;
}


message SetPlayerBornDataReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 142;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  string nick_name = 4;
  uint32 avatar_id = 14;
}


message SetPlayerBornDataRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 190;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 15;
}


message SetPlayerHeadImageReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4090;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 avatar_id = 5;
}

import "ProfilePicture.proto";

message SetPlayerHeadImageRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4076;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  ProfilePicture profile_picture = 14;
  uint32 avatar_id = 7;
  int32 retcode = 15;
}


message SetPlayerNameReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 173;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  string nick_name = 13;
}


message SetPlayerNameRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 137;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  string nick_name = 4;
  int32 retcode = 11;
}

import "PropValue.proto";

message SetPlayerPropReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 199;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated PropValue prop_list = 3;
}


message SetPlayerPropRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 125;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 8;
}


message SetPlayerSignatureReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4025;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  string signature = 15;
}


message SetPlayerSignatureRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4042;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 6;
  string signature = 12;
}


message SetSceneWeatherAreaReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 214;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  map<uint32, string> weather_value_map = 8;
  uint32 weather_gadget_id = 12;
}


message SetSceneWeatherAreaRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 270;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 12;
}


message SetUpAvatarTeamReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1713;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 team_id = 13;
  uint64 cur_avatar_guid = 5;
  repeated uint64 avatar_team_guid_list = 14;
}


message SetUpAvatarTeamRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1622;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 team_id = 10;
  repeated uint64 avatar_team_guid_list = 9;
  int32 retcode = 5;
  uint64 cur_avatar_guid = 11;
}

import "LunchBoxData.proto";

message SetUpLunchBoxWidgetReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4267;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  LunchBoxData lunch_box_data = 7;
}

import "LunchBoxData.proto";

message SetUpLunchBoxWidgetRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4262;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 7;
  LunchBoxData lunch_box_data = 2;
}

import "WidgetSlotOp.proto";
import "WidgetSlotTag.proto";

message SetWidgetSlotReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4255;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 material_id = 2;
  repeated WidgetSlotTag tag_list = 13;
  WidgetSlotOp op = 14;
}

import "WidgetSlotOp.proto";
import "WidgetSlotTag.proto";

message SetWidgetSlotRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4261;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 material_id = 4;
  int32 retcode = 1;
  repeated WidgetSlotTag tag_list = 15;
  WidgetSlotOp op = 5;
}

import "Vector.proto";

message ShapeBox {
  Vector center = 1;
  Vector axis0 = 2;
  Vector axis1 = 3;
  Vector axis2 = 4;
  Vector extents = 5;
}

import "Vector.proto";

message ShapeSphere {
  Vector center = 1;
  float radius = 2;
}


message ShareCDInfo {
  uint64 cd_start_time = 1;
  uint32 share_cd_id = 12;
  uint32 index = 13;
}

import "ShopCardProduct.proto";
import "ShopConcertProduct.proto";
import "ShopGoods.proto";
import "ShopMcoinProduct.proto";

message Shop {
  uint32 shop_type = 1;
  uint32 next_refresh_time = 5;
  uint32 city_id = 12;
  uint32 city_reputation_level = 8;
  repeated ShopGoods goods_list = 3;
  repeated ShopCardProduct card_product_list = 11;
  repeated ShopConcertProduct concert_product_list = 9;
  repeated ShopMcoinProduct mcoin_product_list = 7;
}

import "ItemParam.proto";

message ShopCardProduct {
  message ResinCard {
    repeated ItemParam base_item_list = 1;
    repeated ItemParam per_day_item_list = 2;
  }

  string product_id = 1;
  string price_tier = 2;
  uint32 mcoin_base = 3;
  uint32 hcoin_per_day = 4;
  uint32 days = 5;
  uint32 remain_reward_days = 6;
  uint32 card_product_type = 7;
  oneof extra_card_data {
    ResinCard resin_card = 101;
  }
}


message ShopConcertProduct {
  string product_id = 1;
  string price_tier = 2;
  uint32 obtain_count = 3;
  uint32 obtain_limit = 4;
  uint32 begin_time = 5;
  uint32 end_time = 6;
  uint32 buy_times = 7;
}

import "ItemParam.proto";

message ShopGoods {
  uint32 secondary_sheet_id = 1003;
  ItemParam goods_item = 15;
  repeated ItemParam cost_item_list = 7;
  uint32 bought_num = 14;
  repeated uint32 pre_goods_id_list = 9;
  uint32 min_level = 5;
  uint32 mcoin = 11;
  uint32 hcoin = 6;
  uint32 end_time = 3;
  uint32 next_refresh_time = 10;
  uint32 goods_id = 13;
  uint32 Unk3300_OMKIFIMDGDN = 1037;
  uint32 buy_limit = 8;
  uint32 Unk3300_MBGOMHNBHMG = 777;
  uint32 scoin = 2;
  uint32 max_level = 1;
  uint32 single_limit = 1770;
  uint32 Unk3300_NJCPAJBCEPH = 505;
  uint32 begin_time = 12;
  uint32 disable_type = 4;
}


message ShopMcoinProduct {
  string product_id = 1;
  string price_tier = 2;
  uint32 mcoin_base = 3;
  uint32 mcoin_non_first = 4;
  uint32 mcoin_first = 5;
  uint32 bought_num = 6;
  bool is_audit = 7;
}


message ShortAbilityHashPair {
  sfixed32 ability_name_hash = 6;
  sfixed32 ability_config_hash = 15;
}

import "AvatarExcelInfo.proto";
import "AvatarFetterInfo.proto";
import "PropValue.proto";
import "ShowEquip.proto";

message ShowAvatarInfo {
  uint32 avatar_id = 1;
  map<uint32, PropValue> prop_map = 2;
  repeated uint32 talent_id_list = 3;
  map<uint32, float> fight_prop_map = 4;
  uint32 skill_depot_id = 5;
  uint32 core_proud_skill_level = 6;
  repeated uint32 inherent_proud_skill_list = 7;
  map<uint32, uint32> skill_level_map = 8;
  map<uint32, uint32> proud_skill_extra_level_map = 9;
  repeated ShowEquip equip_list = 10;
  AvatarFetterInfo fetter_info = 11;
  uint32 costume_id = 12;
  AvatarExcelInfo excel_info = 13;
}


message ShowClientGuideNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3369;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  string guide_name = 6;
}


message ShowClientTutorialNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3204;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 tutorial_id = 2;
}


message ShowCommonTipsNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3065;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  string title = 3;
  string content = 9;
  uint32 close_time = 13;
}

import "Reliquary.proto";
import "Weapon.proto";

message ShowEquip {
  uint32 item_id = 1;
  oneof detail {
    Reliquary reliquary = 2;
    Weapon weapon = 3;
  }
}

import "MsgParam.proto";
import "SvrMsgId.proto";

message ShowMessageNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 19;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  SvrMsgId msg_id = 9;
  repeated MsgParam params = 10;
}


message ShowTemplateReminderNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3300;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  bool Unk3300_LABCNBEGCED = 6;
  repeated int32 param_list = 4;
  uint32 template_reminder_id = 2;
  bool Unk3300_AENIIBBBPJC = 12;
  repeated uint32 param_uid_list = 7;
}


message SignatureAuditConfigNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4097;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  bool is_open = 6;
  uint32 submit_limit = 11;
}

import "ItemParam.proto";

message SignInData {
  uint32 day_count = 4;
  repeated ItemParam reward_item_list = 15;
}

import "SignInData.proto";

message SignInInfo {
  bool is_cond_satisfied = 1;
  repeated SignInData signin_data_list = 10;
  uint32 Unk3300_MNJELIDKMCF = 5;
  uint32 schedule_id = 7;
  uint32 Unk3300_NFNOKBNBLGE = 3;
  repeated uint32 reward_day_list = 4;
  uint32 begin_time = 6;
  uint32 config_id = 9;
  uint32 end_time = 8;
}


message SignInInfoReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2556;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}

import "SignInInfo.proto";

message SignInInfoRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2519;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 3;
  repeated SignInInfo sign_in_info_list = 8;
}


message SingleRestartBrickBreakerReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 20021;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  bool is_dungeon = 13;
  uint32 level_id = 8;
}


message SingleRestartBrickBreakerRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 22269;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 level_id = 8;
  int32 retcode = 15;
  bool is_dungeon = 7;
}


message SingleStartBrickBreakerReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 23663;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  bool is_dungeon = 13;
  uint32 level_id = 8;
  repeated uint32 chosen_skill_list = 12;
  repeated uint32 chosen_avatar_list = 5;
}


message SingleStartBrickBreakerRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 20712;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 level_id = 10;
  bool is_dungeon = 9;
  int32 retcode = 8;
}

import "Vector.proto";

message SkyCrystalDetectorData {
  bool is_hint_valid = 1;
  uint32 group_id = 5;
  Vector hint_center_pos = 12;
  uint32 config_id = 7;
}

import "SkyCrystalDetectorData.proto";

message SkyCrystalDetectorDataUpdateNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4259;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  SkyCrystalDetectorData sky_crystal_detector_data = 15;
}

import "SkyCrystalDetectorData.proto";

message SkyCrystalDetectorQuickUseResult {
  int32 retcode = 2;
  SkyCrystalDetectorData sky_crystal_detector_data = 4;
}


message SocialDataNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4075;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  bool is_have_first_share = 13;
}

import "Birthday.proto";
import "FriendEnterHomeOption.proto";
import "FriendOnlineState.proto";
import "ProfilePicture.proto";
import "SocialShowAvatarInfo.proto";

message SocialDetail {
  uint32 uid = 1;
  string nickname = 2;
  uint32 level = 3;
  uint32 avatar_id = 4;
  string signature = 5;
  Birthday birthday = 6;
  uint32 world_level = 7;
  repeated uint32 reserved_list = 8;
  FriendOnlineState online_state = 9;
  uint32 param = 10;
  bool is_friend = 11;
  bool is_mp_mode_available = 12;
  string online_id = 13;
  uint32 name_card_id = 14;
  bool is_in_blacklist = 15;
  bool is_chat_no_disturb = 16;
  string remark_name = 17;
  uint32 finish_achievement_num = 18;
  uint32 tower_floor_index = 19;
  uint32 tower_level_index = 20;
  bool is_show_avatar = 21;
  repeated SocialShowAvatarInfo show_avatar_info_list = 22;
  repeated uint32 show_name_card_id_list = 23;
  FriendEnterHomeOption friend_enter_home_option = 24;
  ProfilePicture profile_picture = 25;
}


message SocialShowAvatarInfo {
  uint32 avatar_id = 1;
  uint32 level = 2;
  uint32 costume_id = 3;
}

import "SpiceStageData.proto";

message SpiceActivityDetailInfo {
  uint32 Unk3300_CIHIAJEGCBO = 14;
  uint32 Unk3300_LAKPMMIPBMI = 8;
  repeated SpiceStageData spice_stage_data_list = 6;
}


message SpiceActivityFinishMakeSpiceReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8838;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 stage_id = 11;
  repeated uint32 left_material_id_list = 9;
  bool is_success = 10;
  uint32 left_turns = 14;
}


message SpiceActivityFinishMakeSpiceRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8946;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 stage_id = 8;
  int32 retcode = 10;
  bool is_success = 9;
}


message SpiceActivityGivingRecordNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8719;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 Unk3300_CIHIAJEGCBO = 3;
  uint32 Unk3300_LAKPMMIPBMI = 2;
  uint32 avatar_id = 5;
}

import "ItemParam.proto";

message SpiceActivityProcessFoodReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8523;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated ItemParam normal_food_list = 15;
}

import "ItemParam.proto";

message SpiceActivityProcessFoodRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8381;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 8;
  repeated ItemParam normal_food_list = 9;
  repeated ItemParam special_food_list = 14;
}


message SpiceStageData {
  bool is_open = 4;
  uint32 stage_id = 5;
  uint32 success_times = 12;
}


message SpringUseReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1651;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint64 guid = 12;
}


message SpringUseRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1772;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 5;
  uint64 guid = 1;
}


message StartArenaChallengeLevelReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2196;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 Unk3300_FDFNFLAKONG = 13;
  uint32 gadget_entity_id = 3;
  uint32 Unk3300_DBHAGHMMLAI = 12;
}


message StartArenaChallengeLevelRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2171;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 Unk3300_FDFNFLAKONG = 4;
  int32 retcode = 5;
  uint32 Unk3300_DBHAGHMMLAI = 13;
  uint32 gadget_entity_id = 10;
}


message StartBuoyantCombatGalleryReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8427;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 gallery_level = 4;
  uint32 gallery_id = 12;
}


message StartBuoyantCombatGalleryRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8969;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 gallery_level = 6;
  int32 retcode = 5;
  uint32 gallery_id = 12;
}


message StartCoopPointReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1995;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 coop_point = 4;
}

import "MainCoop.proto";

message StartCoopPointRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1952;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  MainCoop start_main_coop = 4;
  int32 retcode = 2;
  bool is_start = 5;
  uint32 coop_point = 9;
}


message StartEffigyChallengeReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2157;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 challenge_id = 10;
  uint32 difficulty_id = 3;
  uint32 point_id = 1;
  repeated uint32 condition_id_list = 8;
}


message StartEffigyChallengeRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2169;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 point_id = 4;
  repeated uint32 condition_id_list = 9;
  uint32 difficulty_id = 12;
  int32 retcode = 5;
  uint32 challenge_id = 10;
}


message StartFishingReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5822;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 fish_pool_id = 2;
  uint32 rod_entity_id = 6;
}


message StartFishingRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5835;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 fish_pool_id = 3;
  int32 retcode = 10;
}


message StartRogueDiaryPlayReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8220;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 difficulty = 5;
  uint32 stage_id = 1;
}

import "RogueDiaryAvatar.proto";

message StartRogueDiaryPlayRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8881;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated RogueDiaryAvatar avatar_list = 15;
  int32 retcode = 6;
  repeated RogueDiaryAvatar trial_avatar_list = 9;
  repeated uint32 rand_card_list = 2;
}


message StartRogueDiaryRoomReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8279;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  bool is_select_hard = 10;
  uint32 room_difficulty = 13;
}


message StartRogueDiaryRoomRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8806;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 11;
}

import "RogueEliteCellDifficultyType.proto";

message StartRogueEliteCellChallengeReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8485;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  RogueEliteCellDifficultyType difficulty = 6;
  uint32 cell_id = 10;
  uint32 dungeon_id = 11;
}


message StartRogueEliteCellChallengeRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8967;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 6;
  uint32 cell_id = 8;
  uint32 dungeon_id = 12;
}


message StartRogueNormalCellChallengeReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8247;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 cell_id = 8;
  uint32 dungeon_id = 4;
}


message StartRogueNormalCellChallengeRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8146;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 dungeon_id = 13;
  uint32 cell_id = 8;
  int32 retcode = 11;
}


message StatueGadgetInfo {
  repeated uint32 opened_statue_uid_list = 1;
}


message StopReminderNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3119;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 reminder_id = 3;
}


message StopServerInfo {
  uint32 stop_begin_time = 1;
  uint32 stop_end_time = 2;
  string url = 3;
  string content_msg = 4;
}


message StoreCustomDungeonReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 6250;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint64 dungeon_guid = 12;
  bool is_cancel_store = 11;
}


message StoreCustomDungeonRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 6206;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 5;
}

import "Item.proto";
import "StoreType.proto";

message StoreItemChangeNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 656;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  StoreType store_type = 4;
  repeated Item item_list = 5;
}

import "StoreType.proto";

message StoreItemDelNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 619;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  StoreType store_type = 6;
  repeated uint64 guid_list = 8;
}


enum StoreType {
  STORE_TYPE_NONE = 0;
  STORE_TYPE_PACK = 1;
  STORE_TYPE_DEPOT = 2;
}

import "StoreType.proto";

message StoreWeightLimitNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 630;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 reliquary_count_limit = 14;
  uint32 furniture_count_limit = 10;
  uint32 material_count_limit = 5;
  uint32 weapon_count_limit = 1;
  uint32 weight_limit = 8;
  StoreType store_type = 9;
}


message StrengthenPointData {
  uint32 Unk3300_HIKDEKIPCPB = 1;
  uint32 Unk3300_NNKPOLLBLDO = 10;
}


message SubmitInferenceWordReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 404;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 page_id = 10;
  uint32 word_id = 14;
}


message SubmitInferenceWordRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 423;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 page_id = 4;
  int32 retcode = 3;
  uint32 conclusion_id = 12;
  uint32 word_id = 15;
}

import "SummerTimeSprintBoatInfo.proto";
import "SummerTimeStageInfo.proto";

message SummerTimeDetailInfo {
  map<uint32, SummerTimeStageInfo> stage_map = 9;
  SummerTimeSprintBoatInfo sprint_boat_info = 1;
  bool is_content_closed = 13;
  uint32 content_close_time = 12;
}


message SummerTimeDungeonInfo {
  uint32 dungeon_id = 9;
  uint32 Unk3300_GMKMNHIBPEP = 1;
  uint32 Unk3300_HJHODMOIMKG = 8;
  uint32 Unk3300_GALEDJLAIPM = 5;
  uint32 Unk3300_EGGFJCICOBD = 12;
}

import "Vector.proto";

message SummerTimeFloatSignalPositionNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8701;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  bool is_transfer_anchor = 6;
  uint32 float_signal_id = 15;
  Vector position = 14;
}

import "Vector.proto";

message SummerTimeFloatSignalUpdateNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8508;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  bool is_transfer_anchor = 1;
  Vector position = 7;
  uint32 float_signal_id = 12;
}

import "SummerTimeSprintBoatRecord.proto";

message SummerTimeSprintBoatInfo {
  repeated SummerTimeSprintBoatRecord record_list = 9;
}


message SummerTimeSprintBoatRecord {
  uint32 start_time = 12;
  uint32 group_id = 5;
  repeated uint32 watcher_id_list = 2;
  uint32 best_score = 13;
  bool is_touched = 6;
}


message SummerTimeSprintBoatRestartReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8111;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 group_id = 13;
  uint32 schedule_id = 3;
}


message SummerTimeSprintBoatRestartRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8466;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 schedule_id = 13;
  uint32 group_id = 11;
  int32 retcode = 3;
}


message SummerTimeSprintBoatSettleNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8451;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 score = 6;
  uint32 left_time = 2;
  bool is_success = 4;
  uint32 group_id = 5;
  uint32 Unk3300_PLFMJPNPPLI = 12;
  uint32 total_num = 10;
  bool is_new_record = 15;
  uint32 Unk3300_MEEKFJJIOKE = 14;
}


message SummerTimeStageInfo {
  uint32 open_time = 11;
  uint32 stage_id = 2;
  bool is_open = 14;
}

import "GalleryStopReason.proto";

message SummerTimeV2BoatGallerySettleInfo {
  GalleryStopReason reason = 10;
  uint32 param2 = 12;
  uint32 used_time = 4;
  uint32 param1 = 7;
  uint32 gallery_id = 11;
  uint32 param3 = 6;
}

import "SummerTimeV2BoatGallerySettleInfo.proto";

message SummerTimeV2BoatSettleNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8153;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  bool is_new_record = 15;
  uint32 gallery_id = 2;
  SummerTimeV2BoatGallerySettleInfo settle_info = 13;
  uint32 stage_id = 4;
}


message SummerTimeV2BoatStageInfo {
  bool is_open = 11;
  uint32 stage_id = 13;
  uint32 open_time = 5;
  uint32 best_score = 10;
}

import "SummerTimeV2BoatStageInfo.proto";
import "SummerTimeV2DungeonStageInfo.proto";

message SummerTimeV2DetailInfo {
  bool is_content_closed = 14;
  uint32 Unk3300_BNNMNCKEHHO = 9;
  repeated SummerTimeV2DungeonStageInfo dungeon_stage_info_list = 5;
  uint32 Unk3300_JHBCHFHAGFO = 8;
  repeated SummerTimeV2BoatStageInfo boat_stage_info_list = 3;
}


message SummerTimeV2DungeonSettleInfo {
  uint32 Unk3300_JHBCHFHAGFO = 10;
  bool is_success = 1;
  uint32 Unk3300_BNNMNCKEHHO = 11;
}


message SummerTimeV2DungeonStageInfo {
  bool is_open = 6;
  uint32 stage_id = 3;
  bool is_prev_dungeon_succeed = 12;
  uint32 open_time = 2;
}


message SummerTimeV2RestartBoatGalleryReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8885;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 gallery_id = 2;
}


message SummerTimeV2RestartBoatGalleryRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8225;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 gallery_id = 10;
  int32 retcode = 12;
}


message SummerTimeV2RestartDungeonReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8073;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}


message SummerTimeV2RestartDungeonRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8686;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 15;
}

import "SumoStageData.proto";

message SumoActivityDetailInfo {
  uint32 difficulty_id = 11;
  uint32 last_stage_id = 12;
  map<uint32, SumoStageData> sumo_stage_map = 1;
}


message SumoAvatarInfo {
  bool is_trial = 9;
  uint64 avatar_id = 13;
}


message SumoDungeonAvatar {
  bool is_alive = 13;
  bool is_trial = 4;
  uint64 avatar_guid = 10;
}


message SumoDungeonSettleNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8434;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  bool is_new_record = 4;
  uint32 kill_monster_num = 12;
  uint32 difficulty_id = 3;
  uint32 final_score = 2;
  uint32 kill_elite_monster_num = 15;
  uint32 stage_id = 11;
}

import "SumoDungeonAvatar.proto";

message SumoDungeonTeam {
  repeated SumoDungeonAvatar dungeon_avatar_list = 11;
}

import "SumoDungeonTeam.proto";

message SumoEnterDungeonNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8297;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 Unk3300_DJBJACGHGDM = 15;
  uint32 Unk3300_CBAMLHDMKJF = 7;
  repeated SumoDungeonTeam dungeon_team_list = 14;
  uint32 Unk3300_BNJBIGHIJOC = 5;
  uint32 activity_id = 3;
  uint32 stage_id = 11;
}


message SumoLeaveDungeonNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8567;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }
}


message SumoRestartDungeonReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8725;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}


message SumoRestartDungeonRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8276;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 5;
  uint32 point_id = 8;
  uint32 dungeon_id = 12;
}

import "SumoTeamData.proto";

message SumoSaveTeamReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8022;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 difficulty_id = 6;
  uint32 stage_id = 14;
  uint32 activity_id = 1;
  repeated SumoTeamData team_list = 2;
}

import "SumoTeamData.proto";

message SumoSaveTeamRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8739;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 stage_id = 15;
  uint32 activity_id = 4;
  int32 retcode = 9;
  repeated SumoTeamData team_list = 2;
  uint32 difficulty_id = 14;
}

import "SumoTeamData.proto";

message SumoSelectTeamAndEnterDungeonReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8978;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated SumoTeamData team_list = 15;
  uint32 activity_id = 1;
  uint32 difficulty_id = 5;
  uint32 stage_id = 7;
}

import "SumoTeamData.proto";

message SumoSelectTeamAndEnterDungeonRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8744;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 difficulty_id = 12;
  uint32 activity_id = 9;
  uint32 stage_id = 6;
  int32 retcode = 5;
  repeated SumoTeamData team_list = 3;
}

import "SumoDungeonTeam.proto";

message SumoSetNoSwitchPunishTimeNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8610;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 stage_id = 15;
  uint32 Unk3300_CBAMLHDMKJF = 10;
  uint32 activity_id = 5;
  uint32 Unk3300_BNJBIGHIJOC = 3;
  uint32 Unk3300_DJBJACGHGDM = 9;
  repeated SumoDungeonTeam dungeon_team_list = 2;
}

import "SumoTeamData.proto";

message SumoStageData {
  uint32 stage_id = 2;
  uint32 open_time = 15;
  repeated SumoTeamData team_list = 1;
  uint32 max_score = 7;
  bool is_open = 8;
}


message SumoSwitchTeamReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8738;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 stage_id = 8;
  uint32 activity_id = 6;
}

import "SumoDungeonTeam.proto";

message SumoSwitchTeamRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8201;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 Unk3300_BNJBIGHIJOC = 8;
  uint32 stage_id = 2;
  uint32 activity_id = 15;
  uint32 Unk3300_DJBJACGHGDM = 1;
  repeated SumoDungeonTeam dungeon_team_list = 12;
  int32 retcode = 6;
}

import "SumoAvatarInfo.proto";

message SumoTeamData {
  repeated uint32 skill_id_list = 12;
  repeated SumoAvatarInfo avatar_info_list = 4;
}


enum SvrMsgId {
  SVR_MSG_ID_UNKNOWN = 0;
  SVR_MSG_ID_BLOCK_REFRESH_COUNTDOWN = 1;
  SVR_MSG_ID_AVATAR_REVIVE_BY_STATUE = 2;
  SVR_MSG_ID_DAILY_TASK_REWARD_MAX_NUM = 3;
  SVR_MSG_ID_ROUTINE_TYPE_NOT_OPEN = 4;
  SVR_MSG_ID_ROUTINE_TYPE_REWARD_MAX_NUM = 5;
  SVR_MSG_ID_MECHANICUS_COIN_LIMIT = 6;
}

import "PlayTeamEntityInfo.proto";

message SyncScenePlayTeamEntityNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3393;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 scene_id = 7;
  repeated PlayTeamEntityInfo entity_info_list = 3;
}

import "TeamEntityInfo.proto";

message SyncTeamEntityNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 391;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated TeamEntityInfo team_entity_info_list = 10;
  uint32 scene_id = 1;
}


message TakeAchievementGoalRewardReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2677;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated uint32 id_list = 4;
}

import "ItemParam.proto";

message TakeAchievementGoalRewardRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2681;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint32 id_list = 2;
  repeated ItemParam item_list = 1;
  int32 retcode = 8;
}


message TakeAchievementRewardReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2672;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated uint32 id_list = 9;
}

import "ItemParam.proto";

message TakeAchievementRewardRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2685;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated ItemParam item_list = 6;
  int32 retcode = 1;
  repeated uint32 id_list = 13;
}


message TakeAsterSpecialRewardReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2019;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 schedule_id = 12;
}


message TakeAsterSpecialRewardRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2132;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 5;
  uint32 schedule_id = 1;
}


message TakeBackGivingItemReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 128;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 giving_id = 2;
}


message TakeBackGivingItemRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 196;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 giving_id = 6;
  int32 retcode = 15;
}


message TakeBattlePassMissionPointReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2644;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated uint32 mission_id_list = 3;
}


message TakeBattlePassMissionPointRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2617;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint32 mission_id_list = 13;
  int32 retcode = 5;
}

import "BattlePassRewardTakeOption.proto";

message TakeBattlePassRewardReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2627;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated BattlePassRewardTakeOption take_option_list = 9;
}

import "BattlePassRewardTakeOption.proto";
import "ItemParam.proto";

message TakeBattlePassRewardRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2631;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 6;
  repeated BattlePassRewardTakeOption take_option_list = 7;
  repeated ItemParam item_list = 4;
}


message TakeCityReputationExploreRewardReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2899;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated uint32 explore_id_list = 5;
  uint32 city_id = 3;
}

import "ItemParam.proto";

message TakeCityReputationExploreRewardRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2825;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 5;
  repeated uint32 explore_id_list = 12;
  uint32 city_id = 1;
  repeated ItemParam item_list = 14;
}


message TakeCityReputationLevelRewardReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2856;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 level = 6;
  uint32 city_id = 12;
}

import "ItemParam.proto";

message TakeCityReputationLevelRewardRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2819;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 level = 11;
  repeated ItemParam item_list = 2;
  uint32 city_id = 6;
  int32 retcode = 14;
}


message TakeCityReputationParentQuestReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2843;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 city_id = 8;
  repeated uint32 parent_quest_list = 9;
}

import "ItemParam.proto";

message TakeCityReputationParentQuestRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2861;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  int32 retcode = 3;
  repeated uint32 parent_quest_list = 2;
  uint32 city_id = 14;
  repeated ItemParam item_list = 7;
}


message TakeCompoundOutputReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 134;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 compound_group_id = 4;
  uint32 compound_id = 9;
}

import "ItemParam.proto";

message TakeCompoundOutputRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 195;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated ItemParam item_list = 14;
  int32 retcode = 1;
}


message TakeCoopRewardReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1980;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 reward_config_id = 13;
}


message TakeCoopRewardRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1971;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 11;
  uint32 reward_config_id = 12;
}


message TakeDeliveryDailyRewardReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2075;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 schedule_id = 8;
}


message TakeDeliveryDailyRewardRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2174;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 4;
  uint32 schedule_id = 13;
}


message TakeEffigyFirstPassRewardReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2138;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 challenge_id = 13;
}


message TakeEffigyFirstPassRewardRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2178;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 challenge_id = 10;
  int32 retcode = 4;
}


message TakeEffigyRewardReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2082;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 reward_index = 1;
}


message TakeEffigyRewardRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2099;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 5;
  uint32 reward_index = 14;
}


message TakeFirstShareRewardReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4034;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}


message TakeFirstShareRewardRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4095;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  int32 retcode = 14;
}


message TakeFurnitureMakeReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4506;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 index = 12;
  bool is_fast_finish = 2;
  uint32 make_id = 7;
}

import "FurnitureMakeSlot.proto";
import "ItemParam.proto";

message TakeFurnitureMakeRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4803;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 15;
  repeated ItemParam return_item_list = 5;
  FurnitureMakeSlot furniture_make_slot = 14;
  repeated ItemParam output_item_list = 10;
  uint32 make_id = 3;
}

import "HuntingPair.proto";

message TakeHuntingOfferReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4342;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 city_id = 1;
  HuntingPair hunting_pair = 12;
}

import "HuntingPair.proto";

message TakeHuntingOfferRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4341;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 11;
  uint32 city_id = 3;
  HuntingPair hunting_pair = 9;
}


message TakeInvestigationRewardReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1924;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 id = 15;
}


message TakeInvestigationRewardRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1907;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 11;
  uint32 id = 4;
}


message TakeInvestigationTargetRewardReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1903;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 quest_id = 2;
}


message TakeInvestigationTargetRewardRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1905;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 3;
  uint32 quest_id = 15;
}

import "MaterialDeleteReturnType.proto";

message TakeMaterialDeleteReturnReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 620;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  MaterialDeleteReturnType type = 11;
}


message TakeMaterialDeleteReturnRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 663;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 8;
}


message TakeoffEquipReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 642;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 slot = 9;
  uint64 avatar_guid = 13;
}


message TakeoffEquipRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 690;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 slot = 3;
  int32 retcode = 10;
  uint64 avatar_guid = 7;
}


message TakeOfferingLevelRewardReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2901;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 level = 14;
  uint32 offering_id = 12;
}

import "ItemParam.proto";

message TakeOfferingLevelRewardRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2902;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated ItemParam item_list = 4;
  uint32 offering_id = 12;
  uint32 take_level = 10;
  int32 retcode = 3;
}


message TakePlayerLevelRewardReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 120;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 level = 15;
}


message TakePlayerLevelRewardRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 163;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 reward_id = 10;
  uint32 level = 15;
  int32 retcode = 12;
}


message TakeRegionSearchRewardReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5622;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 id = 8;
  uint32 search_id = 6;
}


message TakeRegionSearchRewardRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5635;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 search_id = 8;
  int32 retcode = 3;
  uint32 id = 1;
}


message TakeResinCardDailyRewardReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4117;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 product_config_id = 1;
}

import "ItemParam.proto";

message TakeResinCardDailyRewardRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4112;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 4;
  repeated ItemParam item_vec = 15;
  uint32 product_config_id = 13;
}


message TakeReunionFirstGiftRewardReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5072;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}


message TakeReunionFirstGiftRewardRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5085;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 4;
  int32 reward_id = 1;
}


message TakeReunionMissionRewardReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5095;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 mission_id = 3;
  uint32 reward_id = 5;
  uint32 reward_index = 6;
}

import "ReunionMissionInfo.proto";

message TakeReunionMissionRewardRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5052;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 reward_id = 13;
  ReunionMissionInfo mission_info = 2;
  uint32 reward_index = 6;
  int32 retcode = 3;
}


message TakeReunionSignInRewardReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5094;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 reward_day = 1;
  uint32 config_id = 11;
}

import "ReunionSignInInfo.proto";

message TakeReunionSignInRewardRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5067;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  ReunionSignInInfo sign_in_info = 13;
  int32 retcode = 7;
}


message TakeReunionWatcherRewardReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5065;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 watcher_id = 14;
  uint32 mission_id = 7;
}


message TakeReunionWatcherRewardRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5068;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 8;
  uint32 mission_id = 14;
  uint32 watcher_id = 9;
}

import "TanukiTravelLevelData.proto";

message TanukiTravelActivityDetailInfo {
  repeated TanukiTravelLevelData tanuki_travel_level_data_list = 5;
  bool is_content_closed = 12;
  uint32 finished_level_index = 15;
}


message TanukiTravelFinishGuideQuestNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8481;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 activity_id = 1;
}


message TanukiTravelLevelData {
  bool is_finish = 7;
  bool is_open = 9;
  uint32 route_id = 8;
}


message TaskVar {
  uint32 key = 2;
  repeated int32 value_list = 7;
}

import "TaskVar.proto";

message TaskVarNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 136;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated TaskVar task_var_list = 13;
}

import "AbilityControlBlock.proto";
import "AbilitySyncStateInfo.proto";

message TeamEnterSceneInfo {
  AbilitySyncStateInfo team_ability_info = 6;
  AbilityControlBlock ability_control_block = 5;
  uint32 team_entity_id = 11;
}

import "AbilitySyncStateInfo.proto";

message TeamEntityInfo {
  uint32 team_entity_id = 3;
  uint32 authority_peer_id = 12;
  AbilitySyncStateInfo team_ability_info = 5;
}

import "AvatarTeamResonanceInfo.proto";

message TeamResonanceChangeNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1090;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated AvatarTeamResonanceInfo info_list = 9;
}

import "ToTheMoonObstacleInfo.proto";

message ToTheMoonAddObstacleReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 6143;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  bool use_edge = 7;
  ToTheMoonObstacleInfo obstacle = 8;
  uint32 scene_id = 13;
  int32 query_id = 5;
}

import "DynamicNodes.proto";

message ToTheMoonAddObstacleRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 6161;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  DynamicNodes dynamic_nodes = 7;
  int32 retcode = 11;
  int32 query_id = 9;
}


message ToTheMoonEnterSceneReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 6119;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 version = 11;
  uint32 scene_id = 13;
}


message ToTheMoonEnterSceneRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 6200;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 15;
}

import "MathQuaternion.proto";
import "Vector.proto";

message ToTheMoonObstacleInfo {
  enum ShapeType {
    SHAPE_TYPE_OBSTACLE_SHAPE_CAPSULE = 0;
    SHAPE_TYPE_OBSTACLE_SHAPE_BOX = 1;
  }

  int32 handle_id = 1;
  ShapeType type = 8;
  Vector half_extents = 7;
  Vector center = 11;
  MathQuaternion rotation = 12;
}

import "ToTheMoonObstacleInfo.proto";

message ToTheMoonObstaclesModifyNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 6157;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated ToTheMoonObstacleInfo add_obstacles = 3;
  bool use_edge = 7;
  uint32 scene_id = 4;
  repeated int32 remove_obstacle_ids = 5;
}


message ToTheMoonPingNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 6156;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}

import "Vector.proto";

message ToTheMoonQueryPathReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 6179;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  enum OptionType {
    OPTION_TYPE_NONE = 0;
    OPTION_TYPE_NORMAL = 1;
  }

  enum AStarMethod {
    A_STAR_METHOD_CLASSIC = 0;
    A_STAR_METHOD_TENDENCY = 1;
    A_STAR_METHOD_ADAPTIVE = 2;
    A_STAR_METHOD_INFLECTION = 3;
  }

  enum FilterType {
    FILTER_TYPE_ALL = 0;
    FILTER_TYPE_AIR = 1;
    FILTER_TYPE_WATER = 2;
  }

  OptionType query_type = 5;
  bool Unk3300_BBLMBILIOGP = 8;
  FilterType filter_type = 13;
  int32 query_id = 2;
  AStarMethod astar_method = 12;
  Vector source_pos = 11;
  Vector destination_pos = 3;
  int32 fuzzy_range = 7;
  bool Unk3300_OFGONAMNIJG = 6;
  uint32 scene_id = 4;
}

import "Vector.proto";

message ToTheMoonQueryPathRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 6130;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  enum PathStatusType {
    PATH_STATUS_TYPE_FAIL = 0;
    PATH_STATUS_TYPE_SUCC = 1;
    PATH_STATUS_TYPE_PARTIAL = 2;
  }

  repeated int64 index = 5;
  repeated Vector corners = 3;
  int32 query_id = 15;
  int32 retcode = 10;
  repeated int32 level = 8;
  PathStatusType query_status = 14;
}


message ToTheMoonRemoveObstacleReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 6147;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  enum ObstacleType {
    OBSTACLE_TYPE_BOX = 0;
    OBSTACLE_TYPE_CAPSULE = 1;
  }

  int32 handle = 15;
  uint32 scene_id = 7;
  int32 query_id = 6;
}

import "DynamicNodes.proto";

message ToTheMoonRemoveObstacleRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 6178;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 14;
  DynamicNodes dynamic_nodes = 12;
  int32 query_id = 5;
}


message TowerAllDataReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2447;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  bool is_interact = 15;
}

import "TowerCurLevelRecord.proto";
import "TowerFloorRecord.proto";
import "TowerMonthlyBrief.proto";

message TowerAllDataRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2478;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 Unk3300_HCDFJBHMHHF = 6;
  uint32 next_schedule_change_time = 8;
  bool is_first_interact = 5;
  uint32 tower_schedule_id = 1;
  uint32 Unk3300_JBACKENDHDG = 10;
  uint32 schedule_start_time = 610;
  int32 retcode = 11;
  uint32 Unk3300_OHCHCJGJIDK = 4;
  uint32 valid_tower_record_num = 2;
  TowerMonthlyBrief last_schedule_monthly_brief = 1245;
  TowerCurLevelRecord cur_level_record = 12;
  repeated TowerFloorRecord tower_floor_record_list = 13;
  TowerMonthlyBrief monthly_brief = 9;
  uint32 Unk3300_LEKODCFPINJ = 7;
  map<uint32, uint32> skip_floor_granted_reward_item_map = 3;
  bool is_finished_entrance_floor = 15;
  map<uint32, uint32> floor_open_time_map = 14;
}


message TowerBriefDataNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2479;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 last_level_index = 6;
  uint32 next_schedule_change_time = 9;
  bool is_finished_entrance_floor = 14;
  uint32 last_floor_index = 1;
  uint32 tower_schedule_id = 11;
  uint32 schedule_start_time = 8;
  uint32 total_star_num = 7;
}


message TowerBuffSelectReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2448;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 tower_buff_id = 7;
}


message TowerBuffSelectRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2499;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 8;
  uint32 tower_buff_id = 6;
}

import "TowerTeam.proto";

message TowerCurLevelRecord {
  repeated uint32 buff_id_list = 14;
  bool is_upper_part = 4;
  uint32 cur_level_index = 6;
  bool is_empty = 1;
  repeated TowerTeam tower_team_list = 8;
  uint32 cur_floor_id = 9;
}

import "TowerCurLevelRecord.proto";

message TowerCurLevelRecordChangeNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2456;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  TowerCurLevelRecord cur_level_record = 1;
}


message TowerDailyRewardProgressChangeNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2419;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 Unk3300_OHCHCJGJIDK = 8;
  uint32 Unk3300_JBACKENDHDG = 6;
}


message TowerEnterLevelReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2427;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 enter_point_id = 3;
}


message TowerEnterLevelRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2439;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint32 tower_buff_id_list = 5;
  uint32 level_index = 3;
  uint32 floor_id = 11;
  int32 retcode = 14;
}


message TowerFightRecordPair {
  uint32 avatar_id = 12;
  uint32 data = 1;
}

import "TowerLevelRecord.proto";

message TowerFloorRecord {
  map<uint32, uint32> passed_level_map = 11;
  repeated TowerLevelRecord passed_level_record_list = 2;
  uint32 floor_id = 12;
  uint32 floor_star_reward_progress = 4;
}

import "TowerFloorRecord.proto";

message TowerFloorRecordChangeNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2430;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  bool is_finished_entrance_floor = 4;
  repeated TowerFloorRecord tower_floor_record_list = 15;
}


message TowerGetFloorStarRewardReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2444;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 floor_id = 11;
}


message TowerGetFloorStarRewardRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2407;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 10;
  uint32 floor_id = 15;
}

import "ItemParam.proto";

message TowerLevelEndNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2433;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  enum ContinueStateType {
    CONTINUE_STATE_TYPE_CAN_NOT_CONTINUE = 0;
    CONTINUE_STATE_TYPE_CAN_ENTER_NEXT_LEVEL = 1;
    CONTINUE_STATE_TYPE_CAN_ENTER_NEXT_FLOOR = 2;
  }

  uint32 continue_state = 2;
  repeated uint32 finished_star_cond_list = 6;
  uint32 next_floor_id = 4;
  bool is_success = 15;
  repeated ItemParam reward_item_list = 10;
}


message TowerLevelRecord {
  repeated uint32 satisfied_cond_list = 13;
  uint32 level_id = 15;
}


message TowerLevelStarCondData {
  bool Unk3300_KBCFDFOAJMM = 14;
  bool Unk3300_CPBCNACKAAK = 5;
  uint32 Unk3300_JGOLBFMJBCL = 11;
  uint32 cond_value = 12;
}

import "TowerLevelStarCondData.proto";

message TowerLevelStarCondNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2410;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated TowerLevelStarCondData cond_data_list = 1;
  uint32 level_index = 8;
  uint32 floor_id = 10;
}


message TowerMiddleLevelChangeTeamNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2480;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }
}


message TowerMonthlyBrief {
  uint32 best_floor_index = 3;
  uint32 total_star_count = 6;
  uint32 best_level_index = 9;
  uint32 tower_schedule_id = 13;
}

import "TowerFightRecordPair.proto";

message TowerMonthlyCombatRecord {
  repeated TowerFightRecordPair most_reveal_avatar_list = 3;
  TowerFightRecordPair Unk3300_EIGEGOGFJND = 8;
  TowerFightRecordPair Unk3300_OALLHJPBOHO = 2;
  TowerFightRecordPair Unk3300_KMCLPHEDNCJ = 14;
  TowerFightRecordPair Unk3300_KIKPMNPKLDG = 7;
  TowerFightRecordPair Unk3300_CCFHOFCIEPF = 15;
}

import "TowerMonthlyBrief.proto";
import "TowerMonthlyCombatRecord.proto";

message TowerMonthlyDetail {
  TowerMonthlyCombatRecord monthly_combat_record = 15;
  TowerMonthlyBrief monthly_brief = 4;
}


message TowerRecordHandbookReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2446;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}

import "TowerMonthlyDetail.proto";

message TowerRecordHandbookRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2475;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 8;
  repeated TowerMonthlyDetail monthly_detail_list = 4;
}


message TowerSurrenderReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2437;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}


message TowerSurrenderRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2489;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 14;
}


message TowerTeam {
  repeated uint64 avatar_guid_list = 5;
  uint32 tower_team_id = 14;
}

import "TowerTeam.proto";

message TowerTeamSelectReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2443;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated TowerTeam tower_team_list = 5;
  uint32 floor_id = 10;
}


message TowerTeamSelectRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2461;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 15;
}


message TrackingIOInfo {
  string client_tz = 10;
  string Unk3300_PIBFPDAMJLE = 12;
  string Unk3300_NMDNLHLAKAM = 7;
  string rydevicetype = 5;
  string Unk3300_CNPIGDOEJPB = 2;
  string Unk3300_CCOGBICMHKG = 9;
  string Unk3300_DJHKHEFPCDK = 1;
}


enum TransmitReason {
  TRANSMIT_REASON_NONE = 0;
  TRANSMIT_REASON_QUEST = 1;
}

import "TreasureMapBonusChallengeInfo.proto";
import "TreasureMapRegionInfo.proto";

message TreasureMapActivityDetailInfo {
  bool is_mp_challenge_touched = 15;
  uint32 total_mp_spot_num = 12;
  uint32 active_region_index = 3;
  repeated TreasureMapBonusChallengeInfo bonus_challenge_list = 13;
  uint32 min_open_player_level = 8;
  uint32 preview_reward_id = 2;
  uint32 treasure_close_time = 1;
  uint32 currency_num = 4;
  repeated TreasureMapRegionInfo region_info_list = 11;
}


message TreasureMapBonusChallengeInfo {
  bool is_done = 5;
  uint32 solution_id = 15;
  map<uint32, bool> fragment_map = 11;
  bool is_active = 13;
  uint32 config_id = 10;
}

import "TreasureMapBonusChallengeInfo.proto";

message TreasureMapBonusChallengeNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2097;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  TreasureMapBonusChallengeInfo info = 13;
}


message TreasureMapCurrencyNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2032;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 currency_num = 3;
}

import "Vector.proto";

message TreasureMapDetectorData {
  uint32 region_id = 1;
  bool is_region_detected = 11;
  uint32 radius = 2;
  repeated Vector spot_list = 7;
  Vector center_pos = 12;
}

import "TreasureMapDetectorData.proto";

message TreasureMapDetectorDataNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4254;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  TreasureMapDetectorData data = 7;
}


message TreasureMapGuideTaskDoneNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2046;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }
}


message TreasureMapHostInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8296;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint32 mp_challenge_region_list = 1;
}


message TreasureMapMpChallengeNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2021;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }
}


message TreasureMapPreTaskDoneNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2177;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }
}


message TreasureMapRegionActiveNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2085;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 active_region_index = 5;
}

import "Vector.proto";

message TreasureMapRegionInfo {
  uint32 region_radius = 13;
  uint32 region_id = 10;
  Vector region_center_pos = 5;
  bool Unk3300_HHBHLPHLHIL = 6;
  uint32 start_time = 8;
  uint32 Unk3300_LKEMEDPMIGM = 3;
  bool Unk3300_NIBJOAJLCJI = 1;
  uint32 scene_id = 12;
  uint32 Unk3300_MNEKJILFHOA = 2;
}

import "TreasureMapRegionInfo.proto";

message TreasureMapRegionInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2179;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  TreasureMapRegionInfo region_info = 7;
}

import "TreasureSeelieRegionData.proto";

message TreasureSeelieActivityDetailInfo {
  uint32 treasure_close_time = 13;
  bool is_content_closed = 15;
  repeated TreasureSeelieRegionData region_data_list = 6;
}


message TreasureSeelieCollectOrbsNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 20380;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 current_num = 12;
  uint32 total_num = 2;
}

import "Vector.proto";

message TreasureSeelieRegionData {
  uint32 region_id = 15;
  bool is_open = 1;
  uint32 open_time = 11;
  Vector region_center_pos = 9;
  uint32 Unk3300_CPHOJNMEDBC = 8;
  float region_radius = 6;
  uint32 Unk3300_KGECOIIKJLJ = 5;
  uint32 Unk3300_AFAMHPCEIKP = 14;
  bool is_done = 10;
  uint32 scene_id = 3;
}

import "TrialAvatarActivityRewardDetailInfo.proto";

message TrialAvatarActivityDetailInfo {
  repeated TrialAvatarActivityRewardDetailInfo reward_info_list = 11;
}


message TrialAvatarActivityRewardDetailInfo {
  uint32 trial_avatar_index_id = 4;
  bool received_reward = 14;
  bool passed_dungeon = 5;
  uint32 reward_id = 11;
}


message TrialAvatarFirstPassDungeonNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2134;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 trial_avatar_index_id = 1;
}


message TrialAvatarGrantRecord {
  enum GrantReason {
    GRANT_REASON_INVALID = 0;
    GRANT_REASON_BY_QUEST = 1;
    GRANT_REASON_BY_TRIAL_AVATAR_ACTIVITY = 2;
    GRANT_REASON_BY_DUNGEON_ELEMENT_CHALLENGE = 3;
    GRANT_REASON_BY_MIST_TRIAL_ACTIVITY = 4;
    GRANT_REASON_BY_SUMO_ACTIVITY = 5;
    GRANT_REASON_BY_POTION_ACTIVITY = 6;
    GRANT_REASON_BY_CRYSTAL_LINK_ACTIVITY = 7;
    GRANT_REASON_BY_IRODORI_MASTER = 8;
    GRANT_REASON_BY_GM = 9;
    GRANT_REASON_BY_INSTABLE_SPRAY_ACTIVITY = 10;
    GRANT_REASON_BY_MUQADAS_POTION_ACTIVITY = 11;
    GRANT_REASON_BY_VINTAGE_HUNTING = 12;
    GRANT_REASON_BY_CHAR_AMUSEMENT = 13;
  }

  uint32 grant_reason = 1;
  uint32 from_parent_quest_id = 2;
}


message TrialAvatarInDungeonIndexNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2063;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 trial_avatar_index_id = 9;
}

import "Item.proto";
import "TrialAvatarGrantRecord.proto";

message TrialAvatarInfo {
  uint32 trial_avatar_id = 1;
  repeated Item trial_equip_list = 2;
  TrialAvatarGrantRecord grant_record = 3;
}


message TriggerCreateGadgetToEquipPartNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 346;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 gadget_entity_id = 1;
  string equip_part = 12;
  uint32 entity_id = 6;
  uint32 gadget_id = 11;
}


message TriggerRoguelikeCurseNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8965;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 Unk3300_POLIENBCNLF = 7;
  uint32 Unk3300_LJHJIBDPBBC = 10;
  bool is_trigger_curse = 11;
  repeated uint32 effect_param_list = 9;
}


message TriggerRoguelikeRuneReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8822;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 rune_id = 11;
}


message TriggerRoguelikeRuneRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8133;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 available_count = 15;
  uint32 rune_id = 10;
  int32 retcode = 4;
}


message TryCustomDungeonReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 6218;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 room_id = 11;
}


message TryCustomDungeonRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 6208;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 room_id = 4;
  int32 retcode = 10;
}


enum TryCustomDungeonType {
  TRY_CUSTOM_DUNGEON_TYPE_NONE = 0;
  TRY_CUSTOM_DUNGEON_TYPE_ROOM = 1;
  TRY_CUSTOM_DUNGEON_TYPE_ALL = 2;
  TRY_CUSTOM_DUNGEON_TYPE_OFFICIAL_PLAY = 3;
}


message TryEnterHomeReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4648;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  bool is_transfer_to_safe_point = 13;
  uint32 target_point = 10;
  uint32 target_uid = 1;
}


message TryEnterHomeRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4796;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint32 param_list = 11;
  uint32 target_uid = 2;
  int32 retcode = 4;
}


message TryEnterNextRogueDiaryDungeonReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8791;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}


message TryEnterNextRogueDiaryDungeonRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8487;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 7;
}


message TryInterruptRogueDiaryDungeonReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8438;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}


message TryInterruptRogueDiaryDungeonRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8234;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 1;
}

import "OfficialCustomDungeon.proto";

message UgcActivityDetailInfo {
  bool is_enable_ugc = 14;
  repeated OfficialCustomDungeon official_custom_dungeon_list = 10;
  uint32 custom_dungeon_group_id = 4;
  bool is_ugc_feature_closed = 9;
}


message UgcMusicBriefInfo {
  uint32 Unk3300_OJOKFBJALIJ = 12;
  bool Unk3300_NCDKCNOLGKB = 15;
  uint32 Unk3300_KMMBLIMKJCM = 5;
  repeated uint32 Unk3300_JEEBFPFEHHG = 526;
  uint32 Unk3300_EGIGIOOKBAB = 42;
  repeated uint32 Unk3300_HKBHAIMOBKO = 65;
  uint32 Unk3300_MBKDGBNFPOA = 1625;
  uint64 import_from_ugc_guid = 13;
  uint64 ugc_guid = 8;
  uint32 Unk3300_PBENMAHHGIL = 7;
  bool Unk3300_FKIGPAJFPLG = 3;
  uint32 version = 11;
  bool is_psn_platform = 2;
  uint32 Unk3300_PLNOFOHFAPE = 4;
  uint32 Unk3300_CCMMPAHIMDO = 95;
  string creator_nickname = 9;
  uint32 music_id = 6;
  bool Unk3300_GDNAPNAINBA = 10;
  uint32 max_score = 1;
  uint32 Unk3300_OBBMCFADNIN = 14;
}


message UgcMusicNote {
  uint32 start_time = 11;
  uint32 end_time = 9;
}

import "UgcMusicTrack.proto";

message UgcMusicRecord {
  uint32 music_id = 1;
  repeated UgcMusicTrack music_track_list = 4;
}

import "UgcMusicNote.proto";

message UgcMusicTrack {
  repeated UgcMusicNote music_note_list = 6;
}


message UgcNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 6308;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  bool Unk3300_IBLDINGJJFI = 8;
  bool is_ugc_feature_closed = 6;
  bool Unk3300_KPABJPMLHCD = 9;
}


enum UgcType {
  UGC_TYPE_NONE = 0;
  UGC_TYPE_MUSIC_GAME = 1;
}


message Uint32Pair {
  uint32 key = 1;
  uint32 value = 2;
}


message UnfreezeGroupLimitNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3483;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 point_id = 15;
  uint32 scene_id = 13;
}


message UnionCmd {
  bytes body = 3;
  uint32 message_id = 4;
}

import "UnionCmd.proto";

message UnionCmdNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 42;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated UnionCmd cmd_list = 7;
}


message Unk3300_ADHENCIFKNI {
  uint64 begin_time = 6;
  uint64 time_stamp = 13;
  uint32 controller_id = 10;
}


message Unk3300_DGBNCDEIIFC {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 952;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint32 monster_id_list = 9;
}


message Unk3300_DMOBAABGOBF {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7193;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  bool is_success = 6;
  string Unk3300_NKHMMPMEILJ = 7;
  string Unk3300_JOCKIGCENGI = 13;
}


message Unk3300_ICAGMOCOALO {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4187;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 match_id = 3;
}


message Unk3300_LOINGBJLJEM {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7048;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  enum Unk3300_KDBJPJADJKF {
    Unk3300_KDBJPJADJKF_Unk3300_EKBFJPGGECM = 0;
    Unk3300_KDBJPJADJKF_Unk3300_NALHJBKMPCH = 1;
  }

  Unk3300_KDBJPJADJKF Unk3300_NOFBEJLNMLA = 4;
}

import "GCGDuel.proto";

message Unk3300_PPKPCOCOMDH {
  uint32 controller_id = 12;
  uint32 op_seq = 13;
  oneof detail {
    string gm_msg = 2;
    GCGDuel duel = 14;
  }
}


message UnlockAvatarTalentReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1079;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 talent_id = 11;
  uint64 avatar_guid = 2;
}


message UnlockAvatarTalentRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1030;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 talent_id = 14;
  uint64 avatar_guid = 1;
  int32 retcode = 3;
}


message UnlockCoopChapterReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1965;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 chapter_id = 14;
}


message UnlockCoopChapterRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1968;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 4;
  uint32 chapter_id = 1;
}


message UnlockedFurnitureFormulaDataNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4716;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  bool is_all = 4;
  repeated uint32 furniture_id_list = 2;
}


message UnlockedFurnitureSuiteDataNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4532;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  bool is_all = 1;
  repeated uint32 furniture_suite_id_list = 3;
}


message UnlockNameCardNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4010;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 name_card_id = 3;
}


message UnlockPersonalLineReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 415;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 personal_line_id = 4;
}


message UnlockPersonalLineRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 421;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 personal_line_id = 4;
  int32 retcode = 12;
  oneof param {
    uint32 level = 10;
    uint32 chapter_id = 3;
  }
}


message UnlockTransPointReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3200;
  //   ENET_CHANNEL_ID = 1;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 scene_id = 10;
  uint32 point_id = 2;
}


message UnlockTransPointRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3046;
  //   ENET_CHANNEL_ID = 1;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 1;
}


message UnmarkEntityInMinMapNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 254;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 entity_id = 3;
}


message UpdateAbilityCreatedMovingPlatformNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 825;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  enum OpType {
    OP_TYPE_NONE = 0;
    OP_TYPE_ACTIVATE = 1;
    OP_TYPE_DEACTIVATE = 2;
  }

  uint32 entity_id = 1;
  OpType op_type = 15;
}


message UpdatePlayerShowAvatarListReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4053;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated uint32 show_avatar_id_list = 10;
  bool is_show_avatar = 6;
}


message UpdatePlayerShowAvatarListRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4024;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 8;
  repeated uint32 show_avatar_id_list = 11;
  bool is_show_avatar = 2;
}


message UpdatePlayerShowNameCardListReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4093;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated uint32 show_name_card_id_list = 11;
}


message UpdatePlayerShowNameCardListRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4054;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 1;
  repeated uint32 show_name_card_id_list = 2;
}


message UpdatePS4BlockListReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4064;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated string psn_id_list = 10;
}


message UpdatePS4BlockListRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4067;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 6;
}


message UpdatePS4FriendListNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4016;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated string psn_id_list = 14;
}


message UpdatePS4FriendListReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4026;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated string psn_id_list = 3;
}


message UpdatePS4FriendListRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4077;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated string psn_id_list = 14;
  int32 retcode = 3;
}

import "RedPointData.proto";

message UpdateRedPointNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 7;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated RedPointData red_point_list = 10;
}

import "ReunionWatcherInfo.proto";

message UpdateReunionWatcherNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5058;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  ReunionWatcherInfo watcher_info = 12;
  uint32 mission_id = 14;
}


message UpdateSalvageBundleMarkReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8906;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 challenge_type = 6;
  uint32 stage_id = 11;
}


message UpdateSalvageBundleMarkRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8620;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 2;
  uint32 stage_id = 4;
  uint32 challenge_type = 5;
}


message UpgradeRoguelikeShikigamiReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8282;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 shikigami_group_id = 15;
  uint32 upgrade_level = 10;
}


message UpgradeRoguelikeShikigamiRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8314;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 shikigami_group_id = 8;
  int32 retcode = 10;
  uint32 cur_level = 5;
}


message UseItemReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 647;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 count = 14;
  uint64 guid = 1;
  uint64 target_guid = 2;
  uint32 option_idx = 8;
  bool is_enter_mp_dungeon_team = 9;
}


message UseItemRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 678;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 option_idx = 9;
  uint32 item_id = 13;
  int32 retcode = 1;
  uint64 guid = 14;
  uint64 target_guid = 10;
}

import "Vector.proto";

message UseMiracleRingReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5242;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  enum MiracleRingOpType {
    MIRACLE_RING_OP_TYPE_NONE = 0;
    MIRACLE_RING_OP_TYPE_PLACE = 1;
    MIRACLE_RING_OP_TYPE_RETRACT = 2;
  }

  Vector rot = 14;
  Vector pos = 13;
  uint32 miracle_ring_op_type = 5;
}


message UseMiracleRingRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5241;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 miracle_ring_op_type = 14;
  int32 retcode = 10;
}

import "Vector.proto";

message UseWidgetCreateGadgetReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4264;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  Vector rot = 12;
  Vector pos = 7;
  uint32 material_id = 10;
}


message UseWidgetCreateGadgetRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4298;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 10;
  uint32 material_id = 12;
}


message UseWidgetRetractGadgetReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4275;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 entity_id = 13;
}


message UseWidgetRetractGadgetRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4263;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 entity_id = 4;
  int32 retcode = 14;
}


message Vector {
  float x = 1;
  float y = 2;
  float z = 3;
}


message Vector3Int {
  int32 x = 1;
  int32 y = 2;
  int32 z = 3;
}


message VectorPlane {
  float x = 1;
  float y = 2;
}

import "VehicleMember.proto";

message VehicleInfo {
  repeated VehicleMember member_list = 1;
  uint32 owner_uid = 2;
  float cur_stamina = 3;
}

import "VehicleInteractType.proto";

message VehicleInteractReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 889;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  VehicleInteractType interact_type = 3;
  uint32 entity_id = 11;
  uint32 pos = 4;
}

import "VehicleInteractType.proto";
import "VehicleMember.proto";

message VehicleInteractRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 844;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 entity_id = 4;
  VehicleMember member = 11;
  int32 retcode = 6;
  VehicleInteractType interact_type = 7;
}


enum VehicleInteractType {
  VEHICLE_INTERACT_TYPE_NONE = 0;
  VEHICLE_INTERACT_TYPE_IN = 1;
  VEHICLE_INTERACT_TYPE_OUT = 2;
}

import "Vector.proto";

message VehicleLocationInfo {
  Vector rot = 5;
  uint32 owner_uid = 11;
  repeated uint32 uid_list = 4;
  float cur_hp = 2;
  Vector pos = 9;
  uint32 gadget_id = 1;
  uint32 entity_id = 14;
  float max_hp = 15;
}


message VehicleMember {
  uint32 uid = 1;
  uint64 avatar_guid = 2;
  uint32 pos = 3;
}


enum VehicleSlot {
  VEHICLE_SLOT_OPERATOR = 0;
}


message VehicleStaminaNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 880;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 entity_id = 12;
  float cur_stamina = 9;
}

import "CodexTypeData.proto";

message ViewCodexReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4206;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated CodexTypeData type_data_list = 12;
}

import "CodexTypeData.proto";

message ViewCodexRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4210;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated CodexTypeData type_data_list = 12;
  repeated uint32 Unk3300_IDNOLALHFFA = 3;
  repeated uint32 Unk3300_CBGDAAOBGNB = 10;
  int32 retcode = 11;
  repeated uint32 recent_viewed_pushtips_list = 14;
}


message ViewLanternProjectionLevelTipsReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8303;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 level_id = 5;
}


message ViewLanternProjectionLevelTipsRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8962;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 11;
}

import "ClientInputType.proto";

message ViewLanternProjectionTipsReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8560;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  ClientInputType input_type = 14;
  bool is_input_tips = 7;
}


message ViewLanternProjectionTipsRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8623;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 6;
}

import "VintageBoothUsedItemData.proto";
import "VintageCampChallengeStageData.proto";
import "VintageHuntingStageData.proto";
import "VintageMarketInfo.proto";
import "VintagePresentStageData.proto";

message VintageActivityDetailInfo {
  map<uint32, VintagePresentStageData> Unk3300_PCIIGPJJHGF = 11;
  bool is_content_closed = 13;
  map<uint32, VintageHuntingStageData> Unk3300_EHHPFKIOKOO = 10;
  VintageBoothUsedItemData booth_data = 9;
  map<uint32, VintageCampChallengeStageData> camp_stage_map = 2;
  VintageMarketInfo market_info = 14;
}


message VintageBoothUsedItemData {
  bool is_open = 10;
  uint32 gadget_id = 3;
}


message VintageCampChallengeLevelData {
  bool is_finish = 13;
  uint32 stage_id = 15;
  uint32 level_id = 1;
  bool is_open = 12;
}

import "VintageCampChallengeLevelData.proto";

message VintageCampChallengeStageData {
  uint32 max_finished_level = 4;
  bool is_finish = 14;
  map<uint32, VintageCampChallengeLevelData> camp_level_map = 6;
  bool is_open = 2;
  uint32 stage_id = 13;
  uint32 open_time = 7;
}


message VintageCampGroupBundleRegisterNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 24329;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 group_bundle_id = 7;
}


message VintageCampStageFinishNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 21839;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 stage_id = 3;
}

import "CustomGadgetTreeInfo.proto";

message VintageDecorateBoothReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 22958;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 entity_id = 13;
  CustomGadgetTreeInfo combination_info = 5;
}


message VintageDecorateBoothRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 21588;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 3;
}


message VintageHuntingFirstStageInfo {
  uint32 Unk3300_HIKADHBLPEB = 10;
  uint32 score = 7;
  uint32 Unk3300_IPAJLKOBDKC = 3;
  uint32 Unk3300_NILGNHOPGLD = 15;
}


message VintageHuntingFirstStageSettleInfo {
  uint32 Unk3300_HIKADHBLPEB = 2;
  uint32 score = 1;
  uint32 Unk3300_NILGNHOPGLD = 3;
  uint32 Unk3300_IPAJLKOBDKC = 11;
}


message VintageHuntingSecondStageInfo {
  uint32 left_num = 15;
  uint32 total_num = 13;
  uint32 capture_animal_num = 10;
}


message VintageHuntingSecondStageSettleInfo {
  uint32 capture_animal_num = 2;
  map<uint32, uint32> animal_count_map = 3;
  uint32 total_num = 1;
}


message VintageHuntingStageData {
  uint32 record_value = 11;
  uint32 open_time = 5;
  uint32 stage_id = 10;
  bool is_finish = 12;
  bool is_open = 4;
}


message VintageHuntingStartGalleryReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 21649;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 stage_id = 3;
}


message VintageHuntingStartGalleryRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 22068;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 13;
}


message VintageHuntingThirdStageInfo {}


message VintageHuntingThirdStageSettleInfo {
  bool is_success = 2;
  uint32 left_time = 3;
}

import "VintageMarketTraderInfo.proto";

message VintageMarketDealInfo {
  map<uint32, VintageMarketTraderInfo> trader_item_info_map = 5;
}

import "ItemParam.proto";

message VintageMarketDeliverItemReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 21131;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated ItemParam deliver_item_list = 12;
  uint32 trader_id = 3;
}


message VintageMarketDeliverItemRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 23763;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 9;
  uint32 trader_id = 6;
}


message VintageMarketDividendFinishNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 22064;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 coin_a = 2;
  uint32 coin_c = 14;
}

import "VintageMarketStoreOpInfo.proto";

message VintageMarketFinishStorePlayReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 21911;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 store_round = 12;
  repeated VintageMarketStoreOpInfo store_op_list = 11;
}


message VintageMarketFinishStorePlayRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 20941;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 store_round = 10;
  repeated uint32 Unk3300_HJIHIOIGAPP = 15;
  int32 retcode = 9;
  map<uint32, uint32> store_income_map = 2;
  uint32 Unk3300_DJILELFHFHJ = 6;
  repeated uint32 Unk3300_OCIMKEPJOOL = 3;
  uint32 Unk3300_GCDNOPJEIBG = 4;
  repeated uint32 Unk3300_BDAIONEPKIK = 1;
  uint32 Unk3300_DGECJOKMDGN = 11;
  uint32 Unk3300_DLNFCBPDBBH = 14;
}

import "VintageMarketDealInfo.proto";
import "VintageMarketStoreInfo.proto";

message VintageMarketInfo {
  map<uint32, bool> bargain_info_map = 9;
  bool Unk3300_FJDIMCJEAOB = 8;
  repeated uint32 Unk3300_COKBOKAOCNJ = 1007;
  uint32 help_skill_id = 760;
  repeated uint32 Unk3300_ABHHACBDCFI = 7;
  repeated VintageMarketStoreInfo open_store_list = 2;
  repeated uint32 Unk3300_EDBJLBICEJF = 10;
  bool Unk3300_PAMKPAOCJJJ = 11;
  uint32 Unk3300_FOPKAIIAMFM = 1826;
  bool Unk3300_NBNOJJBNJPB = 470;
  VintageMarketDealInfo deal_info = 12;
  uint32 store_round = 3;
  repeated uint32 unlock_strategy_list = 13;
  repeated uint32 Unk3300_AIAMBBODLBO = 14;
  bool Unk3300_NDFHAGHBCFN = 6;
  uint32 Unk3300_LMNLHHPMAMN = 1;
  bool Unk3300_ALHLENELIEO = 1594;
  uint32 Unk3300_ACJLANLBCGK = 1658;
  uint32 Unk3300_HHKKEDDIGLA = 5;
  bool Unk3300_KJDEFIBKBPE = 4;
  bool Unk3300_ICJOCDGLFFD = 15;
  bool Unk3300_NMHHGNPKBEL = 1721;
}


message VintageMarketNpcEventFinishNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 24781;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 coin_a = 3;
  uint32 coin_c = 9;
  repeated uint32 unlock_strategy_list = 12;
}


message VintageMarketStartStorePlayReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 22447;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 store_round = 14;
}


message VintageMarketStartStorePlayRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 23017;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 store_round = 10;
  uint32 Unk3300_LCCNEKGONFG = 9;
  int32 retcode = 1;
  uint32 Unk3300_ADJKIIJFNME = 15;
}

import "VintageMarketStoreOpInfo.proto";

message VintageMarketStoreChooseStrategyReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 21624;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated VintageMarketStoreOpInfo store_op_list = 5;
  repeated uint32 strategy_list = 15;
  uint32 store_id = 14;
}


message VintageMarketStoreChooseStrategyRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 21298;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 14;
  uint32 store_id = 11;
  repeated uint32 strategy_list = 3;
}


message VintageMarketStoreInfo {
  uint32 store_id = 13;
  repeated uint32 Unk3300_HNBGHCCENIA = 1;
  repeated uint32 strategy_list = 10;
  repeated uint32 Unk3300_ODLLANKOEND = 7;
  uint32 slot_count = 5;
}


message VintageMarketStoreOpInfo {
  uint32 help_uid = 11;
  uint32 help_skill_id = 10;
  uint32 store_id = 8;
  repeated uint32 add_attr_list = 12;
  repeated uint32 strategy_list = 9;
}


message VintageMarketStoreUnlockSlotReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 22367;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 store_id = 8;
}


message VintageMarketStoreUnlockSlotRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 23327;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 15;
  uint32 store_id = 14;
  uint32 slot_count = 3;
}


message VintageMarketStoreViewStrategyReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 21834;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 strategy_id = 9;
  repeated uint32 strategy_list = 1;
}


message VintageMarketStoreViewStrategyRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 22881;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 9;
  repeated uint32 strategy_list = 6;
  uint32 strategy_id = 4;
}

import "ItemParam.proto";

message VintageMarketTraderInfo {
  uint32 trader_id = 4;
  repeated ItemParam available_item_list = 15;
}


message VintagePresentFinishNoify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 21400;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 present_id = 2;
}


message VintagePresentFinishNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 20454;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 present_id = 2;
}


message VintagePresentLevelData {
  bool is_finish = 6;
  bool is_open = 3;
  uint32 stage_id = 9;
  uint32 present_id = 1;
}

import "VintagePresentLevelData.proto";

message VintagePresentStageData {
  bool is_open = 4;
  bool is_finish = 10;
  map<uint32, VintagePresentLevelData> present_level_map = 11;
  uint32 open_time = 8;
  uint32 stage_id = 1;
}


enum VirtualItem {
  VIRTUAL_ITEM_VIRTUAL_NONE = 0;
  VIRTUAL_ITEM_VIRTUAL_AVATAR_EXP = 101;
  VIRTUAL_ITEM_VIRTUAL_PLAYER_EXP = 102;
  VIRTUAL_ITEM_VIRTUAL_FETTER_EXP = 105;
  VIRTUAL_ITEM_VIRTUAL_RESIN = 106;
  VIRTUAL_ITEM_VIRTUAL_LEGENDARY_KEY = 107;
  VIRTUAL_ITEM_VIRTUAL_ASTER_PROGRESS = 108;
  VIRTUAL_ITEM_VIRTUAL_ASTER_CREDIT = 109;
  VIRTUAL_ITEM_VIRTUAL_ASTER_TOKEN = 110;
  VIRTUAL_ITEM_VIRTUAL_SHIMMERING_ESSENCE = 111;
  VIRTUAL_ITEM_VIRTUAL_WARM_ESSENCE = 112;
  VIRTUAL_ITEM_VIRTUAL_WONDROUS_ESSENCE = 113;
  VIRTUAL_ITEM_VIRTUAL_TREASURE_MAP_TOKEN = 114;
  VIRTUAL_ITEM_VIRTUAL_SEA_LAMP_COIN = 115;
  VIRTUAL_ITEM_VIRTUAL_SEA_LAMP_POPULARITY = 116;
  VIRTUAL_ITEM_VIRTUAL_MECHANICUS_COIN = 117;
  VIRTUAL_ITEM_VIRTUAL_FLEUR_FAIR_CREDIT = 118;
  VIRTUAL_ITEM_VIRTUAL_FLEUR_FAIR_TOKEN = 119;
  VIRTUAL_ITEM_VIRTUAL_WATER_SPIRIT_COIN = 120;
  VIRTUAL_ITEM_VIRTUAL_HOME_EXP = 121;
  VIRTUAL_ITEM_VIRTUAL_CHANNELLER_SLAB_TOKEN = 122;
  VIRTUAL_ITEM_VIRTUAL_HIDE_AND_SEEK_COIN = 123;
  VIRTUAL_ITEM_VIRTUAL_SUMMER_TIME_DRAFT_WOOD = 124;
  VIRTUAL_ITEM_VIRTUAL_SUMMER_TIME_MINI_HARPASTUM = 125;
  VIRTUAL_ITEM_VIRTUAL_BOUNCE_CONJURING_COIN = 126;
  VIRTUAL_ITEM_VIRTUAL_BLITZ_RUSH_COIN_A = 127;
  VIRTUAL_ITEM_VIRTUAL_BLITZ_RUSH_COIN_B = 128;
  VIRTUAL_ITEM_VIRTUAL_CHESS_EXP = 129;
  VIRTUAL_ITEM_VIRTUAL_CHESS_COIN = 130;
  VIRTUAL_ITEM_VIRTUAL_LUNA_RITE_ATMOSPHERE = 131;
  VIRTUAL_ITEM_VIRTUAL_ROGUELIKE_COIN_A = 132;
  VIRTUAL_ITEM_VIRTUAL_ROGUELIKE_COIN_B = 133;
  VIRTUAL_ITEM_VIRTUAL_ROGUELIKE_COIN_C = 134;
  VIRTUAL_ITEM_VIRTUAL_WINTER_CAMP_COIN_A = 135;
  VIRTUAL_ITEM_VIRTUAL_WINTER_CAMP_COIN_B = 136;
  VIRTUAL_ITEM_VIRTUAL_LANTERN_RITE_COIN_A = 137;
  VIRTUAL_ITEM_VIRTUAL_LANTERN_RITE_COIN_B = 138;
  VIRTUAL_ITEM_VIRTUAL_LANTERN_RITE_COIN_C = 139;
  VIRTUAL_ITEM_VIRTUAL_ROGUE_DIARY_COIN = 140;
  VIRTUAL_ITEM_VIRTUAL_SUMMER_TIME_V2_COIN = 141;
  VIRTUAL_ITEM_VIRTUAL_ROGUE_DIARY_DUNGEON_COIN = 142;
  VIRTUAL_ITEM_VIRTUAL_GRAVEN_INNOCENCE_COIN_A = 143;
  VIRTUAL_ITEM_VIRTUAL_GRAVEN_INNOCENCE_COIN_B = 144;
  VIRTUAL_ITEM_VIRTUAL_TREASURE_SEELIE_COIN = 145;
  VIRTUAL_ITEM_VIRTUAL_VINTAGE_POPULARITY = 147;
  VIRTUAL_ITEM_VIRTUAL_GCG_EXP = 146;
  VIRTUAL_ITEM_VIRTUAL_VINTAGE_MARKET_COIN_A = 148;
  VIRTUAL_ITEM_VIRTUAL_VINTAGE_MARKET_COIN_B = 149;
  VIRTUAL_ITEM_VIRTUAL_VINTAGE_MARKET_COIN_C = 150;
  VIRTUAL_ITEM_VIRTUAL_FUNGUS_FIGHTER_CAPTURE_COIN = 151;
  VIRTUAL_ITEM_VIRTUAL_FUNGUS_FIGHTER_TRAINING_COIN = 152;
  VIRTUAL_ITEM_VIRTUAL_EFFIGY_CHALLENGE_V2_COIN = 153;
  VIRTUAL_ITEM_VIRTUAL_BRICK_BREAKER_COIN = 155;
  VIRTUAL_ITEM_VIRTUAL_HCOIN = 201;
  VIRTUAL_ITEM_VIRTUAL_SCOIN = 202;
  VIRTUAL_ITEM_VIRTUAL_MCOIN = 203;
  VIRTUAL_ITEM_VIRTUAL_HOME_COIN = 204;
  VIRTUAL_ITEM_VIRTUAL_GCG_COIN = 205;
  VIRTUAL_ITEM_VIRTUAL_INAZUMA_REPUTATION = 314;
  VIRTUAL_ITEM_VIRTUAL_MENGDE_REPUTATION = 315;
  VIRTUAL_ITEM_VIRTUAL_SUMERU_REPUTATION = 316;
  VIRTUAL_ITEM_VIRTUAL_LIYUE_REPUTATION = 317;
}


enum VisionType {
  VISION_TYPE_NONE = 0;
  VISION_TYPE_MEET = 1;
  VISION_TYPE_REBORN = 2;
  VISION_TYPE_REPLACE = 3;
  VISION_TYPE_WAYPOINT_REBORN = 4;
  VISION_TYPE_MISS = 5;
  VISION_TYPE_DIE = 6;
  VISION_TYPE_GATHER_ESCAPE = 7;
  VISION_TYPE_REFRESH = 8;
  VISION_TYPE_TRANSPORT = 9;
  VISION_TYPE_REPLACE_DIE = 10;
  VISION_TYPE_REPLACE_NO_NOTIFY = 11;
  VISION_TYPE_BORN = 12;
  VISION_TYPE_PICKUP = 13;
  VISION_TYPE_REMOVE = 14;
  VISION_TYPE_CHANGE_COSTUME = 15;
  VISION_TYPE_FISH_REFRESH = 16;
  VISION_TYPE_FISH_BIG_SHOCK = 17;
  VISION_TYPE_FISH_QTE_SUCC = 18;
  VISION_TYPE_CAPTURE_DISAPPEAR = 19;
}


message WatcherAllDataNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2279;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint32 watcher_list = 13;
}


message WatcherChangeNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2230;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint32 removed_watcher_list = 10;
  repeated uint32 new_watcher_list = 5;
}


message WatcherEventNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2256;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 add_progress = 2;
  uint32 watcher_id = 14;
}


message WatcherEventStageNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2300;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 add_progress = 2;
  uint32 watcher_id = 15;
  uint32 stage = 11;
}


message WatcherEventTypeNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2219;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated uint32 param_list = 4;
  uint32 add_progress = 13;
  uint32 watcher_trigger_type = 2;
}


message WaterSpiritActivityDetailInfo {
  map<uint32, uint32> search_time_map = 13;
  uint32 region_search_id = 4;
  uint32 mp_play_id = 9;
}


message WaterSpritePhaseFinishNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2120;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }
}


message Weapon {
  uint32 level = 1;
  uint32 exp = 2;
  uint32 promote_level = 3;
  map<uint32, uint32> affix_map = 4;
}


message WeaponAwakenReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 633;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  map<uint32, uint32> affix_level_map = 13;
  uint64 target_weapon_guid = 5;
  uint64 item_guid = 6;
}


message WeaponAwakenRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 610;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  map<uint32, uint32> cur_affix_level_map = 3;
  uint64 avatar_guid = 8;
  int32 retcode = 9;
  uint64 target_weapon_guid = 14;
  map<uint32, uint32> old_affix_level_map = 15;
  uint32 target_weapon_awaken_level = 2;
}


message WeaponPromoteReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 637;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint64 target_weapon_guid = 14;
}


message WeaponPromoteRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 689;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 old_promote_level = 4;
  uint64 target_weapon_guid = 11;
  uint32 cur_promote_level = 5;
  int32 retcode = 8;
}

import "ItemParam.proto";

message WeaponUpgradeReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 616;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated ItemParam item_param_list = 2;
  repeated uint64 food_weapon_guid_list = 14;
  uint64 target_weapon_guid = 3;
}

import "ItemParam.proto";

message WeaponUpgradeRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 673;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 old_level = 14;
  uint64 target_weapon_guid = 3;
  uint32 cur_level = 6;
  repeated ItemParam item_param_list = 8;
  int32 retcode = 10;
}


message WearEquipReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 699;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint64 avatar_guid = 3;
  uint64 equip_guid = 13;
}


message WearEquipRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 625;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 3;
  uint64 equip_guid = 1;
  uint64 avatar_guid = 14;
}


message WeatherInfo {
  uint32 weather_area_id = 1;
}


message WeatherWizardData {
  uint32 shield_value = 6;
}

import "Vector.proto";

message WeekendDjinnInfo {
  Vector pos = 13;
  Vector rot = 6;
}


message WeeklyBossResinDiscountInfo {
  uint32 discount_num = 1;
  uint32 discount_num_limit = 2;
  uint32 resin_cost = 3;
  uint32 original_resin_cost = 4;
}

import "WidgetSlotData.proto";

message WidgetActiveChangeNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4297;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated WidgetSlotData widget_data_list = 15;
}


message WidgetCameraInfo {
  uint32 target_entity_id = 7;
}

import "Vector.proto";

message WidgetCaptureAnimalReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4279;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 entity_id = 6;
  uint32 material_id = 3;
  Vector pos = 1;
}

import "Vector.proto";

message WidgetCaptureAnimalRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4296;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 4;
  uint32 material_id = 7;
  uint32 entity_id = 11;
  Vector pos = 10;
}


message WidgetCoolDownData {
  uint32 id = 2;
  bool is_success = 13;
  uint64 cool_down_time = 7;
}

import "WidgetCoolDownData.proto";

message WidgetCoolDownNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4268;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated WidgetCoolDownData normal_cool_down_data_list = 2;
  repeated WidgetCoolDownData group_cool_down_data_list = 14;
}

import "Vector.proto";

message WidgetCreateLocationInfo {
  Vector pos = 12;
  Vector rot = 4;
}

import "WidgetCreateLocationInfo.proto";
import "WidgetCreatorOpType.proto";

message WidgetCreatorInfo {
  WidgetCreatorOpType op_type = 14;
  uint32 entity_id = 12;
  WidgetCreateLocationInfo location_info = 9;
}


enum WidgetCreatorOpType {
  WIDGET_CREATOR_OP_TYPE_NONE = 0;
  WIDGET_CREATOR_OP_TYPE_RETRACT = 1;
  WIDGET_CREATOR_OP_TYPE_RETRACT_AND_CREATE = 2;
}

import "WidgetCreateLocationInfo.proto";
import "WidgetCreatorInfo.proto";

message WidgetDoBagReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4269;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 material_id = 11;
  oneof op_info {
    WidgetCreateLocationInfo location_info = 434;
    WidgetCreatorInfo widget_creator_info = 1338;
  }
}


message WidgetDoBagRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4299;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 material_id = 6;
  int32 retcode = 14;
}


enum WidgetExtraCdType {
  WIDGET_EXTRA_CD_TYPE_NONE = 0;
  WIDGET_EXTRA_CD_TYPE_E_SKILL_SHARED = 1;
}

import "WidgetGadgetData.proto";

message WidgetGadgetAllDataNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4288;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated WidgetGadgetData widget_gadget_data = 1;
}


message WidgetGadgetData {
  repeated uint32 gadget_entity_id_list = 6;
  uint32 gadget_id = 2;
}

import "WidgetGadgetData.proto";

message WidgetGadgetDataNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4276;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  WidgetGadgetData widget_gadget_data = 3;
}


message WidgetGadgetDestroyNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4257;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 entity_id = 4;
}

import "HitTreeInfo.proto";

message WidgetQuickHitTreeReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3068;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated HitTreeInfo hit_tree_info_list = 4;
}


message WidgetQuickHitTreeRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3250;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 5;
}


message WidgetReportReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4258;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 weather_wizard_shield_value = 8;
  bool Unk3300_APDFKKNKIJJ = 7;
  bool Unk3300_BCAIBKDIHHF = 6;
  uint32 material_id = 2;
  bool Unk3300_EFBCLDDKMIM = 14;
}


message WidgetReportRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4295;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 material_id = 4;
  int32 retcode = 5;
}

import "WidgetSlotData.proto";
import "WidgetSlotOp.proto";

message WidgetSlotChangeNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4278;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  WidgetSlotOp op = 5;
  WidgetSlotData slot = 2;
}

import "WidgetSlotTag.proto";

message WidgetSlotData {
  uint32 cd_over_time = 15;
  bool is_active = 3;
  uint32 material_id = 8;
  WidgetSlotTag tag = 11;
}


enum WidgetSlotOp {
  WIDGET_SLOT_OP_ATTACH = 0;
  WIDGET_SLOT_OP_DETACH = 1;
}


enum WidgetSlotTag {
  WIDGET_SLOT_TAG_QUICK_USE = 0;
  WIDGET_SLOT_TAG_ATTACH_AVATAR = 1;
}


message WidgetThunderBirdFeatherInfo {
  repeated uint32 entity_id_list = 9;
}

import "WidgetExtraCdType.proto";

message WidgetUpdateExtraCDReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5907;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 material_id = 6;
  WidgetExtraCdType extra_cd_type = 7;
  uint32 cd_group = 14;
}

import "WidgetCoolDownData.proto";
import "WidgetExtraCdType.proto";

message WidgetUpdateExtraCDRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 6076;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  WidgetCoolDownData cool_data = 10;
  WidgetExtraCdType extra_cd_type = 5;
  int32 retcode = 13;
  uint32 cd_group = 11;
  uint32 material_id = 7;
}


message WidgetUseAttachAbilityGroupChangeNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 4290;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 material_id = 15;
  bool is_attach = 7;
}


message WidgetWeatherWizardDataNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5952;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 shield_value = 12;
}

import "WindFieldStageInfo.proto";

message WindFieldDetailInfo {
  repeated WindFieldStageInfo stage_info_list = 2;
}


enum WindFieldDungeonFailReason {
  WIND_FIELD_DUNGEON_FAIL_REASON_NONE = 0;
  WIND_FIELD_DUNGEON_FAIL_REASON_CANCEL = 1;
  WIND_FIELD_DUNGEON_FAIL_REASON_TIMEOUT = 2;
  WIND_FIELD_DUNGEON_FAIL_REASON_ALL_AVATAR_DIE = 3;
  WIND_FIELD_DUNGEON_FAIL_REASON_LUA_INTERRUPT = 4;
}

import "WindFieldDungeonFailReason.proto";

message WindFieldDungeonSettleInfo {
  repeated uint32 Unk3300_FJGFOJBGBKM = 7;
  WindFieldDungeonFailReason fail_reason = 3;
  repeated uint32 Unk3300_EMCOILGACOC = 1;
}


message WindFieldGalleryChallengeInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5503;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 Unk3300_FFODAKMKGEK = 13;
  bool is_start = 2;
  uint32 Unk3300_GLNHBJJJINK = 5;
  uint32 Unk3300_NBIBKFKOCFK = 3;
  bool is_success = 7;
  uint32 Unk3300_GNJKOCLJFNM = 8;
  uint32 Unk3300_MMONPDMIEBN = 10;
}


message WindFieldGalleryInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 5572;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 Unk3300_GNJKOCLJFNM = 6;
  uint32 Unk3300_NBIBKFKOCFK = 15;
  uint32 Unk3300_OJHJPBCAONA = 7;
  uint32 Unk3300_EKMHMHJDHIL = 14;
  uint32 Unk3300_MMONPDMIEBN = 13;
  uint32 Unk3300_FFODAKMKGEK = 9;
  uint32 Unk3300_GNKCFHMDOHJ = 4;
  uint32 Unk3300_GLNHBJJJINK = 2;
}


message WindFieldRestartDungeonReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 24309;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}


message WindFieldRestartDungeonRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 20706;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 8;
}


message WindFieldStageInfo {
  uint32 stage_id = 10;
  bool is_open = 4;
  uint32 open_time = 8;
}

import "Vector.proto";

message WindSeedClientNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 1157;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  message RefreshNotify {
    uint32 refresh_num = 7;
  }

  message AddWindBulletNotify {
    Vector seed_pos = 14;
    uint32 Unk3300_CKIKKCAFJBC = 7;
    uint32 Unk3300_MPDFAPBDJAH = 11;
  }

  message AreaNotify {
    uint32 area_id = 12;
    bytes area_code = 10;
    uint32 area_type = 13;
  }

  oneof notify {
    RefreshNotify refresh_notify = 14;
    AddWindBulletNotify add_wind_bullet_notify = 7;
    AreaNotify area_notify = 5;
  }
}


message WinterCampAcceptAllGiveItemReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8538;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}

import "WinterCampAcceptItemResultInfo.proto";

message WinterCampAcceptAllGiveItemRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8731;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 11;
  repeated WinterCampAcceptItemResultInfo accept_item_result_info = 1;
}


message WinterCampAcceptGiveItemReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8516;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 uid = 4;
}

import "WinterCampAcceptItemResultInfo.proto";

message WinterCampAcceptGiveItemRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8966;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  WinterCampAcceptItemResultInfo accept_item_result_info = 15;
  int32 retcode = 6;
}

import "ItemParam.proto";

message WinterCampAcceptItemResultInfo {
  repeated ItemParam Unk3300_ILELLFNPDFJ = 15;
  repeated ItemParam Unk3300_JHKOMCFHAOG = 13;
  uint32 uid = 9;
}

import "ItemParam.proto";
import "WinterCampRaceStageInfo.proto";
import "WinterCampStageInfo.proto";

message WinterCampActivityDetailInfo {
  WinterCampStageInfo explore_info = 3;
  repeated uint32 Unk3300_KCGKNJFGCFC = 4;
  bool is_content_closed = 12;
  repeated uint32 Unk3300_CMNIBPMOECO = 5;
  repeated uint32 Unk3300_FHNNJJDGLOO = 6;
  repeated ItemParam used_item_list = 14;
  WinterCampStageInfo battle_info = 9;
  repeated WinterCampRaceStageInfo race_info_list = 13;
}

import "CustomGadgetTreeInfo.proto";

message WinterCampEditSnowmanCombinationReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8157;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 entity_id = 6;
  CustomGadgetTreeInfo combination_info = 5;
}


message WinterCampEditSnowmanCombinationRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8951;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 1;
}

import "ProfilePicture.proto";

message WinterCampFriendWishData {
  repeated uint32 item_id_list = 9;
  string nickname = 15;
  uint32 uid = 6;
  ProfilePicture profile_picture = 10;
}


message WinterCampGetCanGiveFriendItemReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8443;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}

import "ItemParam.proto";

message WinterCampGetCanGiveFriendItemRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8021;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 12;
  repeated ItemParam item_list = 14;
}


message WinterCampGetFriendWishListReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8764;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}

import "WinterCampFriendWishData.proto";

message WinterCampGetFriendWishListRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8208;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated WinterCampFriendWishData wish_data_list = 3;
  int32 retcode = 15;
}


message WinterCampGetRecvItemListReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8794;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}

import "WinterCampRecvItemData.proto";

message WinterCampGetRecvItemListRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8957;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated WinterCampRecvItemData recv_item_data_list = 6;
  int32 retcode = 5;
}

import "ItemParam.proto";

message WinterCampGiveFriendItemReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8102;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 uid = 11;
  repeated ItemParam item_list = 3;
}


message WinterCampGiveFriendItemRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8735;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint32 limit_item_id_list = 3;
  int32 retcode = 15;
}


message WinterCampRaceScoreNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8960;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 max_score = 9;
  uint32 id = 4;
}

import "Vector.proto";

message WinterCampRaceStageInfo {
  uint32 id = 2;
  Vector pos = 6;
  uint32 open_time = 5;
  uint32 max_score = 4;
}

import "ItemParam.proto";
import "ProfilePicture.proto";

message WinterCampRecvItemData {
  string nickname = 8;
  uint32 uid = 6;
  ProfilePicture profile_picture = 1;
  repeated ItemParam item_list = 3;
}

import "WinterCampRecvItemData.proto";

message WinterCampRecvItemNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8952;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  WinterCampRecvItemData recv_item_data = 11;
}


message WinterCampSetWishListReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8380;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated uint32 item_id_list = 1;
}


message WinterCampSetWishListRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8288;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 10;
  repeated uint32 item_id_list = 3;
}

import "Vector.proto";

message WinterCampStageInfo {
  uint32 open_time = 3;
  uint32 total_progress = 2;
  uint32 cur_progress = 9;
  uint32 id = 1;
  Vector pos = 14;
  bool is_finished = 8;
}

import "WinterCampStageInfo.proto";

message WinterCampStageInfoChangeNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8878;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  WinterCampStageInfo explore_info = 5;
  WinterCampStageInfo battle_info = 15;
}


message WinterCampTakeBattleRewardReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8484;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 id = 14;
}


message WinterCampTakeBattleRewardRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8310;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 6;
  uint32 id = 13;
}


message WinterCampTakeExploreRewardReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8014;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 id = 11;
}


message WinterCampTakeExploreRewardRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8323;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 id = 8;
  int32 retcode = 15;
}


message WinterCampTriathlonRestartReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8524;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 gallery_id = 12;
}


message WinterCampTriathlonRestartRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8468;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 gallery_id = 9;
  int32 retcode = 10;
}


message WinterCampTriathlonSettleNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 8194;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 Unk3300_ACDOMBHMNJG = 11;
  bool is_success = 10;
  uint32 score = 15;
  bool is_new_record = 7;
  uint32 gallery_id = 14;
  uint32 Unk3300_OEFOGONENFN = 12;
  uint32 remain_time = 6;
  uint32 Unk3300_EMNKJGKNCMP = 5;
}


message WorktopInfo {
  repeated uint32 option_list = 1;
  bool is_guest_can_operate = 2;
}


message WorktopOptionNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 819;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated uint32 option_list = 10;
  uint32 gadget_entity_id = 8;
}

import "WorldRoutineTypeInfo.proto";

message WorldAllRoutineTypeNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3541;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated WorldRoutineTypeInfo world_routine_type_list = 9;
}


message WorldChestOpenNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3242;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 scene_id = 9;
  uint32 group_id = 5;
  uint32 config_id = 3;
}

import "PropValue.proto";

message WorldDataNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3436;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  enum DataType {
    DATA_TYPE_NONE = 0;
    DATA_TYPE_WORLD_LEVEL = 1;
    DATA_TYPE_IS_IN_MP_MODE = 2;
  }

  map<uint32, PropValue> world_prop_map = 6;
}

import "BlossomBriefInfo.proto";

message WorldOwnerBlossomBriefInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2719;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated BlossomBriefInfo brief_info_list = 14;
}

import "BlossomScheduleInfo.proto";

message WorldOwnerBlossomScheduleInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 2800;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  BlossomScheduleInfo schedule_info = 10;
}

import "DailyTaskInfo.proto";

message WorldOwnerDailyTaskNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 193;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  uint32 filter_city_id = 4;
  repeated DailyTaskInfo task_list = 2;
  uint32 finished_daily_task_num = 9;
}

import "PlayerDieType.proto";

message WorldPlayerDieNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 259;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 murderer_entity_id = 3;
  PlayerDieType die_type = 13;
  oneof entity {
    uint32 monster_id = 6;
    uint32 gadget_id = 12;
  }
}

import "OnlinePlayerInfo.proto";
import "PlayerWidgetInfo.proto";

message WorldPlayerInfoNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3150;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }

  repeated PlayerWidgetInfo player_widget_info_list = 7;
  repeated uint32 player_uid_list = 12;
  repeated OnlinePlayerInfo player_info_list = 15;
}

import "PlayerLocationInfo.proto";
import "PlayerWorldLocationInfo.proto";

message WorldPlayerLocationNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 224;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated PlayerWorldLocationInfo player_world_loc_list = 5;
  repeated PlayerLocationInfo player_loc_list = 14;
}


message WorldPlayerReviveReq {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 229;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  //   IS_ALLOW_CLIENT = 1;
  // }
}


message WorldPlayerReviveRsp {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 286;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  int32 retcode = 11;
}

import "PlayerRTTInfo.proto";

message WorldPlayerRTTNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 37;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  repeated PlayerRTTInfo player_rtt_list = 6;
}

import "WorldRoutineInfo.proto";

message WorldRoutineChangeNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3535;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  WorldRoutineInfo routine_info = 14;
  uint32 routine_type = 10;
}


message WorldRoutineInfo {
  uint32 finish_progress = 1;
  uint32 routine_id = 10;
  uint32 progress = 7;
  bool is_finished = 15;
}


message WorldRoutineTypeCloseNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3527;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  uint32 routine_type = 10;
}

import "WorldRoutineInfo.proto";

message WorldRoutineTypeInfo {
  uint32 next_refresh_time = 13;
  repeated WorldRoutineInfo world_routine_info_list = 10;
  uint32 routine_type = 2;
}

import "WorldRoutineTypeInfo.proto";

message WorldRoutineTypeRefreshNotify {
  // enum CmdId {
  //   option allow_alias = true;
  //   NONE = 0;
  //   CMD_ID = 3522;
  //   ENET_CHANNEL_ID = 0;
  //   ENET_IS_RELIABLE = 1;
  // }

  WorldRoutineTypeInfo world_routine_type = 1;
}
